{"version":3,"sources":["webpack:///static/js/app.aaa73e5746308d6b7182.js","webpack:///./src/main.js","webpack:///./src/mixins/emitter.js","webpack:///PulseLoader.vue","webpack:///App.vue","webpack:///ButtonStore.vue","webpack:///CanvasModel.vue","webpack:///SuperButton.vue","webpack:///SuperCanvas.vue","webpack:///./src/decorators/decorator.js","webpack:///./src/mixins/draw.js","webpack:///./src/mixins/operateModels.js","webpack:///./src/store.js","webpack:///./bower_components/EaselJS/lib/easeljs-0.8.2.combined.js","webpack:///./~/vue-spinner/src/PulseLoader.vue","webpack:///./src/App.vue","webpack:///./src/components/ButtonStore.vue","webpack:///./src/components/CanvasModel.vue","webpack:///./src/components/SuperButton.vue","webpack:///./src/components/SuperCanvas.vue","webpack:///./src/App.vue?536a","webpack:///./~/vue-spinner/src/PulseLoader.vue?d086","webpack:///./src/components/SuperCanvas.vue?4c03","webpack:///./src/components/CanvasModel.vue?77ca","webpack:///./src/components/ButtonStore.vue?b9cd","webpack:///./src/components/SuperButton.vue?1dc6"],"names":["webpackJsonp","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_vue","_vue2","_App","_App2","el","template","components","App","Object","defineProperty","value","_mitt","_mitt2","name","props","loading","type","Boolean","color","String","size","margin","radius","data","spinnerStyle","backgroundColor","this","width","height","borderRadius","display","animationName","animationDuration","animationIterationCount","animationTimingFunction","animationFillMode","spinnerDelay1","animationDelay","spinnerDelay2","spinnerDelay3","_ButtonStore","_ButtonStore2","_SuperButton","_SuperButton2","_SuperCanvas","_SuperCanvas2","_store","_store2","store","ButtonStore","SuperButton","SuperCanvas","_PulseLoader","_PulseLoader2","_emitter","_emitter2","fetchable","savable","PulseLoader","methods","fetch","_this","setTimeout","emit","save","_this2","_underscore","_underscore2","watch","iscurrent","$parent","drawCurrent","uniqueId","ctrlline","newctrl","oldctrl","isEmpty","createCtrlline","changeSquare","changeLine","changeCtrlline","buttons","text","id","class","changeStatus","status","$store","dispatch","_stringify","_stringify2","_jquery","_jquery2","_EaselJS","_EaselJS2","_CanvasModel","_CanvasModel2","_operateModels","_operateModels2","_draw","_draw2","mixins","CanvasModel","created","on","models","containerp","localStorage","setItem","JSON","parse","getItem","x","y","clearModels","changeContainer","fetchModels","mounted","stage","Stage","container","Container","enableMouseOver","addChild","update","modelslength","removedtarget","ismousedown","handler","length","model","drawCircle","lastmodel","drawLine","removeAllChildren","simpleremove","deep","_ref","set","val","index","indexOf","currentmodel","clone","ctrllineRemoved","hide","without","mousedown","e","state","preventEvent","preventDefault","pageX","target","offset","left","pageY","top","addPoint","mouseup","mousemove","mirrorCtrlline","draggable","ctrlable","ctrlRemovable","removable","cursurable","movable","undefined","supercanvas","evt","stageX","stageY","addClass","removeClass","removeModel","removeCtrl","changeCurrent","innerfunc","isMirror","basicCtrlline","drawcurve","g","x2","y2","quadraticCurveTo","bezierCurveTo","lineTo","_decorator","circle","createjs","Shape","graphics","setStrokeStyle","beginStroke","beginFill","line","moveTo","uniqueIds","time","addChildAt","lines","filter","children","inner","contains","each","x1","y1","clear","console","log","findWhere","targets","isLine","isCtrl","removeChild","drawSquare","square","drawRect","_this3","squares","where","drawCtrlline","_this4","ctrllines","_async","setInterval","shift","clearInterval","push","_ref2","_ref3","hideCtrl","_ref4","actions","mutations","_vuex","_vuex2","use","isDragging","CHANGE_STATUS","CHANG_DRAGGING","CHANGE_PREVENT_EVENT","CHANGE_MIRROR","commit","changeDragging","changePreventEvent","changeMirror","Store","extend","subclass","superclass","o","constructor","prototype","promote","prefix","subP","supP","getPrototypeOf","__proto__","n","hasOwnProperty","array","searchElement","i","l","Event","bubbles","cancelable","currentTarget","eventPhase","timeStamp","Date","getTime","defaultPrevented","propagationStopped","immediatePropagationStopped","removed","p","stopPropagation","stopImmediatePropagation","remove","toString","EventDispatcher","_listeners","_captureListeners","initialize","addEventListener","removeEventListener","off","removeAllEventListeners","hasEventListener","dispatchEvent","_dispatchEvent","willTrigger","listener","useCapture","listeners","arr","scope","once","handleEvent","call","splice","eventObj","parent","list","captureListeners","slice","Ticker","RAF_SYNCHED","RAF","TIMEOUT","useRAF","timingMode","maxDelta","paused","_addEventListener","_inited","init","apply","arguments","_startTime","_pausedTime","_ticks","_pausedTicks","_interval","_lastTime","_times","_tickTimes","_timerId","_raf","interval","_setupTick","getInterval","setFPS","getFPS","defineProperties","get","framerate","_getTime","reset","f","window","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","getMeasuredTickTime","ticks","ttl","times","Math","min","getMeasuredFPS","setPaused","getPaused","runTime","getEventTime","getTicks","pauseable","_handleSynch","_tick","_handleRAF","_handleTimeout","mode","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","elapsedTime","event","delta","unshift","pop","now","performance","mozNow","msNow","oNow","webkitNow","UID","_nextID","MouseEvent","nativeEvent","pointerID","primary","rawX","rawY","relatedTarget","Event_constructor","_get_localX","globalToLocal","_get_localY","_get_isTouch","localX","localY","isTouch","Matrix2D","a","b","c","d","tx","ty","setValues","DEG_TO_RAD","PI","identity","append","a1","b1","c1","d1","prepend","tx1","appendMatrix","matrix","prependMatrix","appendTransform","scaleX","scaleY","rotation","skewX","skewY","regX","regY","r","cos","sin","prependTransform","rotate","angle","skew","scale","translate","invert","isIdentity","equals","transformPoint","pt","decompose","sqrt","atan2","abs","copy","DisplayProps","visible","alpha","shadow","compositeOperation","Point","point","Rectangle","pad","bottom","right","rectangle","union","rect","intersection","intersects","ButtonHelper","outLabel","overLabel","downLabel","play","hitArea","hitLabel","_isPressed","_isOver","_enabled","mouseChildren","enabled","actionsEnabled","gotoAndStop","setEnabled","cursor","_reset","__reset","getEnabled","label","t","gotoAndPlay","Shadow","offsetX","offsetY","blur","SpriteSheet","EventDispatcher_constructor","complete","_animations","_frames","_images","_data","_loadCount","_frameHeight","_frameWidth","_numFrames","_regX","_regY","_spacing","_margin","_parseData","getAnimations","animations","getNumFrames","animation","frames","getAnimation","getFrame","frameIndex","frame","getFrameBounds","images","img","src","document","createElement","getContext","naturalWidth","onload","_handleImageLoad","onerror","_handleImageError","Array","isArray","image","spacing","count","_calculateFrames","anim","speed","next","errorEvent","maxFrames","frameCount","frameWidth","frameHeight","imgLoop","imgs","imgW","imgH","Graphics","command","_stroke","_strokeStyle","_oldStrokeStyle","_strokeDash","_oldStrokeDash","_strokeIgnoreScale","_fill","_instructions","_commitIndex","_activeInstructions","_dirty","_storeIndex","G","getRGB","getHSL","hue","saturation","lightness","BASE_64","A","B","C","D","E","F","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","h","j","k","m","q","s","u","v","w","z","0","1","2","3","4","5","6","7","8","9","+","/","STROKE_CAPS_MAP","STROKE_JOINTS_MAP","canvas","createCanvas","_ctx","getInstructions","_updateInstructions","instructions","draw","ctx","instr","exec","drawAsPath","instrs","path","MoveTo","LineTo","arcTo","ArcTo","arc","startAngle","endAngle","anticlockwise","Arc","cpx","cpy","QuadraticCurveTo","cp1x","cp1y","cp2x","cp2y","BezierCurveTo","Rect","closePath","ClosePath","_setFill","Fill","beginLinearGradientFill","colors","ratios","x0","y0","linearGradient","beginRadialGradientFill","r0","r1","radialGradient","beginBitmapFill","repetition","bitmap","endFill","thickness","caps","joints","miterLimit","ignoreScale","StrokeStyle","setStrokeDash","segments","StrokeDash","_setStroke","Stroke","beginLinearGradientStroke","beginRadialGradientStroke","beginBitmapStroke","endStroke","curveTo","drawRoundRect","drawRoundRectComplex","radiusTL","radiusTR","radiusBR","radiusBL","RoundRect","Circle","drawEllipse","Ellipse","drawPolyStar","sides","pointSize","PolyStar","clean","decodePath","str","paramCount","params","base64","charAt","fi","pl","charCount","num","sign","unstore","mt","lt","at","bt","qt","cp","lf","rf","bf","ef","ss","sd","ls","rs","bs","es","dr","rr","rc","dc","de","dp","active","commitIndex","beginCmd","ll","fill","stroke","BeginPath","beginPath","style","fillStyle","mtx","transform","restore","createLinearGradient","addColorStop","createRadialGradient","readyState","createPattern","strokeStyle","setTransform","lineWidth","lineCap","isNaN","lineJoin","setLineDash","EMPTY_SEGMENTS","lineDashOffset","max","mTL","mTR","mBR","mBL","rTL","rTR","rBR","rBL","ox","oy","xe","ye","xm","ym","ps","DisplayObject","cacheCanvas","cacheID","mouseEnabled","tickEnabled","transformMatrix","snapToPixel","filters","mask","_cacheOffsetX","_cacheOffsetY","_filterOffsetX","_filterOffsetY","_cacheScale","_cacheDataURLID","_cacheDataURL","_props","_rectangle","_bounds","_MOUSE_EVENTS","suppressCrossDomainErrors","_snapToPixelEnabled","_hitTestCanvas","_hitTestContext","_nextCacheID","getStage","_Stage","isVisible","ignoreCache","drawImage","updateContext","getMatrix","clip","globalAlpha","globalCompositeOperation","_applyShadow","cache","_cacheWidth","_cacheHeight","updateCache","offX","offY","fBounds","_getFilterBounds","ceil","clearRect","_applyFilters","uncache","getCacheDataURL","toDataURL","localToGlobal","getConcatenatedMatrix","localToLocal","getConcatenatedDisplayProps","hitTest","hit","_testHit","getBounds","getTransformedBounds","_getBounds","setBounds","_cloneProps","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","evtObj","getImageData","applyFilter","bounds","ignoreTransform","_transformBounds","x_a","x_b","y_c","y_d","minX","maxX","minY","maxY","_hasMouseEventListener","evts","DisplayObject_constructor","tickChildren","getNumChildren","numChildren","hasContent","DisplayObject_draw","child","indx","good","removeChildAt","sort","kids","getChildAt","getChildByName","sortChildren","sortFunction","getChildIndex","swapChildrenAt","index1","index2","o1","o2","swapChildren","child1","child2","setChildIndex","getObjectUnderPoint","getObjectsUnderPoint","_getObjectsUnderPoint","recursive","_cloneChildren","DisplayObject__tick","mouse","activeListener","currentDepth","_testMask","result","DisplayObject_getBounds","Container_constructor","autoClear","getElementById","mouseX","mouseY","snapToPixelEnabled","mouseInBounds","tickOnUpdate","mouseMoveOutside","preventSelection","_pointerData","_pointerCount","_primaryPointerID","_mouseOverIntervalID","_nextStage","_prevStage","enableDOMEvents","_get_nextStage","_set_nextStage","nextStage","tick","mimeType","fillRect","dataURL","putImageData","frequency","_testMouseOver","enable","_eventListeners","_handleMouseUp","_handleMouseMove","_handleDoubleClick","_handleMouseDown","_getElementRect","getBoundingClientRect","err","offsetTop","offsetLeft","offsetWidth","offsetHeight","pageXOffset","scrollLeft","clientLeft","body","pageYOffset","scrollTop","clientTop","styles","getComputedStyle","currentStyle","padL","parseInt","paddingLeft","borderLeftWidth","padT","paddingTop","borderTopWidth","padR","paddingRight","borderRightWidth","padB","paddingBottom","borderBottomWidth","_getPointerData","_handlePointerMove","owner","inBounds","_updatePointerPosition","_dispatchMouseEvent","posEvtObj","_handlePointerUp","oTarget","down","_handlePointerDown","eventTarget","_mouseOverX","_mouseOverY","isEventTarget","common","oldList","_mouseOverTarget","oldTarget","pointerId","Bitmap","imageOrUri","sourceRect","Sprite","spriteSheet","frameOrAnimation","currentFrame","currentAnimation","currentAnimationFrame","_animation","_currentFrame","_skipAdvance","_normalizeFrame","stop","_goto","advance","fps","DisplayObject__cloneProps","frameDelta","animFrame","_dispatchAnimationEnd","end","changed","Text","font","textAlign","textBaseline","maxWidth","outline","lineHeight","_workingContext","H_OFFSETS","start","center","V_OFFSETS","hanging","middle","alphabetic","ideographic","col","_drawText","_prepContext","getMeasuredWidth","_getMeasuredWidth","getMeasuredLineHeight","getMeasuredHeight","getMetrics","vOffset","substr","paint","maxW","hardLines","split","measureText","words","jl","wordW","_drawTextLine","strokeText","fillText","BitmapText","letterSpacing","spaceWidth","_oldProps","maxPoolSize","_spritePool","_updateText","Container_draw","Container_getBounds","Container__cloneProps","_getFrameIndex","character","toUpperCase","toLowerCase","_getFrame","_getLineHeight","_getSpaceWidth","sprite","change","spaceW","lineH","pool","childIndex","numKids","hasSpace","MovieClip","startPosition","loop","labels","inited","INDEPENDENT","timeline","Timeline","position","useTicks","autoReset","frameBounds","_synchOffset","_prevPos","_prevPosition","_t","_managed","MovieClipPlugin","SINGLE_FRAME","SYNCHED","install","getLabels","getCurrentLabel","_updateTimeline","getDuration","duration","currentLabel","totalFrames","positionOrLabel","independent","_framerate","Container__tick","pos","resolve","NaN","tl","synched","Tween","NONE","_calcPosition","setPosition","tweens","_tweens","tween","_target","passive","_stepPosition","_addManagedChild","_setState","_off","Container__getBounds","priority","installPlugin","prop","step","startValues","endValues","ratio","wait","SpriteSheetUtils","_workingCanvas","addFlippedFrames","horizontal","vertical","both","_flip","extractFrame","mergeAlpha","rgbImage","alphaImage","il","__tmp","fl","sfx","names","al","SpriteSheetBuilder","maxHeight","padding","timeSlice","progress","_nextFrameIndex","_index","_timerID","_scale","ERR_DIMENSIONS","ERR_RUNNING","addFrame","source","setupFunction","setupData","nominalBounds","funct","addAnimation","addMovieClip","labelFunction","rects","baseFrameIndex","_setupMovieClipFrame","_labels","lbls","build","_startBuild","_drawNext","_endBuild","buildAsync","_run","stopAsync","dataFrames","_fillRow","_getSize","ae","pow","maxH","sc","rx","floor","ry","rh","rw","round","ts","DOMElement","htmlElement","transformOrigin","WebkitTransformOrigin","msTransformOrigin","MozTransformOrigin","OTransformOrigin","_handleDrawEnd","visibility","oldProps","oldMtx","WebkitTransform","OTransform","msTransform","MozTransform","opacity","Filter","targetCtx","targetX","targetY","imageData","_applyFilter","BlurFilter","blurX","blurY","quality","MUL_TABLE","SHG_TABLE","radiusX","radiusY","iterations","px","yp","yi","yw","pr","pg","pb","pa","divx","divy","w1","h1","rxp1","ryp1","ssx","sx","ssy","sy","si","stx","mty","sty","ms","AlphaMapFilter","alphaMap","_alphaMap","_mapData","_prepAlphaMap","map","HTMLCanvasElement","imgData","AlphaMaskFilter","ColorFilter","redMultiplier","greenMultiplier","blueMultiplier","alphaMultiplier","redOffset","greenOffset","blueOffset","alphaOffset","ColorMatrix","brightness","contrast","setColor","DELTA_INDEX","IDENTITY_MATRIX","LENGTH","adjustColor","adjustHue","adjustContrast","adjustBrightness","adjustSaturation","_cleanValue","_multiplyMatrix","lumR","lumG","lumB","cosVal","sinVal","concat","_fixMatrix","toArray","limit","ColorMatrixFilter","m0","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","Touch","isSupported","navigator","singleTouch","allowDefault","__touch","pointers","multitouch","_IOS_enable","_IE_enable","disable","_IOS_disable","_IE_disable","_IOS_handleEvent","touches","changedTouches","touch","identifier","_handleStart","_handleMove","_handleEnd","_IE_handleEvent","msTouchAction","touchAction","activeIDs","ids","srcElement","EaselJS","version","buildDate","Component","render","_vm","_h","$createElement","_c","_self","staticClass","_v","staticRenderFns","directives","rawName","expression","attrs","_l","disabled","click","button","$event","_s"],"mappings":"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","file":"static/js/app.aaa73e5746308d6b7182.js","sourcesContent":["webpackJsonp([1,0],[\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _vue = __webpack_require__(6);\n\t\n\tvar _vue2 = _interopRequireDefault(_vue);\n\t\n\tvar _App = __webpack_require__(31);\n\t\n\tvar _App2 = _interopRequireDefault(_App);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tnew _vue2.default({\n\t  el: '.container',\n\t  template: '<App/>',\n\t  components: { App: _App2.default }\n\t});\n\n/***/ }),\n/* 1 */,\n/* 2 */,\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _mitt = __webpack_require__(27);\n\t\n\tvar _mitt2 = _interopRequireDefault(_mitt);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = new _mitt2.default();\n\n/***/ }),\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t\n\t  name: 'PulseLoader',\n\t\n\t  props: {\n\t    loading: {\n\t      type: Boolean,\n\t      default: true\n\t    },\n\t    color: {\n\t      type: String,\n\t      default: '#5dc596'\n\t    },\n\t    size: {\n\t      type: String,\n\t      default: '15px'\n\t    },\n\t    margin: {\n\t      type: String,\n\t      default: '2px'\n\t    },\n\t    radius: {\n\t      type: String,\n\t      default: '100%'\n\t    }\n\t  },\n\t  data: function data() {\n\t    return {\n\t      spinnerStyle: {\n\t        backgroundColor: this.color,\n\t        width: this.size,\n\t        height: this.size,\n\t        margin: this.margin,\n\t        borderRadius: this.radius,\n\t        display: 'inline-block',\n\t        animationName: 'v-pulseStretchDelay',\n\t        animationDuration: '0.75s',\n\t        animationIterationCount: 'infinite',\n\t        animationTimingFunction: 'cubic-bezier(.2,.68,.18,1.08)',\n\t        animationFillMode: 'both'\n\t      },\n\t      spinnerDelay1: {\n\t        animationDelay: '0.12s'\n\t      },\n\t      spinnerDelay2: {\n\t        animationDelay: '0.24s'\n\t      },\n\t      spinnerDelay3: {\n\t        animationDelay: '0.36s'\n\t      }\n\t    };\n\t  }\n\t};\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _ButtonStore = __webpack_require__(32);\n\t\n\tvar _ButtonStore2 = _interopRequireDefault(_ButtonStore);\n\t\n\tvar _SuperButton = __webpack_require__(34);\n\t\n\tvar _SuperButton2 = _interopRequireDefault(_SuperButton);\n\t\n\tvar _SuperCanvas = __webpack_require__(35);\n\t\n\tvar _SuperCanvas2 = _interopRequireDefault(_SuperCanvas);\n\t\n\tvar _store = __webpack_require__(17);\n\t\n\tvar _store2 = _interopRequireDefault(_store);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'app',\n\t  store: _store2.default,\n\t  components: {\n\t    ButtonStore: _ButtonStore2.default,\n\t    SuperButton: _SuperButton2.default,\n\t    SuperCanvas: _SuperCanvas2.default\n\t  }\n\t};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _PulseLoader = __webpack_require__(30);\n\t\n\tvar _PulseLoader2 = _interopRequireDefault(_PulseLoader);\n\t\n\tvar _emitter = __webpack_require__(3);\n\t\n\tvar _emitter2 = _interopRequireDefault(_emitter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'ButtonStore',\n\t  data: function data() {\n\t    return {\n\t      fetchable: true,\n\t      savable: true\n\t    };\n\t  },\n\t\n\t  components: {\n\t    PulseLoader: _PulseLoader2.default\n\t  },\n\t  methods: {\n\t    fetch: function fetch() {\n\t      var _this = this;\n\t\n\t      this.fetchable = false;\n\t\n\t      setTimeout(function () {\n\t        _emitter2.default.emit(\"fromStorage\");\n\t        _this.savable = true;\n\t        _this.fetchable = true;\n\t      }, 500);\n\t    },\n\t    save: function save() {\n\t      var _this2 = this;\n\t\n\t      this.savable = false;\n\t\n\t      setTimeout(function () {\n\t        _emitter2.default.emit(\"toStorage\");\n\t        _this2.savable = true;\n\t        _this2.fetchable = true;\n\t      }, 500);\n\t    }\n\t  }\n\t};\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _underscore = __webpack_require__(2);\n\t\n\tvar _underscore2 = _interopRequireDefault(_underscore);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'canvas-model',\n\t\n\t  props: ['iscurrent', 'x', 'y', 'uniqueId', 'ctrlline'],\n\t\n\t  watch: {\n\t    iscurrent: function iscurrent() {\n\t      this.$parent.drawCurrent(this.iscurrent, this.uniqueId);\n\t    },\n\t    ctrlline: function ctrlline(newctrl, oldctrl) {\n\t\n\t      if (!_underscore2.default.isEmpty(oldctrl)) {\n\t\n\t        this.$parent.changeSquare(this);\n\t        this.$parent.changeLine(this);\n\t        this.$parent.changeCtrlline(this);\n\t      } else {\n\t        this.$parent.createCtrlline(this);\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  name: 'super-button',\n\t  data: function data() {\n\t    return {\n\t      buttons: [{\n\t        text: '画线',\n\t        id: 'line',\n\t        class: 'btn btn-outline-success'\n\t      }, {\n\t        text: '选点',\n\t        id: 'ctrlline',\n\t        class: 'btn btn-outline-success'\n\t      }, {\n\t        text: '移动',\n\t        id: 'move',\n\t        class: 'btn btn-outline-success'\n\t      }, {\n\t        text: '删除',\n\t        id: 'remove',\n\t        class: 'btn btn-outline-danger'\n\t      }]\n\t    };\n\t  },\n\t\n\t  methods: {\n\t    changeStatus: function changeStatus(status) {\n\t      this.$store.dispatch('changeStatus', status);\n\t    }\n\t  }\n\t};\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _stringify = __webpack_require__(18);\n\t\n\tvar _stringify2 = _interopRequireDefault(_stringify);\n\t\n\tvar _jquery = __webpack_require__(4);\n\t\n\tvar _jquery2 = _interopRequireDefault(_jquery);\n\t\n\tvar _underscore = __webpack_require__(2);\n\t\n\tvar _underscore2 = _interopRequireDefault(_underscore);\n\t\n\tvar _EaselJS = __webpack_require__(26);\n\t\n\tvar _EaselJS2 = _interopRequireDefault(_EaselJS);\n\t\n\tvar _CanvasModel = __webpack_require__(33);\n\t\n\tvar _CanvasModel2 = _interopRequireDefault(_CanvasModel);\n\t\n\tvar _operateModels = __webpack_require__(16);\n\t\n\tvar _operateModels2 = _interopRequireDefault(_operateModels);\n\t\n\tvar _draw = __webpack_require__(15);\n\t\n\tvar _draw2 = _interopRequireDefault(_draw);\n\t\n\tvar _emitter = __webpack_require__(3);\n\t\n\tvar _emitter2 = _interopRequireDefault(_emitter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'super-canvas',\n\t\n\t  mixins: [_operateModels2.default, _draw2.default],\n\t\n\t  components: {\n\t    CanvasModel: _CanvasModel2.default\n\t  },\n\t\n\t  created: function created() {\n\t    var _this = this;\n\t\n\t    _emitter2.default.on(\"toStorage\", function () {\n\t      var models = _this.models;\n\t      var containerp = _this.containerp;\n\t\n\t      localStorage.setItem(\"vue_sketch_data\", (0, _stringify2.default)({ models: models, containerp: containerp }));\n\t    });\n\t\n\t    _emitter2.default.on(\"fromStorage\", function () {\n\t      var data = JSON.parse(localStorage.getItem(\"vue_sketch_data\")),\n\t          x = data.containerp.x,\n\t          y = data.containerp.y;\n\t\n\t      _this.clearModels();\n\t      _this.changeContainer({ x: x, y: y });\n\t      _this.fetchModels(data.models);\n\t    });\n\t  },\n\t  mounted: function mounted() {\n\t    this.stage = new _EaselJS2.default.Stage(\"canvas\");\n\t    this.container = new _EaselJS2.default.Container();\n\t    this.stage.enableMouseOver();\n\t    this.stage.addChild(this.container);\n\t    this.stage.update();\n\t  },\n\t  data: function data() {\n\t    return {\n\t      models: [],\n\t      modelslength: 0,\n\t      removedtarget: null,\n\t      ismousedown: false,\n\t      containerp: {\n\t        x: 0,\n\t        y: 0\n\t      }\n\t    };\n\t  },\n\t\n\t\n\t  watch: {\n\t    models: {\n\t      handler: function handler(models) {\n\t        if (models.length > this.modelslength) {\n\t\n\t          var model = models[models.length - 1];\n\t          this.drawCircle(model, model);\n\t\n\t          if (model.ctrlline) {\n\t            this.createCtrlline(model);\n\t          }\n\t\n\t          if (models[models.length - 2] !== void 0) {\n\t            var lastmodel = models[models.length - 2];\n\t            this.drawLine(model, lastmodel);\n\t          }\n\t        } else if (models.length === 0) {\n\t          this.container.removeAllChildren();\n\t          this.stage.update();\n\t        } else if (models.length < this.modelslength) {\n\t          this.simpleremove(this.removedtarget);\n\t        }\n\t\n\t        this.modelslength = models.length;\n\t      },\n\t      deep: true\n\t    },\n\t    containerp: {\n\t      handler: function handler(_ref) {\n\t        var x = _ref.x,\n\t            y = _ref.y;\n\t\n\t        this.container.set({ x: x, y: y });\n\t        this.stage.update();\n\t      },\n\t      deep: true\n\t    },\n\t    removedtarget: function removedtarget(val) {\n\t      var model = val.model,\n\t          index = _underscore2.default.indexOf(this.models, model);\n\t\n\t      if (index !== 0 && index !== this.models.length - 1) {\n\t        this.drawLine(this.models[index - 1], this.models[index + 1]);\n\t      }\n\t\n\t      if (model.iscurrent && this.models.length > 1) {\n\t        if (index === this.models.length - 1) {\n\t          var currentmodel = this.models[this.models.length - 2];\n\t        } else {\n\t          var currentmodel = this.models[this.models.length - 1];\n\t        }\n\t\n\t        var ctrlline = _underscore2.default.clone(currentmodel.ctrlline);\n\t\n\t        if (ctrlline !== void 0 && !model.ctrllineRemoved) {\n\t          ctrlline.hide = false;\n\t          currentmodel.ctrlline = ctrlline;\n\t        }\n\t        currentmodel.iscurrent = true;\n\t      }\n\t\n\t      this.models = _underscore2.default.without(this.models, model);\n\t    }\n\t  },\n\t\n\t  methods: {\n\t    mousedown: function mousedown(e) {\n\t      if (this.$store.state.preventEvent) {\n\t        e.preventDefault();\n\t        this.$store.dispatch(\"changePreventEvent\", false);\n\t        return;\n\t      }\n\t\n\t      if (this.$store.state.status !== 'line') {\n\t        return;\n\t      }\n\t\n\t      var x = e.pageX - (0, _jquery2.default)(e.target).offset().left - this.containerp.x,\n\t          y = e.pageY - (0, _jquery2.default)(e.target).offset().top - this.containerp.y,\n\t          model = {\n\t        iscurrent: true,\n\t        ctrlline: void 0,\n\t        x: x,\n\t        y: y\n\t      };\n\t\n\t      this.addPoint({\n\t        model: model,\n\t        fetch: false,\n\t        models: this.models\n\t      });\n\t\n\t      this.ismousedown = true;\n\t    },\n\t    mouseup: function mouseup(e) {\n\t      this.$store.dispatch('changeDragging', false);\n\t      this.ismousedown = false;\n\t    },\n\t    mousemove: function mousemove(e) {\n\t\n\t      var status = this.$store.state.status;\n\t\n\t      if (this.ismousedown && (status === 'line' || status === 'ctrlline')) {\n\t        var x = e.pageX - (0, _jquery2.default)(e.target).offset().left - this.containerp.x,\n\t            y = e.pageY - (0, _jquery2.default)(e.target).offset().top - this.containerp.y;\n\t\n\t        this.mirrorCtrlline({ x: x, y: y });\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.draggable = exports.ctrlable = exports.ctrlRemovable = exports.removable = exports.cursurable = exports.movable = undefined;\n\t\n\tvar _jquery = __webpack_require__(4);\n\t\n\tvar _jquery2 = _interopRequireDefault(_jquery);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar movable = exports.movable = function movable(target, supercanvas) {\n\t  target.on(\"pressmove\", function (evt) {\n\t    if (supercanvas.$store.state.status !== 'move') {\n\t      return;\n\t    }\n\t\n\t    var x = evt.stageX - target.model.x,\n\t        y = evt.stageY - target.model.y;\n\t\n\t    supercanvas.changeContainer({ x: x, y: y });\n\t  });\n\t};\n\t\n\tvar cursurable = exports.cursurable = function cursurable(target, supercanvas) {\n\t  target.on(\"mouseover\", function () {\n\t    if (supercanvas.$store.state.status === 'move') {\n\t      (0, _jquery2.default)(\"#canvas\").addClass(\"move\");\n\t    }\n\t\n\t    if (supercanvas.$store.state.status === 'remove') {\n\t      (0, _jquery2.default)(\"#canvas\").addClass(\"remove\");\n\t    }\n\t\n\t    if (supercanvas.$store.state.status === 'line' && !target.model.iscurrent) {\n\t      (0, _jquery2.default)(\"#canvas\").addClass(\"unable\");\n\t    }\n\t\n\t    if (supercanvas.$store.state.status === 'ctrlline' && !target.model.iscurrent) {\n\t      (0, _jquery2.default)(\"#canvas\").addClass(\"ctrlline\");\n\t    }\n\t  });\n\t\n\t  target.on(\"mouseout\", function () {\n\t    (0, _jquery2.default)(\"#canvas\").removeClass(\"remove unable ctrlline move\");\n\t  });\n\t};\n\t\n\tvar removable = exports.removable = function removable(target, supercanvas) {\n\t  target.on(\"mousedown\", function () {\n\t    if (supercanvas.$store.state.status === 'remove') {\n\t      supercanvas.removeModel(target);\n\t    }\n\t  });\n\t};\n\t\n\tvar ctrlRemovable = exports.ctrlRemovable = function ctrlRemovable(target, supercanvas) {\n\t  target.on(\"mousedown\", function () {\n\t    if (supercanvas.$store.state.status === 'remove') {\n\t      supercanvas.removeCtrl(target.model);\n\t    }\n\t  });\n\t\n\t  target.on(\"mouseover\", function () {\n\t    if (supercanvas.$store.state.status === 'remove') {\n\t      (0, _jquery2.default)(\"#canvas\").addClass(\"remove\");\n\t    }\n\t  });\n\t\n\t  target.on(\"mouseout\", function () {\n\t    (0, _jquery2.default)(\"#canvas\").removeClass(\"remove\");\n\t  });\n\t};\n\t\n\tvar ctrlable = exports.ctrlable = function ctrlable(target, supercanvas) {\n\t  target.on(\"click\", function () {\n\t    supercanvas.$store.dispatch('changePreventEvent', true);\n\t\n\t    if (supercanvas.$store.state.status === 'ctrlline') {\n\t      supercanvas.changeCurrent(target);\n\t    }\n\t  });\n\t\n\t  target.on(\"pressmove\", function (e) {\n\t    supercanvas.$store.dispatch('changePreventEvent', true);\n\t\n\t    if (target.model.iscurrent && supercanvas.$store.state.status === 'ctrlline') {\n\t      supercanvas.$store.dispatch('changeMirror', true);\n\t\n\t      var x = e.stageX - supercanvas.containerp.x,\n\t          y = e.stageY - supercanvas.containerp.y;\n\t\n\t      supercanvas.mirrorCtrlline({ x: x, y: y });\n\t    }\n\t  });\n\t\n\t  target.on(\"pressup\", function () {\n\t    supercanvas.$store.dispatch('changeMirror', false);\n\t    supercanvas.$store.dispatch('changeDragging', false);\n\t  });\n\t};\n\t\n\tvar draggable = exports.draggable = function () {\n\t  var innerfunc = function innerfunc(_ref) {\n\t    var target = _ref.target,\n\t        supercanvas = _ref.supercanvas,\n\t        e = _ref.e;\n\t\n\t    supercanvas.$store.dispatch(\"changePreventEvent\", true);\n\t\n\t    if (target.model.iscurrent && supercanvas.$store.state.status === 'line' && !supercanvas.$store.state.isMirror) {\n\t      var x = e.stageX - supercanvas.container.x,\n\t          y = e.stageY - supercanvas.container.y;\n\t\n\t      supercanvas.basicCtrlline({\n\t        model: target.model,\n\t        ctrlline: {\n\t          x: x,\n\t          y: y,\n\t          isMirror: false,\n\t          hide: false\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  return function (target, supercanvas) {\n\t    target.on(\"mousedown\", function (e) {\n\t      innerfunc({ target: target, supercanvas: supercanvas, e: e });\n\t    });\n\t\n\t    target.on(\"pressmove\", function (e) {\n\t      innerfunc({ target: target, supercanvas: supercanvas, e: e });\n\t    });\n\t\n\t    target.on(\"pressup\", function () {\n\t      supercanvas.$store.dispatch(\"changePreventEvent\", false);\n\t      supercanvas.$store.dispatch(\"changeDragging\", false);\n\t    });\n\t  };\n\t}();\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _underscore = __webpack_require__(2);\n\t\n\tvar _underscore2 = _interopRequireDefault(_underscore);\n\t\n\tvar _decorator = __webpack_require__(14);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction drawcurve(g, x2, y2, lastmodel, model) {\n\t\n\t  if (lastmodel.ctrlline && (!model.ctrlline || model.ctrlline && !model.ctrlline.isMirror)) {\n\t    g.quadraticCurveTo(lastmodel.ctrlline.x, lastmodel.ctrlline.y, x2, y2);\n\t  } else if (!lastmodel.ctrlline && model.ctrlline && model.ctrlline.isMirror) {\n\t    g.quadraticCurveTo(model.ctrlline.x, model.ctrlline.y, x2, y2);\n\t  } else if (lastmodel.ctrlline && model.ctrlline && model.ctrlline.isMirror) {\n\t    g.bezierCurveTo(lastmodel.ctrlline.x, lastmodel.ctrlline.y, model.ctrlline.x, model.ctrlline.y, x2, y2);\n\t  } else {\n\t    g.lineTo(x2, y2);\n\t  }\n\t}\n\t\n\texports.default = {\n\t  methods: {\n\t    drawCircle: function drawCircle(_ref, model) {\n\t      var x = _ref.x,\n\t          y = _ref.y,\n\t          uniqueId = _ref.uniqueId,\n\t          iscurrent = _ref.iscurrent;\n\t\n\t      var circle = new createjs.Shape();\n\t\n\t      circle.graphics.setStrokeStyle(1).beginStroke(\"#000000\");\n\t\n\t      if (iscurrent) {\n\t        circle.graphics.beginFill(\"#000\");\n\t      } else {\n\t        circle.graphics.beginFill(\"#fff\");\n\t      }\n\t\n\t      circle.graphics.drawCircle(0, 0, 3);\n\t\n\t      circle.x = x;\n\t      circle.y = y;\n\t      circle.uniqueId = uniqueId;\n\t      circle.model = model;\n\t      circle.name = \"circle\";\n\t\n\t      (0, _decorator.movable)(circle, this);\n\t      (0, _decorator.cursurable)(circle, this);\n\t      (0, _decorator.removable)(circle, this);\n\t      (0, _decorator.ctrlable)(circle, this);\n\t      (0, _decorator.draggable)(circle, this);\n\t\n\t      this.container.addChild(circle);\n\t\n\t      this.stage.update();\n\t    },\n\t    drawLine: function drawLine(model, lastmodel) {\n\t      var line = new createjs.Shape();\n\t\n\t      line.graphics.setStrokeStyle(1);\n\t      line.graphics.beginStroke(\"#000\");\n\t      line.graphics.moveTo(model.x, model.y);\n\t      drawcurve(line.graphics, lastmodel.x, lastmodel.y, lastmodel, model);\n\t      line.graphics.lineTo(lastmodel.x, lastmodel.y);\n\t      line.uniqueIds = [lastmodel.uniqueId, model.uniqueId];\n\t      line.models = [lastmodel, model];\n\t      line.time = 0;\n\t      line.name = \"line\";\n\t\n\t      this.container.addChildAt(line, 0);\n\t      this.stage.update();\n\t\n\t      return line;\n\t    },\n\t    changeLine: function changeLine(model) {\n\t      var _this = this;\n\t\n\t      var lines = _underscore2.default.filter(this.container.children, function (inner) {\n\t        if (inner.name === \"line\") {\n\t          if (_underscore2.default.contains(inner.uniqueIds, model.uniqueId)) {\n\t            return true;\n\t          }\n\t        }\n\t      });\n\t\n\t      _underscore2.default.each(lines, function (line) {\n\t        var x1 = line.models[0].x,\n\t            y1 = line.models[0].y,\n\t            x2 = line.models[1].x,\n\t            y2 = line.models[1].y;\n\t\n\t        if (line.time === 0) {\n\t          line.graphics.clear();\n\t          line.time++;\n\t        }\n\t\n\t        line.time--;\n\t        line.graphics.setStrokeStyle(1);\n\t        line.graphics.beginStroke(\"#000\");\n\t        line.graphics.moveTo(x1, y1);\n\t\n\t        if (model.uniqueId === line.models[0].uniqueId) {\n\t          console.log(model.uniqueId);\n\t          drawcurve(line.graphics, x2, y2, model, line.models[1]);\n\t        } else {\n\t          drawcurve(line.graphics, x2, y2, line.models[0], model);\n\t        }\n\t\n\t        _this.stage.update();\n\t      });\n\t    },\n\t    drawCurrent: function drawCurrent(iscurrent, uniqueId) {\n\t      var target = _underscore2.default.findWhere(this.container.children, { uniqueId: uniqueId, name: \"circle\" }),\n\t          color = iscurrent ? \"#000\" : \"#fff\";\n\t\n\t      target.graphics.beginFill(color).drawCircle(0, 0, 3);\n\t      this.stage.update();\n\t    },\n\t    simpleremove: function simpleremove(target) {\n\t      var _this2 = this;\n\t\n\t      var targets = _underscore2.default.filter(this.container.children, function (inner) {\n\t        var isLine = _underscore2.default.contains(inner.uniqueIds, target.uniqueId),\n\t            isCtrl = inner.uniqueId === target.uniqueId && (inner.name === \"square\" || inner.name === \"ctrlline\");\n\t\n\t        if (isLine || isCtrl) {\n\t          return true;\n\t        }\n\t      });\n\t\n\t      this.container.removeChild(target);\n\t\n\t      _underscore2.default.each(targets, function (inner) {\n\t        _this2.container.removeChild(inner);\n\t      });\n\t\n\t      this.stage.update();\n\t    },\n\t    drawSquare: function drawSquare(x, y, uniqueId, model, isMirror) {\n\t      var square = new createjs.Shape();\n\t\n\t      square.graphics.setStrokeStyle(1).beginStroke(\"#f46c51\").beginFill(\"#f46c51\").drawRect(-2, -2, 4, 4);\n\t\n\t      if (!isMirror) {\n\t        square.x = x;\n\t        square.y = y;\n\t      } else {\n\t        square.x = 2 * model.x - x;\n\t        square.y = 2 * model.y - y;\n\t      }\n\t      square.uniqueId = uniqueId;\n\t      square.model = model;\n\t      square.isMirror = isMirror;\n\t      square.name = \"square\";\n\t      (0, _decorator.ctrlRemovable)(square, this);\n\t      if (model.ctrlline.hide) {\n\t        square.graphics.clear();\n\t      }\n\t\n\t      this.container.addChild(square);\n\t\n\t      this.stage.update();\n\t\n\t      return square;\n\t    },\n\t    changeSquare: function changeSquare(model) {\n\t      var _this3 = this;\n\t\n\t      var squares = _underscore2.default.where(this.container.children, {\n\t        uniqueId: model.uniqueId,\n\t        name: \"square\"\n\t      });\n\t\n\t      _underscore2.default.each(squares, function (square) {\n\t\n\t        if (_underscore2.default.isEmpty(model.ctrlline)) {\n\t          _this3.container.removeChild(square);\n\t        } else if (model.ctrlline.hide === false) {\n\t\n\t          square.graphics.setStrokeStyle(1).beginStroke(\"#f46c51\").beginFill(\"#f46c51\").drawRect(-2, -2, 4, 4);\n\t\n\t          if (!square.isMirror) {\n\t            square.x = model.ctrlline.x;\n\t            square.y = model.ctrlline.y;\n\t          } else {\n\t            square.x = 2 * model.x - model.ctrlline.x;\n\t            square.y = 2 * model.y - model.ctrlline.y;\n\t          }\n\t        } else {\n\t          square.graphics.clear();\n\t        }\n\t\n\t        _this3.stage.update();\n\t      });\n\t    },\n\t    drawCtrlline: function drawCtrlline(x1, y1, x2, y2, uniqueId, model, isMirror) {\n\t      var line = new createjs.Shape();\n\t\n\t      line.graphics.setStrokeStyle(1);\n\t      line.graphics.beginStroke(\"#f46c51\");\n\t\n\t      if (!isMirror) {\n\t        line.graphics.moveTo(x1, y1);\n\t        line.graphics.lineTo(x2, y2);\n\t      } else {\n\t        line.graphics.moveTo(x1, y1);\n\t        line.graphics.lineTo(2 * x1 - x2, 2 * y1 - y2);\n\t      }\n\t\n\t      line.uniqueId = uniqueId;\n\t      line.model = model;\n\t      line.time = 0;\n\t      line.isMirror = isMirror;\n\t      line.name = \"ctrlline\";\n\t\n\t      if (model.ctrlline.hide) {\n\t        line.graphics.clear();\n\t      }\n\t\n\t      this.container.addChildAt(line, 0);\n\t\n\t      this.stage.update();\n\t\n\t      return line;\n\t    },\n\t    changeCtrlline: function changeCtrlline(model) {\n\t      var _this4 = this;\n\t\n\t      var ctrllines = _underscore2.default.where(this.container.children, {\n\t        uniqueId: model.uniqueId,\n\t        name: \"ctrlline\"\n\t      });\n\t\n\t      _underscore2.default.each(ctrllines, function (ctrlline) {\n\t\n\t        if (_underscore2.default.isEmpty(model.ctrlline)) {\n\t          _this4.container.removeChild(ctrlline);\n\t        } else if (model.ctrlline.hide === false) {\n\t          if (ctrlline.time == 0) {\n\t            ctrlline.graphics.clear();\n\t            ctrlline.time++;\n\t          }\n\t\n\t          ctrlline.time--;\n\t          ctrlline.graphics.setStrokeStyle(1);\n\t          ctrlline.graphics.beginStroke(\"#f46c51\");\n\t\n\t          if (!ctrlline.isMirror) {\n\t            ctrlline.graphics.moveTo(model.x, model.y);\n\t            ctrlline.graphics.lineTo(model.ctrlline.x, model.ctrlline.y);\n\t          } else {\n\t            ctrlline.graphics.moveTo(model.x, model.y);\n\t            ctrlline.graphics.lineTo(2 * model.x - model.ctrlline.x, 2 * model.y - model.ctrlline.y);\n\t          }\n\t        } else {\n\t          ctrlline.graphics.clear();\n\t        }\n\t\n\t        _this4.stage.update();\n\t      });\n\t    },\n\t    createCtrlline: function createCtrlline(model) {\n\t      var x = model.ctrlline.x,\n\t          y = model.ctrlline.y,\n\t          x2 = model.x,\n\t          y2 = model.y,\n\t          uniqueId = model.uniqueId,\n\t          isMirror = model.ctrlline.isMirror;\n\t\n\t      this.drawSquare(x, y, uniqueId, model, false);\n\t      this.drawCtrlline(x2, y2, x, y, uniqueId, model, false);\n\t\n\t      if (isMirror) {\n\t\n\t        this.drawSquare(x, y, uniqueId, model, true);\n\t        this.drawCtrlline(x2, y2, x, y, uniqueId, model, true);\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _underscore = __webpack_require__(2);\n\t\n\tvar _underscore2 = _interopRequireDefault(_underscore);\n\t\n\tvar _async = __webpack_require__(7);\n\t\n\tvar _async2 = _interopRequireDefault(_async);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  methods: {\n\t    fetchModels: function fetchModels(models) {\n\t      var _this = this;\n\t\n\t      if (models.length === 0) {\n\t        return;\n\t      }\n\t\n\t      var addPoint = setInterval(function () {\n\t        var model = models.shift();\n\t\n\t        _this.addPoint({\n\t          model: model,\n\t          fetch: true,\n\t          models: _this.models\n\t        });\n\t\n\t        if (models.length === 0) {\n\t          clearInterval(addPoint);\n\t        }\n\t      }, 0.001);\n\t    },\n\t    addPoint: function addPoint(_ref) {\n\t      var model = _ref.model,\n\t          fetch = _ref.fetch,\n\t          models = _ref.models;\n\t\n\t      delete model.uniqueId;\n\t\n\t      if (!fetch && models.length > 0) {\n\t        var currentmodel = _underscore2.default.findWhere(models, { 'iscurrent': true });\n\t\n\t        currentmodel.iscurrent = false;\n\t      }\n\t\n\t      model.uniqueId = _underscore2.default.uniqueId();\n\t      models.push(model);\n\t    },\n\t    changeContainer: function changeContainer(_ref2) {\n\t      var x = _ref2.x,\n\t          y = _ref2.y;\n\t\n\t      this.containerp.x = x;\n\t      this.containerp.y = y;\n\t    },\n\t    removeModel: function removeModel(target) {\n\t      this.removedtarget = target;\n\t    },\n\t    changeCurrent: function changeCurrent(target) {\n\t      var currentmodel = _underscore2.default.findWhere(this.models, { 'iscurrent': true });\n\t\n\t      currentmodel.iscurrent = false;\n\t      target.model.iscurrent = true;\n\t    },\n\t    mirrorCtrlline: function mirrorCtrlline(_ref3) {\n\t      var x = _ref3.x,\n\t          y = _ref3.y;\n\t\n\t      var model = _underscore2.default.findWhere(this.models, {\n\t        iscurrent: true\n\t      }),\n\t          ctrlline = {\n\t        x: x,\n\t        y: y,\n\t        isMirror: true,\n\t        hide: false\n\t      };\n\t\n\t      model.ctrlline = ctrlline;\n\t      this.hideCtrl();\n\t    },\n\t    basicCtrlline: function basicCtrlline(_ref4) {\n\t      var model = _ref4.model,\n\t          ctrlline = _ref4.ctrlline;\n\t\n\t      model.ctrlline = ctrlline;\n\t      this.hideCtrl();\n\t    },\n\t    removeCtrl: function removeCtrl(model) {\n\t      var model = _underscore2.default.findWhere(this.models, { uniqueId: model.uniqueId });\n\t      model.ctrlline = void 0;\n\t    },\n\t    hideCtrl: function hideCtrl() {\n\t      var model = _underscore2.default.filter(this.models, function (inner) {\n\t        if (inner.ctrlline) {\n\t          return inner.iscurrent === false && inner.ctrlline.hide === false;\n\t        } else {\n\t          return false;\n\t        }\n\t      })[0];\n\t\n\t      if (model !== void 0) {\n\t        var ctrlline = _underscore2.default.clone(model.ctrlline);\n\t\n\t        ctrlline.hide = true;\n\t\n\t        model.ctrlline = ctrlline;\n\t      }\n\t    },\n\t    clearModels: function clearModels() {\n\t      this.models = [];\n\t    }\n\t  }\n\t};\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.actions = exports.mutations = exports.state = undefined;\n\t\n\tvar _vue = __webpack_require__(6);\n\t\n\tvar _vue2 = _interopRequireDefault(_vue);\n\t\n\tvar _vuex = __webpack_require__(42);\n\t\n\tvar _vuex2 = _interopRequireDefault(_vuex);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t_vue2.default.use(_vuex2.default);\n\t\n\tvar state = exports.state = {\n\t  status: null,\n\t  isDragging: null,\n\t  isMirror: false,\n\t  preventEvent: null\n\t};\n\t\n\tvar mutations = exports.mutations = {\n\t  CHANGE_STATUS: function CHANGE_STATUS(state, status) {\n\t    state.status = status;\n\t  },\n\t  CHANG_DRAGGING: function CHANG_DRAGGING(state, isDragging) {\n\t    state.isDragging = isDragging;\n\t  },\n\t  CHANGE_PREVENT_EVENT: function CHANGE_PREVENT_EVENT(state, preventEvent) {\n\t    state.preventEvent = preventEvent;\n\t  },\n\t  CHANGE_MIRROR: function CHANGE_MIRROR(state, isMirror) {\n\t    state.isMirror = isMirror;\n\t  }\n\t};\n\t\n\tvar actions = exports.actions = {\n\t  changeStatus: function changeStatus(_ref, status) {\n\t    var state = _ref.state,\n\t        commit = _ref.commit,\n\t        dispatch = _ref.dispatch;\n\t\n\t    commit('CHANGE_STATUS', status);\n\t    return status;\n\t  },\n\t  changeDragging: function changeDragging(_ref2, isDragging) {\n\t    var state = _ref2.state,\n\t        commit = _ref2.commit,\n\t        dispatch = _ref2.dispatch;\n\t\n\t    commit('CHANG_DRAGGING', isDragging);\n\t    return isDragging;\n\t  },\n\t  changePreventEvent: function changePreventEvent(_ref3, preventEvent) {\n\t    var state = _ref3.state,\n\t        commit = _ref3.commit,\n\t        dispatch = _ref3.dispatch;\n\t\n\t    commit('CHANGE_PREVENT_EVENT', preventEvent);\n\t    return preventEvent;\n\t  },\n\t  changeMirror: function changeMirror(_ref4, isMirror) {\n\t    var state = _ref4.state,\n\t        commit = _ref4.commit,\n\t        dispatch = _ref4.dispatch;\n\t\n\t    commit('CHANGE_MIRROR', isMirror);\n\t    return isMirror;\n\t  }\n\t};\n\t\n\texports.default = new _vuex2.default.Store({\n\t  state: state,\n\t  mutations: mutations,\n\t  actions: actions\n\t});\n\n/***/ }),\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\t\n\t/*!\n\t* EaselJS\n\t* Visit http://createjs.com/ for documentation, updates and examples.\n\t*\n\t* Copyright (c) 2010 gskinner.com, inc.\n\t*\n\t* Permission is hereby granted, free of charge, to any person\n\t* obtaining a copy of this software and associated documentation\n\t* files (the \"Software\"), to deal in the Software without\n\t* restriction, including without limitation the rights to use,\n\t* copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t* copies of the Software, and to permit persons to whom the\n\t* Software is furnished to do so, subject to the following\n\t* conditions:\n\t*\n\t* The above copyright notice and this permission notice shall be\n\t* included in all copies or substantial portions of the Software.\n\t*\n\t* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\t* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\t* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\t* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\t* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\t* OTHER DEALINGS IN THE SOFTWARE.\n\t*/\n\t\n\t\n\t//##############################################################################\n\t// extend.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t/**\n\t * @class Utility Methods\n\t */\n\t\n\t/**\n\t * Sets up the prototype chain and constructor property for a new class.\n\t *\n\t * This should be called right after creating the class constructor.\n\t *\n\t * \tfunction MySubClass() {}\n\t * \tcreatejs.extend(MySubClass, MySuperClass);\n\t * \tMySubClass.prototype.doSomething = function() { }\n\t *\n\t * \tvar foo = new MySubClass();\n\t * \tconsole.log(foo instanceof MySuperClass); // true\n\t * \tconsole.log(foo.prototype.constructor === MySubClass); // true\n\t *\n\t * @method extend\n\t * @param {Function} subclass The subclass.\n\t * @param {Function} superclass The superclass to extend.\n\t * @return {Function} Returns the subclass's new prototype.\n\t */\n\tcreatejs.extend = function(subclass, superclass) {\n\t\t\"use strict\";\n\t\n\t\tfunction o() { this.constructor = subclass; }\n\t\to.prototype = superclass.prototype;\n\t\treturn (subclass.prototype = new o());\n\t};\n\t\n\t//##############################################################################\n\t// promote.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t/**\n\t * @class Utility Methods\n\t */\n\t\n\t/**\n\t * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\n\t * It is recommended to use the super class's name as the prefix.\n\t * An alias to the super class's constructor is always added in the format `prefix_constructor`.\n\t * This allows the subclass to call super class methods without using `function.call`, providing better performance.\n\t *\n\t * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\n\t * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\n\t * prototype of `MySubClass` as `MySuperClass_draw`.\n\t *\n\t * This should be called after the class's prototype is fully defined.\n\t *\n\t * \tfunction ClassA(name) {\n\t * \t\tthis.name = name;\n\t * \t}\n\t * \tClassA.prototype.greet = function() {\n\t * \t\treturn \"Hello \"+this.name;\n\t * \t}\n\t *\n\t * \tfunction ClassB(name, punctuation) {\n\t * \t\tthis.ClassA_constructor(name);\n\t * \t\tthis.punctuation = punctuation;\n\t * \t}\n\t * \tcreatejs.extend(ClassB, ClassA);\n\t * \tClassB.prototype.greet = function() {\n\t * \t\treturn this.ClassA_greet()+this.punctuation;\n\t * \t}\n\t * \tcreatejs.promote(ClassB, \"ClassA\");\n\t *\n\t * \tvar foo = new ClassB(\"World\", \"!?!\");\n\t * \tconsole.log(foo.greet()); // Hello World!?!\n\t *\n\t * @method promote\n\t * @param {Function} subclass The class to promote super class methods on.\n\t * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.\n\t * @return {Function} Returns the subclass.\n\t */\n\tcreatejs.promote = function(subclass, prefix) {\n\t\t\"use strict\";\n\t\n\t\tvar subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;\n\t\tif (supP) {\n\t\t\tsubP[(prefix+=\"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\t\t\tfor (var n in supP) {\n\t\t\t\tif (subP.hasOwnProperty(n) && (typeof supP[n] == \"function\")) { subP[prefix + n] = supP[n]; }\n\t\t\t}\n\t\t}\n\t\treturn subclass;\n\t};\n\t\n\t//##############################################################################\n\t// indexOf.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t/**\n\t * @class Utility Methods\n\t */\n\t\n\t/**\n\t * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\n\t * that value.  Returns -1 if value is not found.\n\t *\n\t *      var i = createjs.indexOf(myArray, myElementToFind);\n\t *\n\t * @method indexOf\n\t * @param {Array} array Array to search for searchElement\n\t * @param searchElement Element to find in array.\n\t * @return {Number} The first index of searchElement in array.\n\t */\n\tcreatejs.indexOf = function (array, searchElement){\n\t\t\"use strict\";\n\t\n\t\tfor (var i = 0,l=array.length; i < l; i++) {\n\t\t\tif (searchElement === array[i]) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\t\n\t//##############################################################################\n\t// Event.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t// constructor:\n\t\t/**\n\t\t * Contains properties and methods shared by all events for use with\n\t\t * {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\t\t * \n\t\t * Note that Event objects are often reused, so you should never\n\t\t * rely on an event object's state outside of the call stack it was received in.\n\t\t * @class Event\n\t\t * @param {String} type The event type.\n\t\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t\t * @constructor\n\t\t **/\n\t\tfunction Event(type, bubbles, cancelable) {\n\t\t\t\n\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The type of event.\n\t\t\t * @property type\n\t\t\t * @type String\n\t\t\t **/\n\t\t\tthis.type = type;\n\t\t\n\t\t\t/**\n\t\t\t * The object that generated an event.\n\t\t\t * @property target\n\t\t\t * @type Object\n\t\t\t * @default null\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.target = null;\n\t\t\n\t\t\t/**\n\t\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t\t * @property currentTarget\n\t\t\t * @type Object\n\t\t\t * @default null\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.currentTarget = null;\n\t\t\n\t\t\t/**\n\t\t\t * For bubbling events, this indicates the current event phase:<OL>\n\t\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t\t * </OL>\n\t\t\t * @property eventPhase\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.eventPhase = 0;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether the event will bubble through the display list.\n\t\t\t * @property bubbles\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.bubbles = !!bubbles;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether the default behaviour of this event can be cancelled via\n\t\t\t * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n\t\t\t * @property cancelable\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.cancelable = !!cancelable;\n\t\t\n\t\t\t/**\n\t\t\t * The epoch time at which this event was created.\n\t\t\t * @property timeStamp\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.timeStamp = (new Date()).getTime();\n\t\t\n\t\t\t/**\n\t\t\t * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n\t\t\t * on this event.\n\t\t\t * @property defaultPrevented\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.defaultPrevented = false;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n\t\t\t * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n\t\t\t * @property propagationStopped\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.propagationStopped = false;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n\t\t\t * on this event.\n\t\t\t * @property immediatePropagationStopped\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.immediatePropagationStopped = false;\n\t\t\t\n\t\t\t/**\n\t\t\t * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n\t\t\t * @property removed\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t * @readonly\n\t\t\t*/\n\t\t\tthis.removed = false;\n\t\t}\n\t\tvar p = Event.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t// public methods:\n\t\t/**\n\t\t * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\n\t\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t\t * cancel the default behaviour associated with the event.\n\t\t * @method preventDefault\n\t\t **/\n\t\tp.preventDefault = function() {\n\t\t\tthis.defaultPrevented = this.cancelable&&true;\n\t\t};\n\t\n\t\t/**\n\t\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n\t\t * Mirrors the DOM event standard.\n\t\t * @method stopPropagation\n\t\t **/\n\t\tp.stopPropagation = function() {\n\t\t\tthis.propagationStopped = true;\n\t\t};\n\t\n\t\t/**\n\t\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n\t\t * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n\t\t * Mirrors the DOM event standard.\n\t\t * @method stopImmediatePropagation\n\t\t **/\n\t\tp.stopImmediatePropagation = function() {\n\t\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Causes the active listener to be removed via removeEventListener();\n\t\t * \n\t\t * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t\t * \t\t\t// do stuff...\n\t\t * \t\t\tevt.remove(); // removes this listener.\n\t\t * \t\t});\n\t\t * \n\t\t * @method remove\n\t\t **/\n\t\tp.remove = function() {\n\t\t\tthis.removed = true;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a clone of the Event instance.\n\t\t * @method clone\n\t\t * @return {Event} a clone of the Event instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new Event(this.type, this.bubbles, this.cancelable);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t\t *\n\t\t * @method set\n\t\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t\t * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t*/\n\t\tp.set = function(props) {\n\t\t\tfor (var n in props) { this[n] = props[n]; }\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Event (type=\"+this.type+\")]\";\n\t\t};\n\t\n\t\tcreatejs.Event = Event;\n\t}());\n\t\n\t//##############################################################################\n\t// EventDispatcher.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n\t\t *\n\t\t * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\n\t\t * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n\t\t * \n\t\t * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\n\t\t * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\n\t\t * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n\t\t * \n\t\t * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\n\t\t * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \n\t\t * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\n\t\t * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\n\t\t * \n\t\t * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\n\t\t * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also \n\t\t * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * Add EventDispatcher capabilities to the \"MyClass\" class.\n\t\t *\n\t\t *      EventDispatcher.initialize(MyClass.prototype);\n\t\t *\n\t\t * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n\t\t *\n\t\t *      instance.addEventListener(\"eventName\", handlerMethod);\n\t\t *      function handlerMethod(event) {\n\t\t *          console.log(event.target + \" Was Clicked\");\n\t\t *      }\n\t\t *\n\t\t * <b>Maintaining proper scope</b><br />\n\t\t * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\n\t\t * method to subscribe to events simplifies this.\n\t\t *\n\t\t *      instance.addEventListener(\"click\", function(event) {\n\t\t *          console.log(instance == this); // false, scope is ambiguous.\n\t\t *      });\n\t\t *      \n\t\t *      instance.on(\"click\", function(event) {\n\t\t *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\n\t\t *      });\n\t\t * \n\t\t * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage\n\t\t * scope.\n\t\t *\n\t\t * <b>Browser support</b>\n\t\t * The event model in CreateJS can be used separately from the suite in any project, however the inheritance model\n\t\t * requires modern browsers (IE9+).\n\t\t *      \n\t\t *\n\t\t * @class EventDispatcher\n\t\t * @constructor\n\t\t **/\n\t\tfunction EventDispatcher() {\n\t\t\n\t\t\n\t\t// private properties:\n\t\t\t/**\n\t\t\t * @protected\n\t\t\t * @property _listeners\n\t\t\t * @type Object\n\t\t\t **/\n\t\t\tthis._listeners = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * @protected\n\t\t\t * @property _captureListeners\n\t\t\t * @type Object\n\t\t\t **/\n\t\t\tthis._captureListeners = null;\n\t\t}\n\t\tvar p = EventDispatcher.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// static public methods:\n\t\t/**\n\t\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\n\t\t * \n\t\t * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t\t * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\n\t\t * \n\t\t * @method initialize\n\t\t * @static\n\t\t * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\n\t\t * prototype.\n\t\t **/\n\t\tEventDispatcher.initialize = function(target) {\n\t\t\ttarget.addEventListener = p.addEventListener;\n\t\t\ttarget.on = p.on;\n\t\t\ttarget.removeEventListener = target.off =  p.removeEventListener;\n\t\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\n\t\t\ttarget.hasEventListener = p.hasEventListener;\n\t\t\ttarget.dispatchEvent = p.dispatchEvent;\n\t\t\ttarget._dispatchEvent = p._dispatchEvent;\n\t\t\ttarget.willTrigger = p.willTrigger;\n\t\t};\n\t\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\n\t\t * multiple callbacks getting fired.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      displayObject.addEventListener(\"click\", handleClick);\n\t\t *      function handleClick(event) {\n\t\t *         // Click happened.\n\t\t *      }\n\t\t *\n\t\t * @method addEventListener\n\t\t * @param {String} type The string type of the event.\n\t\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n\t\t * the event is dispatched.\n\t\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t\t * @return {Function | Object} Returns the listener for chaining or assignment.\n\t\t **/\n\t\tp.addEventListener = function(type, listener, useCapture) {\n\t\t\tvar listeners;\n\t\t\tif (useCapture) {\n\t\t\t\tlisteners = this._captureListeners = this._captureListeners||{};\n\t\t\t} else {\n\t\t\t\tlisteners = this._listeners = this._listeners||{};\n\t\t\t}\n\t\t\tvar arr = listeners[type];\n\t\t\tif (arr) { this.removeEventListener(type, listener, useCapture); }\n\t\t\tarr = listeners[type]; // remove may have deleted the array\n\t\t\tif (!arr) { listeners[type] = [listener];  }\n\t\t\telse { arr.push(listener); }\n\t\t\treturn listener;\n\t\t};\n\t\t\n\t\t/**\n\t\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\n\t\t * only run once, associate arbitrary data with the listener, and remove the listener.\n\t\t * \n\t\t * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\n\t\t * The wrapper function is returned for use with `removeEventListener` (or `off`).\n\t\t * \n\t\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n\t\t * {{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\n\t\t * to `on` with the same params will create multiple listeners.\n\t\t * \n\t\t * <h4>Example</h4>\n\t\t * \n\t\t * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\n\t\t * \t\tfunction handleClick(evt, data) {\n\t\t * \t\t\tdata.count -= 1;\n\t\t * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\n\t\t * \t\t\tif (data.count == 0) {\n\t\t * \t\t\t\talert(\"clicked 3 times!\");\n\t\t * \t\t\t\tmyBtn.off(\"click\", listener);\n\t\t * \t\t\t\t// alternately: evt.remove();\n\t\t * \t\t\t}\n\t\t * \t\t}\n\t\t * \n\t\t * @method on\n\t\t * @param {String} type The string type of the event.\n\t\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n\t\t * the event is dispatched.\n\t\t * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\n\t\t * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\n\t\t * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\n\t\t * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\n\t\t **/\n\t\tp.on = function(type, listener, scope, once, data, useCapture) {\n\t\t\tif (listener.handleEvent) {\n\t\t\t\tscope = scope||listener;\n\t\t\t\tlistener = listener.handleEvent;\n\t\t\t}\n\t\t\tscope = scope||this;\n\t\t\treturn this.addEventListener(type, function(evt) {\n\t\t\t\t\tlistener.call(scope, evt, data);\n\t\t\t\t\tonce&&evt.remove();\n\t\t\t\t}, useCapture);\n\t\t};\n\t\n\t\t/**\n\t\t * Removes the specified event listener.\n\t\t *\n\t\t * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\n\t\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\n\t\t * closure will not work.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      displayObject.removeEventListener(\"click\", handleClick);\n\t\t *\n\t\t * @method removeEventListener\n\t\t * @param {String} type The string type of the event.\n\t\t * @param {Function | Object} listener The listener function or object.\n\t\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t\t **/\n\t\tp.removeEventListener = function(type, listener, useCapture) {\n\t\t\tvar listeners = useCapture ? this._captureListeners : this._listeners;\n\t\t\tif (!listeners) { return; }\n\t\t\tvar arr = listeners[type];\n\t\t\tif (!arr) { return; }\n\t\t\tfor (var i=0,l=arr.length; i<l; i++) {\n\t\t\t\tif (arr[i] == listener) {\n\t\t\t\t\tif (l==1) { delete(listeners[type]); } // allows for faster checks.\n\t\t\t\t\telse { arr.splice(i,1); }\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t/**\n\t\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n\t\t * .on method.\n\t\t * \n\t\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \n\t\t * {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.\n\t\t *\n\t\t * @method off\n\t\t * @param {String} type The string type of the event.\n\t\t * @param {Function | Object} listener The listener function or object.\n\t\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t\t **/\n\t\tp.off = p.removeEventListener;\n\t\n\t\t/**\n\t\t * Removes all listeners for the specified type, or all listeners of all types.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      // Remove all listeners\n\t\t *      displayObject.removeAllEventListeners();\n\t\t *\n\t\t *      // Remove all click listeners\n\t\t *      displayObject.removeAllEventListeners(\"click\");\n\t\t *\n\t\t * @method removeAllEventListeners\n\t\t * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\n\t\t **/\n\t\tp.removeAllEventListeners = function(type) {\n\t\t\tif (!type) { this._listeners = this._captureListeners = null; }\n\t\t\telse {\n\t\t\t\tif (this._listeners) { delete(this._listeners[type]); }\n\t\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Dispatches the specified event to all listeners.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      // Use a string event\n\t\t *      this.dispatchEvent(\"complete\");\n\t\t *\n\t\t *      // Use an Event instance\n\t\t *      var event = new createjs.Event(\"progress\");\n\t\t *      this.dispatchEvent(event);\n\t\t *\n\t\t * @method dispatchEvent\n\t\t * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\n\t\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\n\t\t * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\n\t\t * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\n\t\t * @param {Boolean} [bubbles] Specifies the `bubbles` value when a string was passed to eventObj.\n\t\t * @param {Boolean} [cancelable] Specifies the `cancelable` value when a string was passed to eventObj.\n\t\t * @return {Boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\n\t\t **/\n\t\tp.dispatchEvent = function(eventObj, bubbles, cancelable) {\n\t\t\tif (typeof eventObj == \"string\") {\n\t\t\t\t// skip everything if there's no listeners and it doesn't bubble:\n\t\t\t\tvar listeners = this._listeners;\n\t\t\t\tif (!bubbles && (!listeners || !listeners[eventObj])) { return true; }\n\t\t\t\teventObj = new createjs.Event(eventObj, bubbles, cancelable);\n\t\t\t} else if (eventObj.target && eventObj.clone) {\n\t\t\t\t// redispatching an active event object, so clone it:\n\t\t\t\teventObj = eventObj.clone();\n\t\t\t}\n\t\t\t\n\t\t\t// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\n\t\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\n\t\n\t\t\tif (!eventObj.bubbles || !this.parent) {\n\t\t\t\tthis._dispatchEvent(eventObj, 2);\n\t\t\t} else {\n\t\t\t\tvar top=this, list=[top];\n\t\t\t\twhile (top.parent) { list.push(top = top.parent); }\n\t\t\t\tvar i, l=list.length;\n\t\n\t\t\t\t// capture & atTarget\n\t\t\t\tfor (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {\n\t\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\n\t\t\t\t}\n\t\t\t\t// bubbling\n\t\t\t\tfor (i=1; i<l && !eventObj.propagationStopped; i++) {\n\t\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !eventObj.defaultPrevented;\n\t\t};\n\t\n\t\t/**\n\t\t * Indicates whether there is at least one listener for the specified event type.\n\t\t * @method hasEventListener\n\t\t * @param {String} type The string type of the event.\n\t\t * @return {Boolean} Returns true if there is at least one listener for the specified event.\n\t\t **/\n\t\tp.hasEventListener = function(type) {\n\t\t\tvar listeners = this._listeners, captureListeners = this._captureListeners;\n\t\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\n\t\t};\n\t\t\n\t\t/**\n\t\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\n\t\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\n\t\t * specified type is dispatched from this object, it will trigger at least one listener.\n\t\t * \n\t\t * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\n\t\t * event flow for a listener, not just this object.\n\t\t * @method willTrigger\n\t\t * @param {String} type The string type of the event.\n\t\t * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\n\t\t **/\n\t\tp.willTrigger = function(type) {\n\t\t\tvar o = this;\n\t\t\twhile (o) {\n\t\t\t\tif (o.hasEventListener(type)) { return true; }\n\t\t\t\to = o.parent;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\n\t\t/**\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[EventDispatcher]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _dispatchEvent\n\t\t * @param {Object | String | Event} eventObj\n\t\t * @param {Object} eventPhase\n\t\t * @protected\n\t\t **/\n\t\tp._dispatchEvent = function(eventObj, eventPhase) {\n\t\t\tvar l, listeners = (eventPhase==1) ? this._captureListeners : this._listeners;\n\t\t\tif (eventObj && listeners) {\n\t\t\t\tvar arr = listeners[eventObj.type];\n\t\t\t\tif (!arr||!(l=arr.length)) { return; }\n\t\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\n\t\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\n\t\t\t\teventObj.removed = false;\n\t\t\t\t\n\t\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\n\t\t\t\tfor (var i=0; i<l && !eventObj.immediatePropagationStopped; i++) {\n\t\t\t\t\tvar o = arr[i];\n\t\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\n\t\t\t\t\telse { o(eventObj); }\n\t\t\t\t\tif (eventObj.removed) {\n\t\t\t\t\t\tthis.off(eventObj.type, o, eventPhase==1);\n\t\t\t\t\t\teventObj.removed = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\n\t\tcreatejs.EventDispatcher = EventDispatcher;\n\t}());\n\t\n\t//##############################################################################\n\t// Ticker.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n\t\t * event to be notified when a set time interval has elapsed.\n\t\t *\n\t\t * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n\t\t * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n\t\t * can not be instantiated.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t\t *      function handleTick(event) {\n\t\t *          // Actions carried out each tick (aka frame)\n\t\t *          if (!event.paused) {\n\t\t *              // Actions carried out when the Ticker is not paused.\n\t\t *          }\n\t\t *      }\n\t\t *\n\t\t * @class Ticker\n\t\t * @uses EventDispatcher\n\t\t * @static\n\t\t **/\n\t\tfunction Ticker() {\n\t\t\tthrow \"Ticker cannot be instantiated.\";\n\t\t}\n\t\n\t\n\t// constants:\n\t\t/**\n\t\t * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n\t\t * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n\t\t * dispatches the tick when the time is within a certain threshold.\n\t\t *\n\t\t * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n\t\t * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n\t\t * gaining the benefits of that API (screen synch, background throttling).\n\t\t *\n\t\t * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n\t\t * framerates of 10, 12, 15, 20, and 30 work well.\n\t\t *\n\t\t * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t\t * supported.\n\t\t * @property RAF_SYNCHED\n\t\t * @static\n\t\t * @type {String}\n\t\t * @default \"synched\"\n\t\t * @readonly\n\t\t **/\n\t\tTicker.RAF_SYNCHED = \"synched\";\n\t\n\t\t/**\n\t\t * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n\t\t * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n\t\t * You can leverage {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} and the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t\t * event object's \"delta\" properties to make this easier.\n\t\t *\n\t\t * Falls back on {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t\t * supported.\n\t\t * @property RAF\n\t\t * @static\n\t\t * @type {String}\n\t\t * @default \"raf\"\n\t\t * @readonly\n\t\t **/\n\t\tTicker.RAF = \"raf\";\n\t\n\t\t/**\n\t\t * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n\t\t * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n\t\t * @property TIMEOUT\n\t\t * @static\n\t\t * @type {String}\n\t\t * @default \"timeout\"\n\t\t * @readonly\n\t\t **/\n\t\tTicker.TIMEOUT = \"timeout\";\n\t\n\t\n\t// static events:\n\t\t/**\n\t\t * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n\t\t * {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t\t *      function handleTick(event) {\n\t\t *          console.log(\"Paused:\", event.paused, event.delta);\n\t\t *      }\n\t\t *\n\t\t * @event tick\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @param {Boolean} paused Indicates whether the ticker is currently paused.\n\t\t * @param {Number} delta The time elapsed in ms since the last tick.\n\t\t * @param {Number} time The total time in ms since Ticker was initialized.\n\t\t * @param {Number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n\t\t * \tyou could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\n\t// public static properties:\n\t\t/**\n\t\t * Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}, and will be removed in a future version. If true, timingMode will\n\t\t * use {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} by default.\n\t\t * @deprecated Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}.\n\t\t * @property useRAF\n\t\t * @static\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tTicker.useRAF = false;\n\t\n\t\t/**\n\t\t * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See\n\t\t * {{#crossLink \"Ticker/TIMEOUT\"}}{{/crossLink}}, {{#crossLink \"Ticker/RAF\"}}{{/crossLink}}, and\n\t\t * {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} for mode details.\n\t\t * @property timingMode\n\t\t * @static\n\t\t * @type {String}\n\t\t * @default Ticker.TIMEOUT\n\t\t **/\n\t\tTicker.timingMode = null;\n\t\n\t\t/**\n\t\t * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n\t\t * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n\t\t * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n\t\t * (ex. maxDelta=50 when running at 40fps).\n\t\t * \n\t\t * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n\t\t * when using both delta and other values.\n\t\t * \n\t\t * If 0, there is no maximum.\n\t\t * @property maxDelta\n\t\t * @static\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tTicker.maxDelta = 0;\n\t\t\n\t\t/**\n\t\t * When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property\n\t\t * of the event will be `true`. Also, while paused the `runTime` will not increase. See {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}},\n\t\t * {{#crossLink \"Ticker/getTime\"}}{{/crossLink}}, and {{#crossLink \"Ticker/getEventTime\"}}{{/crossLink}} for more\n\t\t * info.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t\t *      createjs.Ticker.paused = true;\n\t\t *      function handleTick(event) {\n\t\t *          console.log(event.paused,\n\t\t *          \tcreatejs.Ticker.getTime(false),\n\t\t *          \tcreatejs.Ticker.getTime(true));\n\t\t *      }\n\t\t *\n\t\t * @property paused\n\t\t * @static\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tTicker.paused = false;\n\t\n\t\n\t// mix-ins:\n\t\t// EventDispatcher methods:\n\t\tTicker.removeEventListener = null;\n\t\tTicker.removeAllEventListeners = null;\n\t\tTicker.dispatchEvent = null;\n\t\tTicker.hasEventListener = null;\n\t\tTicker._listeners = null;\n\t\tcreatejs.EventDispatcher.initialize(Ticker); // inject EventDispatcher methods.\n\t\tTicker._addEventListener = Ticker.addEventListener;\n\t\tTicker.addEventListener = function() {\n\t\t\t!Ticker._inited&&Ticker.init();\n\t\t\treturn Ticker._addEventListener.apply(Ticker, arguments);\n\t\t};\n\t\n\t\n\t// private static properties:\n\t\t/**\n\t\t * @property _inited\n\t\t * @static\n\t\t * @type {Boolean}\n\t\t * @protected\n\t\t **/\n\t\tTicker._inited = false;\n\t\n\t\t/**\n\t\t * @property _startTime\n\t\t * @static\n\t\t * @type {Number}\n\t\t * @protected\n\t\t **/\n\t\tTicker._startTime = 0;\n\t\n\t\t/**\n\t\t * @property _pausedTime\n\t\t * @static\n\t\t * @type {Number}\n\t\t * @protected\n\t\t **/\n\t\tTicker._pausedTime=0;\n\t\n\t\t/**\n\t\t * The number of ticks that have passed\n\t\t * @property _ticks\n\t\t * @static\n\t\t * @type {Number}\n\t\t * @protected\n\t\t **/\n\t\tTicker._ticks = 0;\n\t\n\t\t/**\n\t\t * The number of ticks that have passed while Ticker has been paused\n\t\t * @property _pausedTicks\n\t\t * @static\n\t\t * @type {Number}\n\t\t * @protected\n\t\t **/\n\t\tTicker._pausedTicks = 0;\n\t\n\t\t/**\n\t\t * @property _interval\n\t\t * @static\n\t\t * @type {Number}\n\t\t * @protected\n\t\t **/\n\t\tTicker._interval = 50;\n\t\n\t\t/**\n\t\t * @property _lastTime\n\t\t * @static\n\t\t * @type {Number}\n\t\t * @protected\n\t\t **/\n\t\tTicker._lastTime = 0;\n\t\n\t\t/**\n\t\t * @property _times\n\t\t * @static\n\t\t * @type {Array}\n\t\t * @protected\n\t\t **/\n\t\tTicker._times = null;\n\t\n\t\t/**\n\t\t * @property _tickTimes\n\t\t * @static\n\t\t * @type {Array}\n\t\t * @protected\n\t\t **/\n\t\tTicker._tickTimes = null;\n\t\n\t\t/**\n\t\t * Stores the timeout or requestAnimationFrame id.\n\t\t * @property _timerId\n\t\t * @static\n\t\t * @type {Number}\n\t\t * @protected\n\t\t **/\n\t\tTicker._timerId = null;\n\t\t\n\t\t/**\n\t\t * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n\t\t * if that property changed and a tick hasn't fired.\n\t\t * @property _raf\n\t\t * @static\n\t\t * @type {Boolean}\n\t\t * @protected\n\t\t **/\n\t\tTicker._raf = true;\n\t\t\n\t\n\t// static getter / setters:\n\t\t/**\n\t\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t\t * @method setInterval\n\t\t * @static\n\t\t * @param {Number} interval\n\t\t * @deprecated\n\t\t **/\n\t\tTicker.setInterval = function(interval) {\n\t\t\tTicker._interval = interval;\n\t\t\tif (!Ticker._inited) { return; }\n\t\t\tTicker._setupTick();\n\t\t};\n\t\n\t\t/**\n\t\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t\t * @method getInterval\n\t\t * @static\n\t\t * @return {Number}\n\t\t * @deprecated\n\t\t **/\n\t\tTicker.getInterval = function() {\n\t\t\treturn Ticker._interval;\n\t\t};\n\t\n\t\t/**\n\t\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t\t * @method setFPS\n\t\t * @static\n\t\t * @param {Number} value\n\t\t * @deprecated\n\t\t **/\n\t\tTicker.setFPS = function(value) {\n\t\t\tTicker.setInterval(1000/value);\n\t\t};\n\t\n\t\t/**\n\t\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t\t * @method getFPS\n\t\t * @static\n\t\t * @return {Number}\n\t\t * @deprecated\n\t\t **/\n\t\tTicker.getFPS = function() {\n\t\t\treturn 1000/Ticker._interval;\n\t\t};\n\t\n\t\t/**\n\t\t * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\t\t * Note that actual time between ticks may be more than specified depending on CPU load.\n\t\t * This property is ignored if the ticker is using the `RAF` timing mode.\n\t\t * @property interval\n\t\t * @static\n\t\t * @type {Number}\n\t\t **/\n\t\t \n\t\t/**\n\t\t * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n\t\t * `framerate == 1000/interval`.\n\t\t * @property framerate\n\t\t * @static\n\t\t * @type {Number}\n\t\t **/\n\t\ttry {\n\t\t\tObject.defineProperties(Ticker, {\n\t\t\t\tinterval: { get: Ticker.getInterval, set: Ticker.setInterval },\n\t\t\t\tframerate: { get: Ticker.getFPS, set: Ticker.setFPS }\n\t\t\t});\n\t\t} catch (e) { console.log(e); }\n\t\n\t\n\t// public static methods:\n\t\t/**\n\t\t * Starts the tick. This is called automatically when the first listener is added.\n\t\t * @method init\n\t\t * @static\n\t\t **/\n\t\tTicker.init = function() {\n\t\t\tif (Ticker._inited) { return; }\n\t\t\tTicker._inited = true;\n\t\t\tTicker._times = [];\n\t\t\tTicker._tickTimes = [];\n\t\t\tTicker._startTime = Ticker._getTime();\n\t\t\tTicker._times.push(Ticker._lastTime = 0);\n\t\t\tTicker.interval = Ticker._interval;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n\t\t * @method reset\n\t\t * @static\n\t\t **/\n\t\tTicker.reset = function() {\n\t\t\tif (Ticker._raf) {\n\t\t\t\tvar f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n\t\t\t\tf&&f(Ticker._timerId);\n\t\t\t} else {\n\t\t\t\tclearTimeout(Ticker._timerId);\n\t\t\t}\n\t\t\tTicker.removeAllEventListeners(\"tick\");\n\t\t\tTicker._timerId = Ticker._times = Ticker._tickTimes = null;\n\t\t\tTicker._startTime = Ticker._lastTime = Ticker._ticks = 0;\n\t\t\tTicker._inited = false;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n\t\t * because it only measures the time spent within the tick execution stack. \n\t\t * \n\t\t * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between \n\t\t * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that \n\t\t * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\t\t *\n\t\t * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n\t\t * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n\t\t * other than the tick is using ~80ms (another script, DOM rendering, etc).\n\t\t * @method getMeasuredTickTime\n\t\t * @static\n\t\t * @param {Number} [ticks] The number of previous ticks over which to measure the average time spent in a tick.\n\t\t * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n\t\t * @return {Number} The average time spent in a tick in milliseconds.\n\t\t **/\n\t\tTicker.getMeasuredTickTime = function(ticks) {\n\t\t\tvar ttl=0, times=Ticker._tickTimes;\n\t\t\tif (!times || times.length < 1) { return -1; }\n\t\n\t\t\t// by default, calculate average for the past ~1 second:\n\t\t\tticks = Math.min(times.length, ticks||(Ticker.getFPS()|0));\n\t\t\tfor (var i=0; i<ticks; i++) { ttl += times[i]; }\n\t\t\treturn ttl/ticks;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the actual frames / ticks per second.\n\t\t * @method getMeasuredFPS\n\t\t * @static\n\t\t * @param {Number} [ticks] The number of previous ticks over which to measure the actual frames / ticks per second.\n\t\t * Defaults to the number of ticks per second.\n\t\t * @return {Number} The actual frames / ticks per second. Depending on performance, this may differ\n\t\t * from the target frames per second.\n\t\t **/\n\t\tTicker.getMeasuredFPS = function(ticks) {\n\t\t\tvar times = Ticker._times;\n\t\t\tif (!times || times.length < 2) { return -1; }\n\t\n\t\t\t// by default, calculate fps for the past ~1 second:\n\t\t\tticks = Math.min(times.length-1, ticks||(Ticker.getFPS()|0));\n\t\t\treturn 1000/((times[0]-times[ticks])/ticks);\n\t\t};\n\t\n\t\t/**\n\t\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t\t * @method setPaused\n\t\t * @static\n\t\t * @param {Boolean} value\n\t\t * @deprecated\n\t\t **/\n\t\tTicker.setPaused = function(value) {\n\t\t\t// TODO: deprecated.\n\t\t\tTicker.paused = value;\n\t\t};\n\t\n\t\t/**\n\t\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t\t * @method getPaused\n\t\t * @static\n\t\t * @return {Boolean}\n\t\t * @deprecated\n\t\t **/\n\t\tTicker.getPaused = function() {\n\t\t\t// TODO: deprecated.\n\t\t\treturn Ticker.paused;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the number of milliseconds that have elapsed since Ticker was initialized via {{#crossLink \"Ticker/init\"}}.\n\t\t * Returns -1 if Ticker has not been initialized. For example, you could use\n\t\t * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n\t\t * @method getTime\n\t\t * @static\n\t\t * @param {Boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n\t\t * If false, the value returned will be total time elapsed since the first tick event listener was added.\n\t\t * @return {Number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n\t\t **/\n\t\tTicker.getTime = function(runTime) {\n\t\t\treturn Ticker._startTime ? Ticker._getTime() - (runTime ? Ticker._pausedTime : 0) : -1;\n\t\t};\n\t\n\t\t/**\n\t\t * Similar to the {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} method, but returns the time on the most recent {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t\t * event object.\n\t\t * @method getEventTime\n\t\t * @static\n\t\t * @param runTime {Boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n\t\t * @returns {number} The time or runTime property from the most recent tick event or -1.\n\t\t */\n\t\tTicker.getEventTime = function(runTime) {\n\t\t\treturn Ticker._startTime ? (Ticker._lastTime || Ticker._startTime) - (runTime ? Ticker._pausedTime : 0) : -1;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns the number of ticks that have been broadcast by Ticker.\n\t\t * @method getTicks\n\t\t * @static\n\t\t * @param {Boolean} pauseable Indicates whether to include ticks that would have been broadcast\n\t\t * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n\t\t * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n\t\t * value. The default value is false.\n\t\t * @return {Number} of ticks that have been broadcast.\n\t\t **/\n\t\tTicker.getTicks = function(pauseable) {\n\t\t\treturn  Ticker._ticks - (pauseable ? Ticker._pausedTicks : 0);\n\t\t};\n\t\n\t\n\t// private static methods:\n\t\t/**\n\t\t * @method _handleSynch\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tTicker._handleSynch = function() {\n\t\t\tTicker._timerId = null;\n\t\t\tTicker._setupTick();\n\t\n\t\t\t// run if enough time has elapsed, with a little bit of flexibility to be early:\n\t\t\tif (Ticker._getTime() - Ticker._lastTime >= (Ticker._interval-1)*0.97) {\n\t\t\t\tTicker._tick();\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleRAF\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tTicker._handleRAF = function() {\n\t\t\tTicker._timerId = null;\n\t\t\tTicker._setupTick();\n\t\t\tTicker._tick();\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleTimeout\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tTicker._handleTimeout = function() {\n\t\t\tTicker._timerId = null;\n\t\t\tTicker._setupTick();\n\t\t\tTicker._tick();\n\t\t};\n\t\n\t\t/**\n\t\t * @method _setupTick\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tTicker._setupTick = function() {\n\t\t\tif (Ticker._timerId != null) { return; } // avoid duplicates\n\t\n\t\t\tvar mode = Ticker.timingMode||(Ticker.useRAF&&Ticker.RAF_SYNCHED);\n\t\t\tif (mode == Ticker.RAF_SYNCHED || mode == Ticker.RAF) {\n\t\t\t\tvar f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\t\tif (f) {\n\t\t\t\t\tTicker._timerId = f(mode == Ticker.RAF ? Ticker._handleRAF : Ticker._handleSynch);\n\t\t\t\t\tTicker._raf = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tTicker._raf = false;\n\t\t\tTicker._timerId = setTimeout(Ticker._handleTimeout, Ticker._interval);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _tick\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tTicker._tick = function() {\n\t\t\tvar paused = Ticker.paused;\n\t\t\tvar time = Ticker._getTime();\n\t\t\tvar elapsedTime = time-Ticker._lastTime;\n\t\t\tTicker._lastTime = time;\n\t\t\tTicker._ticks++;\n\t\t\t\n\t\t\tif (paused) {\n\t\t\t\tTicker._pausedTicks++;\n\t\t\t\tTicker._pausedTime += elapsedTime;\n\t\t\t}\n\t\t\t\n\t\t\tif (Ticker.hasEventListener(\"tick\")) {\n\t\t\t\tvar event = new createjs.Event(\"tick\");\n\t\t\t\tvar maxDelta = Ticker.maxDelta;\n\t\t\t\tevent.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;\n\t\t\t\tevent.paused = paused;\n\t\t\t\tevent.time = time;\n\t\t\t\tevent.runTime = time-Ticker._pausedTime;\n\t\t\t\tTicker.dispatchEvent(event);\n\t\t\t}\n\t\t\t\n\t\t\tTicker._tickTimes.unshift(Ticker._getTime()-time);\n\t\t\twhile (Ticker._tickTimes.length > 100) { Ticker._tickTimes.pop(); }\n\t\n\t\t\tTicker._times.unshift(time);\n\t\t\twhile (Ticker._times.length > 100) { Ticker._times.pop(); }\n\t\t};\n\t\n\t\t/**\n\t\t * @method _getTime\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tvar now = window.performance && (performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow);\n\t\tTicker._getTime = function() {\n\t\t\treturn ((now&&now.call(performance))||(new Date().getTime())) - Ticker._startTime;\n\t\t};\n\t\n\t\n\t\tcreatejs.Ticker = Ticker;\n\t}());\n\t\n\t//##############################################################################\n\t// UID.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)\n\t\t * and should not be instantiated.\n\t\t * @class UID\n\t\t * @static\n\t\t **/\n\t\tfunction UID() {\n\t\t\tthrow \"UID cannot be instantiated\";\n\t\t}\n\t\n\t\n\t// private static properties:\n\t\t/**\n\t\t * @property _nextID\n\t\t * @type Number\n\t\t * @protected\n\t\t **/\n\t\tUID._nextID = 0;\n\t\n\t\n\t// public static methods:\n\t\t/**\n\t\t * Returns the next unique id.\n\t\t * @method get\n\t\t * @return {Number} The next unique id\n\t\t * @static\n\t\t **/\n\t\tUID.get = function() {\n\t\t\treturn UID._nextID++;\n\t\t};\n\t\n\t\n\t\tcreatejs.UID = UID;\n\t}());\n\t\n\t//##############################################################################\n\t// MouseEvent.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,\n\t\t * see the {{#crossLink \"DisplayObject\"}}{{/crossLink}} and {{#crossLink \"Stage\"}}{{/crossLink}} event listings.\n\t\t * @class MouseEvent\n\t\t * @param {String} type The event type.\n\t\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t\t * @param {Number} stageX The normalized x position relative to the stage.\n\t\t * @param {Number} stageY The normalized y position relative to the stage.\n\t\t * @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.\n\t\t * @param {Number} pointerID The unique id for the pointer.\n\t\t * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.\n\t\t * @param {Number} rawX The raw x position relative to the stage.\n\t\t * @param {Number} rawY The raw y position relative to the stage.\n\t\t * @param {DisplayObject} relatedTarget The secondary target for the event.\n\t\t * @extends Event\n\t\t * @constructor\n\t\t **/\n\t\tfunction MouseEvent(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY, relatedTarget) {\n\t\t\tthis.Event_constructor(type, bubbles, cancelable);\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The normalized x position on the stage. This will always be within the range 0 to stage width.\n\t\t\t * @property stageX\n\t\t\t * @type Number\n\t\t\t*/\n\t\t\tthis.stageX = stageX;\n\t\t\n\t\t\t/**\n\t\t\t * The normalized y position on the stage. This will always be within the range 0 to stage height.\n\t\t\t * @property stageY\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.stageY = stageY;\n\t\t\n\t\t\t/**\n\t\t\t * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless\n\t\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t\t * @property rawX\n\t\t\t * @type Number\n\t\t\t*/\n\t\t\tthis.rawX = (rawX==null)?stageX:rawX;\n\t\t\n\t\t\t/**\n\t\t\t * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless\n\t\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t\t * @property rawY\n\t\t\t * @type Number\n\t\t\t*/\n\t\t\tthis.rawY = (rawY==null)?stageY:rawY;\n\t\t\n\t\t\t/**\n\t\t\t * The native MouseEvent generated by the browser. The properties and API for this\n\t\t\t * event may differ between browsers. This property will be null if the\n\t\t\t * EaselJS property was not directly generated from a native MouseEvent.\n\t\t\t * @property nativeEvent\n\t\t\t * @type HtmlMouseEvent\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.nativeEvent = nativeEvent;\n\t\t\n\t\t\t/**\n\t\t\t * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system\n\t\t\t * supplied id value.\n\t\t\t * @property pointerID\n\t\t\t * @type {Number}\n\t\t\t */\n\t\t\tthis.pointerID = pointerID;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.\n\t\t\t * For touch pointers, the first pointer in the current stack will be considered the primary pointer.\n\t\t\t * @property primary\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tthis.primary = !!primary;\n\t\t\t\n\t\t\t/**\n\t\t\t * The secondary target for the event, if applicable. This is used for mouseout/rollout\n\t\t\t * events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,\n\t\t\t * and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.\n\t\t\t * \n\t\t\t * Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).\n\t\t\t * @property relatedTarget\n\t\t\t * @type {DisplayObject}\n\t\t\t */\n\t\t\tthis.relatedTarget = relatedTarget;\n\t\t}\n\t\tvar p = createjs.extend(MouseEvent, createjs.Event);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\t\n\t\t\n\t// getter / setters:\n\t\t/**\n\t\t * Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n\t\t * @property localX\n\t\t * @type {Number}\n\t\t * @readonly\n\t\t */\n\t\tp._get_localX = function() {\n\t\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).x;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n\t\t * @property localY\n\t\t * @type {Number}\n\t\t * @readonly\n\t\t */\n\t\tp._get_localY = function() {\n\t\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).y;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Indicates whether the event was generated by a touch input (versus a mouse input).\n\t\t * @property isTouch\n\t\t * @type {Boolean}\n\t\t * @readonly\n\t\t */\n\t\tp._get_isTouch = function() {\n\t\t\treturn this.pointerID !== -1;\n\t\t};\n\t\t\n\t\t\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tlocalX: { get: p._get_localX },\n\t\t\t\tlocalY: { get: p._get_localY },\n\t\t\t\tisTouch: { get: p._get_isTouch }\n\t\t\t});\n\t\t} catch (e) {} // TODO: use Log\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns a clone of the MouseEvent instance.\n\t\t * @method clone\n\t\t * @return {MouseEvent} a clone of the MouseEvent instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[MouseEvent (type=\"+this.type+\" stageX=\"+this.stageX+\" stageY=\"+this.stageY+\")]\";\n\t\t};\n\t\n\t\n\t\tcreatejs.MouseEvent = createjs.promote(MouseEvent, \"Event\");\n\t}());\n\t\n\t//##############################################################################\n\t// Matrix2D.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n\t\t *\n\t\t * This matrix can be visualized as:\n\t\t *\n\t\t * \t[ a  c  tx\n\t\t * \t  b  d  ty\n\t\t * \t  0  0  1  ]\n\t\t *\n\t\t * Note the locations of b and c.\n\t\t *\n\t\t * @class Matrix2D\n\t\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t\t * @constructor\n\t\t **/\n\t\tfunction Matrix2D(a, b, c, d, tx, ty) {\n\t\t\tthis.setValues(a,b,c,d,tx,ty);\n\t\t\t\n\t\t// public properties:\n\t\t\t// assigned in the setValues method.\n\t\t\t/**\n\t\t\t * Position (0, 0) in a 3x3 affine transformation matrix.\n\t\t\t * @property a\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Position (0, 1) in a 3x3 affine transformation matrix.\n\t\t\t * @property b\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Position (1, 0) in a 3x3 affine transformation matrix.\n\t\t\t * @property c\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Position (1, 1) in a 3x3 affine transformation matrix.\n\t\t\t * @property d\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Position (2, 0) in a 3x3 affine transformation matrix.\n\t\t\t * @property tx\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Position (2, 1) in a 3x3 affine transformation matrix.\n\t\t\t * @property ty\n\t\t\t * @type Number\n\t\t\t **/\n\t\t}\n\t\tvar p = Matrix2D.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// constants:\n\t\t/**\n\t\t * Multiplier for converting degrees to radians. Used internally by Matrix2D.\n\t\t * @property DEG_TO_RAD\n\t\t * @static\n\t\t * @final\n\t\t * @type Number\n\t\t * @readonly\n\t\t **/\n\t\tMatrix2D.DEG_TO_RAD = Math.PI/180;\n\t\n\t\n\t// static public properties:\n\t\t/**\n\t\t * An identity matrix, representing a null transformation.\n\t\t * @property identity\n\t\t * @static\n\t\t * @type Matrix2D\n\t\t * @readonly\n\t\t **/\n\t\tMatrix2D.identity = null; // set at bottom of class definition.\n\t\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Sets the specified values on this instance. \n\t\t * @method setValues\n\t\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t\t * @return {Matrix2D} This instance. Useful for chaining method calls.\n\t\t*/\n\t\tp.setValues = function(a, b, c, d, tx, ty) {\n\t\t\t// don't forget to update docs in the constructor if these change:\n\t\t\tthis.a = (a == null) ? 1 : a;\n\t\t\tthis.b = b || 0;\n\t\t\tthis.c = c || 0;\n\t\t\tthis.d = (d == null) ? 1 : d;\n\t\t\tthis.tx = tx || 0;\n\t\t\tthis.ty = ty || 0;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Appends the specified matrix properties to this matrix. All parameters are required.\n\t\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t\t * @method append\n\t\t * @param {Number} a\n\t\t * @param {Number} b\n\t\t * @param {Number} c\n\t\t * @param {Number} d\n\t\t * @param {Number} tx\n\t\t * @param {Number} ty\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.append = function(a, b, c, d, tx, ty) {\n\t\t\tvar a1 = this.a;\n\t\t\tvar b1 = this.b;\n\t\t\tvar c1 = this.c;\n\t\t\tvar d1 = this.d;\n\t\t\tif (a != 1 || b != 0 || c != 0 || d != 1) {\n\t\t\t\tthis.a  = a1*a+c1*b;\n\t\t\t\tthis.b  = b1*a+d1*b;\n\t\t\t\tthis.c  = a1*c+c1*d;\n\t\t\t\tthis.d  = b1*c+d1*d;\n\t\t\t}\n\t\t\tthis.tx = a1*tx+c1*ty+this.tx;\n\t\t\tthis.ty = b1*tx+d1*ty+this.ty;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Prepends the specified matrix properties to this matrix.\n\t\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t\t * All parameters are required.\n\t\t * @method prepend\n\t\t * @param {Number} a\n\t\t * @param {Number} b\n\t\t * @param {Number} c\n\t\t * @param {Number} d\n\t\t * @param {Number} tx\n\t\t * @param {Number} ty\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.prepend = function(a, b, c, d, tx, ty) {\n\t\t\tvar a1 = this.a;\n\t\t\tvar c1 = this.c;\n\t\t\tvar tx1 = this.tx;\n\t\n\t\t\tthis.a  = a*a1+c*this.b;\n\t\t\tthis.b  = b*a1+d*this.b;\n\t\t\tthis.c  = a*c1+c*this.d;\n\t\t\tthis.d  = b*c1+d*this.d;\n\t\t\tthis.tx = a*tx1+c*this.ty+tx;\n\t\t\tthis.ty = b*tx1+d*this.ty+ty;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Appends the specified matrix to this matrix.\n\t\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t\t * @method appendMatrix\n\t\t * @param {Matrix2D} matrix\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.appendMatrix = function(matrix) {\n\t\t\treturn this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t\t};\n\t\n\t\t/**\n\t\t * Prepends the specified matrix to this matrix.\n\t\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t\t * For example, you could calculate the combined transformation for a child object using:\n\t\t * \n\t\t * \tvar o = myDisplayObject;\n\t\t * \tvar mtx = o.getMatrix();\n\t\t * \twhile (o = o.parent) {\n\t\t * \t\t// prepend each parent's transformation in turn:\n\t\t * \t\to.prependMatrix(o.getMatrix());\n\t\t * \t}\n\t\t * @method prependMatrix\n\t\t * @param {Matrix2D} matrix\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.prependMatrix = function(matrix) {\n\t\t\treturn this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t\t};\n\t\n\t\t/**\n\t\t * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n\t\t * For example, you can use this to generate a matrix representing the transformations of a display object:\n\t\t * \n\t\t * \tvar mtx = new createjs.Matrix2D();\n\t\t * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n\t\t * @method appendTransform\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} scaleX\n\t\t * @param {Number} scaleY\n\t\t * @param {Number} rotation\n\t\t * @param {Number} skewX\n\t\t * @param {Number} skewY\n\t\t * @param {Number} regX Optional.\n\t\t * @param {Number} regY Optional.\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\t\tif (rotation%360) {\n\t\t\t\tvar r = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\t\tvar cos = Math.cos(r);\n\t\t\t\tvar sin = Math.sin(r);\n\t\t\t} else {\n\t\t\t\tcos = 1;\n\t\t\t\tsin = 0;\n\t\t\t}\n\t\n\t\t\tif (skewX || skewY) {\n\t\t\t\t// TODO: can this be combined into a single append operation?\n\t\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t\t} else {\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t\t}\n\t\t\t\n\t\t\tif (regX || regY) {\n\t\t\t\t// append the registration offset:\n\t\t\t\tthis.tx -= regX*this.a+regY*this.c; \n\t\t\t\tthis.ty -= regX*this.b+regY*this.d;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n\t\t * For example, you could calculate the combined transformation for a child object using:\n\t\t * \n\t\t * \tvar o = myDisplayObject;\n\t\t * \tvar mtx = new createjs.Matrix2D();\n\t\t * \tdo  {\n\t\t * \t\t// prepend each parent's transformation in turn:\n\t\t * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t\t * \t} while (o = o.parent);\n\t\t * \t\n\t\t * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n\t\t * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n\t\t * @method prependTransform\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} scaleX\n\t\t * @param {Number} scaleY\n\t\t * @param {Number} rotation\n\t\t * @param {Number} skewX\n\t\t * @param {Number} skewY\n\t\t * @param {Number} regX Optional.\n\t\t * @param {Number} regY Optional.\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\t\tif (rotation%360) {\n\t\t\t\tvar r = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\t\tvar cos = Math.cos(r);\n\t\t\t\tvar sin = Math.sin(r);\n\t\t\t} else {\n\t\t\t\tcos = 1;\n\t\t\t\tsin = 0;\n\t\t\t}\n\t\n\t\t\tif (regX || regY) {\n\t\t\t\t// prepend the registration offset:\n\t\t\t\tthis.tx -= regX; this.ty -= regY;\n\t\t\t}\n\t\t\tif (skewX || skewY) {\n\t\t\t\t// TODO: can this be combined into a single prepend operation?\n\t\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t\t} else {\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Applies a clockwise rotation transformation to the matrix.\n\t\t * @method rotate\n\t\t * @param {Number} angle The angle to rotate by, in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.rotate = function(angle) {\n\t\t\tangle = angle*Matrix2D.DEG_TO_RAD;\n\t\t\tvar cos = Math.cos(angle);\n\t\t\tvar sin = Math.sin(angle);\n\t\n\t\t\tvar a1 = this.a;\n\t\t\tvar b1 = this.b;\n\t\n\t\t\tthis.a = a1*cos+this.c*sin;\n\t\t\tthis.b = b1*cos+this.d*sin;\n\t\t\tthis.c = -a1*sin+this.c*cos;\n\t\t\tthis.d = -b1*sin+this.d*cos;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Applies a skew transformation to the matrix.\n\t\t * @method skew\n\t\t * @param {Number} skewX The amount to skew horizontally in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t\t * @param {Number} skewY The amount to skew vertically in degrees.\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t*/\n\t\tp.skew = function(skewX, skewY) {\n\t\t\tskewX = skewX*Matrix2D.DEG_TO_RAD;\n\t\t\tskewY = skewY*Matrix2D.DEG_TO_RAD;\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Applies a scale transformation to the matrix.\n\t\t * @method scale\n\t\t * @param {Number} x The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.\n\t\t * @param {Number} y The amount to scale vertically.\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.scale = function(x, y) {\n\t\t\tthis.a *= x;\n\t\t\tthis.b *= x;\n\t\t\tthis.c *= y;\n\t\t\tthis.d *= y;\n\t\t\t//this.tx *= x;\n\t\t\t//this.ty *= y;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Translates the matrix on the x and y axes.\n\t\t * @method translate\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.translate = function(x, y) {\n\t\t\tthis.tx += this.a*x + this.c*y;\n\t\t\tthis.ty += this.b*x + this.d*y;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\n\t\t * @method identity\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.identity = function() {\n\t\t\tthis.a = this.d = 1;\n\t\t\tthis.b = this.c = this.tx = this.ty = 0;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Inverts the matrix, causing it to perform the opposite transformation.\n\t\t * @method invert\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.invert = function() {\n\t\t\tvar a1 = this.a;\n\t\t\tvar b1 = this.b;\n\t\t\tvar c1 = this.c;\n\t\t\tvar d1 = this.d;\n\t\t\tvar tx1 = this.tx;\n\t\t\tvar n = a1*d1-b1*c1;\n\t\n\t\t\tthis.a = d1/n;\n\t\t\tthis.b = -b1/n;\n\t\t\tthis.c = -c1/n;\n\t\t\tthis.d = a1/n;\n\t\t\tthis.tx = (c1*this.ty-d1*tx1)/n;\n\t\t\tthis.ty = -(a1*this.ty-b1*tx1)/n;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns true if the matrix is an identity matrix.\n\t\t * @method isIdentity\n\t\t * @return {Boolean}\n\t\t **/\n\t\tp.isIdentity = function() {\n\t\t\treturn this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns true if this matrix is equal to the specified matrix (all property values are equal).\n\t\t * @method equals\n\t\t * @param {Matrix2D} matrix The matrix to compare.\n\t\t * @return {Boolean}\n\t\t **/\n\t\tp.equals = function(matrix) {\n\t\t\treturn this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;\n\t\t};\n\t\n\t\t/**\n\t\t * Transforms a point according to this matrix.\n\t\t * @method transformPoint\n\t\t * @param {Number} x The x component of the point to transform.\n\t\t * @param {Number} y The y component of the point to transform.\n\t\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.\n\t\t * @return {Point} This matrix. Useful for chaining method calls.\n\t\t **/\n\t\tp.transformPoint = function(x, y, pt) {\n\t\t\tpt = pt||{};\n\t\t\tpt.x = x*this.a+y*this.c+this.tx;\n\t\t\tpt.y = x*this.b+y*this.d+this.ty;\n\t\t\treturn pt;\n\t\t};\n\t\n\t\t/**\n\t\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that these values\n\t\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\n\t\t * results.\n\t\t * @method decompose\n\t\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\n\t\t * @return {Object} The target, or a new generic object with the transform properties applied.\n\t\t*/\n\t\tp.decompose = function(target) {\n\t\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation even when scale is negative\n\t\t\tif (target == null) { target = {}; }\n\t\t\ttarget.x = this.tx;\n\t\t\ttarget.y = this.ty;\n\t\t\ttarget.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);\n\t\t\ttarget.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);\n\t\n\t\t\tvar skewX = Math.atan2(-this.c, this.d);\n\t\t\tvar skewY = Math.atan2(this.b, this.a);\n\t\n\t\t\tvar delta = Math.abs(1-skewX/skewY);\n\t\t\tif (delta < 0.00001) { // effectively identical, can use rotation:\n\t\t\t\ttarget.rotation = skewY/Matrix2D.DEG_TO_RAD;\n\t\t\t\tif (this.a < 0 && this.d >= 0) {\n\t\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\n\t\t\t\t}\n\t\t\t\ttarget.skewX = target.skewY = 0;\n\t\t\t} else {\n\t\t\t\ttarget.skewX = skewX/Matrix2D.DEG_TO_RAD;\n\t\t\t\ttarget.skewY = skewY/Matrix2D.DEG_TO_RAD;\n\t\t\t}\n\t\t\treturn target;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Copies all properties from the specified matrix to this matrix.\n\t\t * @method copy\n\t\t * @param {Matrix2D} matrix The matrix to copy properties from.\n\t\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t\t*/\n\t\tp.copy = function(matrix) {\n\t\t\treturn this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of the Matrix2D instance.\n\t\t * @method clone\n\t\t * @return {Matrix2D} a clone of the Matrix2D instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Matrix2D (a=\"+this.a+\" b=\"+this.b+\" c=\"+this.c+\" d=\"+this.d+\" tx=\"+this.tx+\" ty=\"+this.ty+\")]\";\n\t\t};\n\t\n\t\t// this has to be populated after the class is defined:\n\t\tMatrix2D.identity = new Matrix2D();\n\t\n\t\n\t\tcreatejs.Matrix2D = Matrix2D;\n\t}());\n\t\n\t//##############################################################################\n\t// DisplayProps.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\t/**\n\t\t * Used for calculating and encapsulating display related properties.\n\t\t * @class DisplayProps\n\t\t * @param {Number} [visible=true] Visible value.\n\t\t * @param {Number} [alpha=1] Alpha value.\n\t\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t\t * @param {Number} [matrix] A transformation matrix. Defaults to a new identity matrix.\n\t\t * @constructor\n\t\t **/\n\t\tfunction DisplayProps(visible, alpha, shadow, compositeOperation, matrix) {\n\t\t\tthis.setValues(visible, alpha, shadow, compositeOperation, matrix);\n\t\t\t\n\t\t// public properties:\n\t\t\t// assigned in the setValues method.\n\t\t\t/**\n\t\t\t * Property representing the alpha that will be applied to a display object.\n\t\t\t * @property alpha\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Property representing the shadow that will be applied to a display object.\n\t\t\t * @property shadow\n\t\t\t * @type Shadow\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Property representing the compositeOperation that will be applied to a display object.\n\t\t\t * You can find a list of valid composite operations at:\n\t\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\n\t\t\t * @property compositeOperation\n\t\t\t * @type String\n\t\t\t **/\n\t\t\t\n\t\t\t/**\n\t\t\t * Property representing the value for visible that will be applied to a display object.\n\t\t\t * @property visible\n\t\t\t * @type Boolean\n\t\t\t **/\n\t\t\t\n\t\t\t/**\n\t\t\t * The transformation matrix that will be applied to a display object.\n\t\t\t * @property matrix\n\t\t\t * @type Matrix2D\n\t\t\t **/\n\t\t}\n\t\tvar p = DisplayProps.prototype;\n\t\n\t// initialization:\n\t\t/**\n\t\t * Reinitializes the instance with the specified values.\n\t\t * @method setValues\n\t\t * @param {Number} [visible=true] Visible value.\n\t\t * @param {Number} [alpha=1] Alpha value.\n\t\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t\t * @param {Number} [matrix] A transformation matrix. Defaults to an identity matrix.\n\t\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.setValues = function (visible, alpha, shadow, compositeOperation, matrix) {\n\t\t\tthis.visible = visible == null ? true : !!visible;\n\t\t\tthis.alpha = alpha == null ? 1 : alpha;\n\t\t\tthis.shadow = shadow;\n\t\t\tthis.compositeOperation = compositeOperation;\n\t\t\tthis.matrix = matrix || (this.matrix&&this.matrix.identity()) || new createjs.Matrix2D();\n\t\t\treturn this;\n\t\t};\n\t\n\t// public methods:\n\t\t/**\n\t\t * Appends the specified display properties. This is generally used to apply a child's properties its parent's.\n\t\t * @method append\n\t\t * @param {Boolean} visible desired visible value\n\t\t * @param {Number} alpha desired alpha value\n\t\t * @param {Shadow} shadow desired shadow value\n\t\t * @param {String} compositeOperation desired composite operation value\n\t\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.append = function(visible, alpha, shadow, compositeOperation, matrix) {\n\t\t\tthis.alpha *= alpha;\n\t\t\tthis.shadow = shadow || this.shadow;\n\t\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\n\t\t\tthis.visible = this.visible && visible;\n\t\t\tmatrix&&this.matrix.appendMatrix(matrix);\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Prepends the specified display properties. This is generally used to apply a parent's properties to a child's.\n\t\t * For example, to get the combined display properties that would be applied to a child, you could use:\n\t\t * \n\t\t * \tvar o = myDisplayObject;\n\t\t * \tvar props = new createjs.DisplayProps();\n\t\t * \tdo {\n\t\t * \t\t// prepend each parent's props in turn:\n\t\t * \t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation, o.getMatrix());\n\t\t * \t} while (o = o.parent);\n\t\t * \t\n\t\t * @method prepend\n\t\t * @param {Boolean} visible desired visible value\n\t\t * @param {Number} alpha desired alpha value\n\t\t * @param {Shadow} shadow desired shadow value\n\t\t * @param {String} compositeOperation desired composite operation value\n\t\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.prepend = function(visible, alpha, shadow, compositeOperation, matrix) {\n\t\t\tthis.alpha *= alpha;\n\t\t\tthis.shadow = this.shadow || shadow;\n\t\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\n\t\t\tthis.visible = this.visible && visible;\n\t\t\tmatrix&&this.matrix.prependMatrix(matrix);\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Resets this instance and its matrix to default values.\n\t\t * @method identity\n\t\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.identity = function() {\n\t\t\tthis.visible = true;\n\t\t\tthis.alpha = 1;\n\t\t\tthis.shadow = this.compositeOperation = null;\n\t\t\tthis.matrix.identity();\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a clone of the DisplayProps instance. Clones the associated matrix.\n\t\t * @method clone\n\t\t * @return {DisplayProps} a clone of the DisplayProps instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());\n\t\t};\n\t\n\t// private methods:\n\t\n\t\tcreatejs.DisplayProps = DisplayProps;\n\t})();\n\t\n\t//##############################################################################\n\t// Point.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Represents a point on a 2 dimensional x / y coordinate system.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * \n\t\t *      var point = new createjs.Point(0, 100);\n\t\t * \n\t\t * @class Point\n\t\t * @param {Number} [x=0] X position.\n\t\t * @param {Number} [y=0] Y position.\n\t\t * @constructor\n\t\t **/\n\t\tfunction Point(x, y) {\n\t\t \tthis.setValues(x, y);\n\t\t \t\n\t\t \t\n\t\t// public properties:\n\t\t\t// assigned in the setValues method.\n\t\t\t/**\n\t\t\t * X position.\n\t\t\t * @property x\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Y position.\n\t\t\t * @property y\n\t\t\t * @type Number\n\t\t\t **/\n\t\t}\n\t\tvar p = Point.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\t\n\t// public methods:\n\t\t/** \n\t\t * Sets the specified values on this instance.\n\t\t * @method setValues\n\t\t * @param {Number} [x=0] X position.\n\t\t * @param {Number} [y=0] Y position.\n\t\t * @return {Point} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.setValues = function(x, y) {\n\t\t\tthis.x = x||0;\n\t\t\tthis.y = y||0;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Copies all properties from the specified point to this point.\n\t\t * @method copy\n\t\t * @param {Point} point The point to copy properties from.\n\t\t * @return {Point} This point. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.copy = function(point) {\n\t\t\tthis.x = point.x;\n\t\t\tthis.y = point.y;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a clone of the Point instance.\n\t\t * @method clone\n\t\t * @return {Point} a clone of the Point instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new Point(this.x, this.y);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Point (x=\"+this.x+\" y=\"+this.y+\")]\";\n\t\t};\n\t\t\n\t\t\n\t\tcreatejs.Point = Point;\n\t}());\n\t\n\t//##############################################################################\n\t// Rectangle.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Represents a rectangle as defined by the points (x, y) and (x+width, y+height).\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var rect = new createjs.Rectangle(0, 0, 100, 100);\n\t\t *\n\t\t * @class Rectangle\n\t\t * @param {Number} [x=0] X position.\n\t\t * @param {Number} [y=0] Y position.\n\t\t * @param {Number} [width=0] The width of the Rectangle.\n\t\t * @param {Number} [height=0] The height of the Rectangle.\n\t\t * @constructor\n\t\t **/\n\t\tfunction Rectangle(x, y, width, height) {\n\t\t\tthis.setValues(x, y, width, height);\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t// assigned in the setValues method.\n\t\t\t/**\n\t\t\t * X position.\n\t\t\t * @property x\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Y position.\n\t\t\t * @property y\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Width.\n\t\t\t * @property width\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\n\t\t\t/**\n\t\t\t * Height.\n\t\t\t * @property height\n\t\t\t * @type Number\n\t\t\t **/\n\t\t}\n\t\tvar p = Rectangle.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// public methods:\n\t\t/** \n\t\t * Sets the specified values on this instance.\n\t\t * @method setValues\n\t\t * @param {Number} [x=0] X position.\n\t\t * @param {Number} [y=0] Y position.\n\t\t * @param {Number} [width=0] The width of the Rectangle.\n\t\t * @param {Number} [height=0] The height of the Rectangle.\n\t\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.setValues = function(x, y, width, height) {\n\t\t\t// don't forget to update docs in the constructor if these change:\n\t\t\tthis.x = x||0;\n\t\t\tthis.y = y||0;\n\t\t\tthis.width = width||0;\n\t\t\tthis.height = height||0;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/** \n\t\t * Extends the rectangle's bounds to include the described point or rectangle.\n\t\t * @method extend\n\t\t * @param {Number} x X position of the point or rectangle.\n\t\t * @param {Number} y Y position of the point or rectangle.\n\t\t * @param {Number} [width=0] The width of the rectangle.\n\t\t * @param {Number} [height=0] The height of the rectangle.\n\t\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.extend = function(x, y, width, height) {\n\t\t\twidth = width||0;\n\t\t\theight = height||0;\n\t\t\tif (x+width > this.x+this.width) { this.width = x+width-this.x; }\n\t\t\tif (y+height > this.y+this.height) { this.height = y+height-this.y; }\n\t\t\tif (x < this.x) { this.width += this.x-x; this.x = x; }\n\t\t\tif (y < this.y) { this.height += this.y-y; this.y = y; }\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/** \n\t\t * Adds the specified padding to the rectangle's bounds.\n\t\t * @method pad\n\t\t * @param {Number} top\n\t\t * @param {Number} left\n\t\t * @param {Number} right\n\t\t * @param {Number} bottom\n\t\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.pad = function(top, left, bottom, right) {\n\t\t\tthis.x -= left;\n\t\t\tthis.y -= top;\n\t\t\tthis.width += left+right;\n\t\t\tthis.height += top+bottom;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Copies all properties from the specified rectangle to this rectangle.\n\t\t * @method copy\n\t\t * @param {Rectangle} rectangle The rectangle to copy properties from.\n\t\t * @return {Rectangle} This rectangle. Useful for chaining method calls.\n\t\t * @chainable\n\t\t*/\n\t\tp.copy = function(rectangle) {\n\t\t\treturn this.setValues(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n\t\t};\n\t\t\n\t\t/** \n\t\t * Returns true if this rectangle fully encloses the described point or rectangle.\n\t\t * @method contains\n\t\t * @param {Number} x X position of the point or rectangle.\n\t\t * @param {Number} y Y position of the point or rectangle.\n\t\t * @param {Number} [width=0] The width of the rectangle.\n\t\t * @param {Number} [height=0] The height of the rectangle.\n\t\t * @return {Boolean} True if the described point or rectangle is contained within this rectangle.\n\t\t*/\n\t\tp.contains = function(x, y, width, height) {\n\t\t\twidth = width||0;\n\t\t\theight = height||0;\n\t\t\treturn (x >= this.x && x+width <= this.x+this.width && y >= this.y && y+height <= this.y+this.height);\n\t\t};\n\t\t\n\t\t/** \n\t\t * Returns a new rectangle which contains this rectangle and the specified rectangle.\n\t\t * @method union\n\t\t * @param {Rectangle} rect The rectangle to calculate a union with.\n\t\t * @return {Rectangle} A new rectangle describing the union.\n\t\t*/\n\t\tp.union = function(rect) {\n\t\t\treturn this.clone().extend(rect.x, rect.y, rect.width, rect.height);\n\t\t};\n\t\t\n\t\t/** \n\t\t * Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,\n\t\t * or null if they do not intersect.\n\t\t * @method intersection\n\t\t * @param {Rectangle} rect The rectangle to calculate an intersection with.\n\t\t * @return {Rectangle} A new rectangle describing the intersection or null.\n\t\t*/\n\t\tp.intersection = function(rect) {\n\t\t\tvar x1 = rect.x, y1 = rect.y, x2 = x1+rect.width, y2 = y1+rect.height;\n\t\t\tif (this.x > x1) { x1 = this.x; }\n\t\t\tif (this.y > y1) { y1 = this.y; }\n\t\t\tif (this.x + this.width < x2) { x2 = this.x + this.width; }\n\t\t\tif (this.y + this.height < y2) { y2 = this.y + this.height; }\n\t\t\treturn (x2 <= x1 || y2 <= y1) ? null : new Rectangle(x1, y1, x2-x1, y2-y1);\n\t\t};\n\t\t\n\t\t/** \n\t\t * Returns true if the specified rectangle intersects (has any overlap) with this rectangle.\n\t\t * @method intersects\n\t\t * @param {Rectangle} rect The rectangle to compare.\n\t\t * @return {Boolean} True if the rectangles intersect.\n\t\t*/\n\t\tp.intersects = function(rect) {\n\t\t\treturn (rect.x <= this.x+this.width && this.x <= rect.x+rect.width && rect.y <= this.y+this.height && this.y <= rect.y + rect.height);\n\t\t};\n\t\t\n\t\t/** \n\t\t * Returns true if the width or height are equal or less than 0.\n\t\t * @method isEmpty\n\t\t * @return {Boolean} True if the rectangle is empty.\n\t\t*/\n\t\tp.isEmpty = function() {\n\t\t\treturn this.width <= 0 || this.height <= 0;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a clone of the Rectangle instance.\n\t\t * @method clone\n\t\t * @return {Rectangle} a clone of the Rectangle instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Rectangle (x=\"+this.x+\" y=\"+this.y+\" width=\"+this.width+\" height=\"+this.height+\")]\";\n\t\t};\n\t\t\n\t\t\n\t\tcreatejs.Rectangle = Rectangle;\n\t}());\n\t\n\t//##############################################################################\n\t// ButtonHelper.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * The ButtonHelper is a helper class to create interactive buttons from {{#crossLink \"MovieClip\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Sprite\"}}{{/crossLink}} instances. This class will intercept mouse events from an object, and\n\t\t * automatically call {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}},\n\t\t * to the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.\n\t\t *\n\t\t * The ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent\n\t\t * garbage collection.\n\t\t * \n\t\t * Note that over states will not work unless you call {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var helper = new createjs.ButtonHelper(myInstance, \"out\", \"over\", \"down\", false, myInstance, \"hit\");\n\t\t *      myInstance.addEventListener(\"click\", handleClick);\n\t\t *      function handleClick(event) {\n\t\t *          // Click Happened.\n\t\t *      }\n\t\t *\n\t\t * @class ButtonHelper\n\t\t * @param {Sprite|MovieClip} target The instance to manage.\n\t\t * @param {String} [outLabel=\"out\"] The label or animation to go to when the user rolls out of the button.\n\t\t * @param {String} [overLabel=\"over\"] The label or animation to go to when the user rolls over the button.\n\t\t * @param {String} [downLabel=\"down\"] The label or animation to go to when the user presses the button.\n\t\t * @param {Boolean} [play=false] If the helper should call \"gotoAndPlay\" or \"gotoAndStop\" on the button when changing\n\t\t * states.\n\t\t * @param {DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,\n\t\t * then the button's visible states will be used instead. Note that the same instance as the \"target\" argument can be\n\t\t * used for the hitState.\n\t\t * @param {String} [hitLabel] The label or animation on the hitArea instance that defines the hitArea bounds. If this is\n\t\t * null, then the default state of the hitArea will be used. *\n\t\t * @constructor\n\t\t */\n\t\tfunction ButtonHelper(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {\n\t\t\tif (!target.addEventListener) { return; }\n\t\t\n\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The target for this button helper.\n\t\t\t * @property target\n\t\t\t * @type MovieClip | Sprite\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.target = target;\n\t\t\n\t\t\t/**\n\t\t\t * The label name or frame number to display when the user mouses out of the target. Defaults to \"over\".\n\t\t\t * @property overLabel\n\t\t\t * @type String | Number\n\t\t\t **/\n\t\t\tthis.overLabel = overLabel == null ? \"over\" : overLabel;\n\t\t\n\t\t\t/**\n\t\t\t * The label name or frame number to display when the user mouses over the target. Defaults to \"out\".\n\t\t\t * @property outLabel\n\t\t\t * @type String | Number\n\t\t\t **/\n\t\t\tthis.outLabel = outLabel == null ? \"out\" : outLabel;\n\t\t\n\t\t\t/**\n\t\t\t * The label name or frame number to display when the user presses on the target. Defaults to \"down\".\n\t\t\t * @property downLabel\n\t\t\t * @type String | Number\n\t\t\t **/\n\t\t\tthis.downLabel = downLabel == null ? \"down\" : downLabel;\n\t\t\n\t\t\t/**\n\t\t\t * If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop. Default is false.\n\t\t\t * @property play\n\t\t\t * @default false\n\t\t\t * @type Boolean\n\t\t\t **/\n\t\t\tthis.play = play;\n\t\t\t\n\t\t\t\n\t\t//  private properties\n\t\t\t/**\n\t\t\t * @property _isPressed\n\t\t\t * @type Boolean\n\t\t\t * @protected\n\t\t\t **/\n\t\t\tthis._isPressed = false;\n\t\t\n\t\t\t/**\n\t\t\t * @property _isOver\n\t\t\t * @type Boolean\n\t\t\t * @protected\n\t\t\t **/\n\t\t\tthis._isOver = false;\n\t\t\n\t\t\t/**\n\t\t\t * @property _enabled\n\t\t\t * @type Boolean\n\t\t\t * @protected\n\t\t\t **/\n\t\t\tthis._enabled = false;\n\t\t\t\n\t\t// setup:\n\t\t\ttarget.mouseChildren = false; // prevents issues when children are removed from the display list when state changes.\n\t\t\tthis.enabled = true;\n\t\t\tthis.handleEvent({});\n\t\t\tif (hitArea) {\n\t\t\t\tif (hitLabel) {\n\t\t\t\t\thitArea.actionsEnabled = false;\n\t\t\t\t\thitArea.gotoAndStop&&hitArea.gotoAndStop(hitLabel);\n\t\t\t\t}\n\t\t\t\ttarget.hitArea = hitArea;\n\t\t\t}\n\t\t}\n\t\tvar p = ButtonHelper.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\t\n\t// getter / setters:\n\t\t/**\n\t\t * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n\t\t * @method setEnabled\n\t\t * @param {Boolean} value\n\t\t * @deprecated\n\t\t **/\n\t\tp.setEnabled = function(value) { // TODO: deprecated.\n\t\t\tif (value == this._enabled) { return; }\n\t\t\tvar o = this.target;\n\t\t\tthis._enabled = value;\n\t\t\tif (value) {\n\t\t\t\to.cursor = \"pointer\";\n\t\t\t\to.addEventListener(\"rollover\", this);\n\t\t\t\to.addEventListener(\"rollout\", this);\n\t\t\t\to.addEventListener(\"mousedown\", this);\n\t\t\t\to.addEventListener(\"pressup\", this);\n\t\t\t\tif (o._reset) { o.__reset = o._reset; o._reset = this._reset;}\n\t\t\t} else {\n\t\t\t\to.cursor = null;\n\t\t\t\to.removeEventListener(\"rollover\", this);\n\t\t\t\to.removeEventListener(\"rollout\", this);\n\t\t\t\to.removeEventListener(\"mousedown\", this);\n\t\t\t\to.removeEventListener(\"pressup\", this);\n\t\t\t\tif (o.__reset) { o._reset = o.__reset; delete(o.__reset); }\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n\t\t * @method getEnabled\n\t\t * @return {Boolean}\n\t\t * @deprecated\n\t\t **/\n\t\tp.getEnabled = function() {\n\t\t\treturn this._enabled;\n\t\t};\n\t\n\t\t/**\n\t\t * Enables or disables the button functionality on the target.\n\t\t * @property enabled\n\t\t * @type {Boolean}\n\t\t **/\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tenabled: { get: p.getEnabled, set: p.setEnabled }\n\t\t\t});\n\t\t} catch (e) {} // TODO: use Log\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[ButtonHelper]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method handleEvent\n\t\t * @param {Object} evt The mouse event to handle.\n\t\t * @protected\n\t\t **/\n\t\tp.handleEvent = function(evt) {\n\t\t\tvar label, t = this.target, type = evt.type;\n\t\t\tif (type == \"mousedown\") {\n\t\t\t\tthis._isPressed = true;\n\t\t\t\tlabel = this.downLabel;\n\t\t\t} else if (type == \"pressup\") {\n\t\t\t\tthis._isPressed = false;\n\t\t\t\tlabel = this._isOver ? this.overLabel : this.outLabel;\n\t\t\t} else if (type == \"rollover\") {\n\t\t\t\tthis._isOver = true;\n\t\t\t\tlabel = this._isPressed ? this.downLabel : this.overLabel;\n\t\t\t} else { // rollout and default\n\t\t\t\tthis._isOver = false;\n\t\t\t\tlabel = this._isPressed ? this.overLabel : this.outLabel;\n\t\t\t}\n\t\t\tif (this.play) {\n\t\t\t\tt.gotoAndPlay&&t.gotoAndPlay(label);\n\t\t\t} else {\n\t\t\t\tt.gotoAndStop&&t.gotoAndStop(label);\n\t\t\t}\n\t\t};\n\t\t\n\t\t/**\n\t\t * Injected into target. Preserves the paused state through a reset.\n\t\t * @method _reset\n\t\t * @protected\n\t\t **/\n\t\tp._reset = function() {\n\t\t\t// TODO: explore better ways to handle this issue. This is hacky & disrupts object signatures.\n\t\t\tvar p = this.paused;\n\t\t\tthis.__reset();\n\t\t\tthis.paused = p;\n\t\t};\n\t\n\t\n\t\tcreatejs.ButtonHelper = ButtonHelper;\n\t}());\n\t\n\t//##############################################################################\n\t// Shadow.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * This class encapsulates the properties required to define a shadow to apply to a {{#crossLink \"DisplayObject\"}}{{/crossLink}}\n\t\t * via its <code>shadow</code> property.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      myImage.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);\n\t\t *\n\t\t * @class Shadow\n\t\t * @constructor\n\t\t * @param {String} color The color of the shadow. This can be any valid CSS color value.\n\t\t * @param {Number} offsetX The x offset of the shadow in pixels.\n\t\t * @param {Number} offsetY The y offset of the shadow in pixels.\n\t\t * @param {Number} blur The size of the blurring effect.\n\t\t **/\n\t\tfunction Shadow(color, offsetX, offsetY, blur) {\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/** \n\t\t\t * The color of the shadow. This can be any valid CSS color value.\n\t\t\t * @property color\n\t\t\t * @type String\n\t\t\t * @default null\n\t\t\t */\n\t\t\tthis.color = color||\"black\";\n\t\t\n\t\t\t/** The x offset of the shadow.\n\t\t\t * @property offsetX\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t */\n\t\t\tthis.offsetX = offsetX||0;\n\t\t\n\t\t\t/** The y offset of the shadow.\n\t\t\t * @property offsetY\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t */\n\t\t\tthis.offsetY = offsetY||0;\n\t\t\n\t\t\t/** The blur of the shadow.\n\t\t\t * @property blur\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t */\n\t\t\tthis.blur = blur||0;\n\t\t}\n\t\tvar p = Shadow.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// static public properties:\n\t\t/**\n\t\t * An identity shadow object (all properties are set to 0).\n\t\t * @property identity\n\t\t * @type Shadow\n\t\t * @static\n\t\t * @final\n\t\t * @readonly\n\t\t **/\n\t\tShadow.identity = new Shadow(\"transparent\", 0, 0, 0);\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Shadow]\";\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of this Shadow instance.\n\t\t * @method clone\n\t\t * @return {Shadow} A clone of the current Shadow instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new Shadow(this.color, this.offsetX, this.offsetY, this.blur);\n\t\t};\n\t\t\n\t\n\t\tcreatejs.Shadow = Shadow;\n\t}());\n\t\n\t//##############################################################################\n\t// SpriteSheet.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually\n\t\t * animation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100\n\t\t * images could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).\n\t\t *\n\t\t * The data passed to the SpriteSheet constructor defines:\n\t\t * <ol>\n\t\t * \t<li> The source image or images to use.</li>\n\t\t * \t<li> The positions of individual image frames.</li>\n\t\t * \t<li> Sequences of frames that form named animations. Optional.</li>\n\t\t * \t<li> The target playback framerate. Optional.</li>\n\t\t * </ol>\n\t\t * <h3>SpriteSheet Format</h3>\n\t\t * SpriteSheets are an object with two required properties (`images` and `frames`), and two optional properties\n\t\t * (`framerate` and `animations`). This makes them easy to define in javascript code, or in JSON.\n\t\t *\n\t\t * <h4>images</h4>\n\t\t * An array of source images. Images can be either an HTMlimage\n\t\t * instance, or a uri to an image. The former is recommended to control preloading.\n\t\t *\n\t\t * \timages: [image1, \"path/to/image2.png\"],\n\t\t *\n\t\t * <h4>frames</h4>\n\t\t * Defines the individual frames. There are two supported formats for frame data:\n\t\t * When all of the frames are the same size (in a grid), use an object with `width`, `height`, `regX`, `regY`,\n\t\t * and `count` properties.\n\t\t *\n\t\t * <ul>\n\t\t *  <li>`width` & `height` are required and specify the dimensions of the frames</li>\n\t\t *  <li>`regX` & `regY` indicate the registration point or \"origin\" of the frames</li>\n\t\t *  <li>`spacing` indicate the spacing between frames</li>\n\t\t *  <li>`margin` specify the margin around the image(s)</li>\n\t\t *  <li>`count` allows you to specify the total number of frames in the spritesheet; if omitted, this will\n\t\t *  be calculated based on the dimensions of the source images and the frames. Frames will be assigned\n\t\t *  indexes based on their position in the source images (left to right, top to bottom).</li>\n\t\t * </ul>\n\t\t *\n\t\t *  \tframes: {width:64, height:64, count:20, regX: 32, regY:64, spacing:0, margin:0}\n\t\t *\n\t\t * If the frames are of different sizes, use an array of frame definitions. Each definition is itself an array\n\t\t * with 4 required and 3 optional entries, in the order:\n\t\t *\n\t\t * <ul>\n\t\t *  <li>The first four, `x`, `y`, `width`, and `height` are required and define the frame rectangle.</li>\n\t\t *  <li>The fifth, `imageIndex`, specifies the index of the source image (defaults to 0)</li>\n\t\t *  <li>The last two, `regX` and `regY` specify the registration point of the frame</li>\n\t\t * </ul>\n\t\t *\n\t\t * \tframes: [\n\t\t * \t\t// x, y, width, height, imageIndex*, regX*, regY*\n\t\t * \t\t[64, 0, 96, 64],\n\t\t * \t\t[0, 0, 64, 64, 1, 32, 32]\n\t\t * \t\t// etc.\n\t\t * \t]\n\t\t *\n\t\t * <h4>animations</h4>\n\t\t * Optional. An object defining sequences of frames to play as named animations. Each property corresponds to an\n\t\t * animation of the same name. Each animation must specify the frames to play, and may\n\t\t * also include a relative playback `speed` (ex. 2 would playback at double speed, 0.5 at half), and\n\t\t * the name of the `next` animation to sequence to after it completes.\n\t\t *\n\t\t * There are three formats supported for defining the frames in an animation, which can be mixed and matched as appropriate:\n\t\t * <ol>\n\t\t * \t<li>for a single frame animation, you can simply specify the frame index\n\t\t *\n\t\t * \t\tanimations: {\n\t\t * \t\t\tsit: 7\n\t\t * \t\t}\n\t\t *\n\t\t * </li>\n\t\t * <li>\n\t\t *      for an animation of consecutive frames, you can use an array with two required, and two optional entries\n\t\t * \t\tin the order: `start`, `end`, `next`, and `speed`. This will play the frames from start to end inclusive.\n\t\t *\n\t\t * \t\tanimations: {\n\t\t * \t\t\t// start, end, next*, speed*\n\t\t * \t\t\trun: [0, 8],\n\t\t * \t\t\tjump: [9, 12, \"run\", 2]\n\t\t * \t\t}\n\t\t *\n\t\t *  </li>\n\t\t *  <li>\n\t\t *     for non-consecutive frames, you can use an object with a `frames` property defining an array of frame\n\t\t *     indexes to play in order. The object can also specify `next` and `speed` properties.\n\t\t *\n\t\t * \t\tanimations: {\n\t\t * \t\t\twalk: {\n\t\t * \t\t\t\tframes: [1,2,3,3,2,1]\n\t\t * \t\t\t},\n\t\t * \t\t\tshoot: {\n\t\t * \t\t\t\tframes: [1,4,5,6],\n\t\t * \t\t\t\tnext: \"walk\",\n\t\t * \t\t\t\tspeed: 0.5\n\t\t * \t\t\t}\n\t\t * \t\t}\n\t\t *\n\t\t *  </li>\n\t\t * </ol>\n\t\t * <strong>Note:</strong> the `speed` property was added in EaselJS 0.7.0. Earlier versions had a `frequency`\n\t\t * property instead, which was the inverse of `speed`. For example, a value of \"4\" would be 1/4 normal speed in\n\t\t * earlier versions, but is 4x normal speed in EaselJS 0.7.0+.\n\t\t *\n\t\t * <h4>framerate</h4>\n\t\t * Optional. Indicates the default framerate to play this spritesheet at in frames per second. See\n\t\t * {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} for more information.\n\t\t *\n\t\t * \t\tframerate: 20\n\t\t *\n\t\t * Note that the Sprite framerate will only work if the stage update method is provided with the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t\t * event generated by the {{#crossLink \"Ticker\"}}{{/crossLink}}.\n\t\t *\n\t\t * \t\tcreatejs.Ticker.on(\"tick\", handleTick);\n\t\t * \t\tfunction handleTick(event) {\n\t\t *\t\t\tstage.update(event);\n\t\t *\t\t}\n\t\t *\n\t\t * <h3>Example</h3>\n\t\t * To define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid with three\n\t\t * animations: \"stand\" showing the first frame, \"run\" looping frame 1-5 inclusive, and \"jump\" playing frame 6-8 and\n\t\t * sequencing back to run.\n\t\t *\n\t\t * \t\tvar data = {\n\t\t * \t\t\timages: [\"sprites.jpg\"],\n\t\t * \t\t\tframes: {width:50, height:50},\n\t\t * \t\t\tanimations: {\n\t\t * \t\t\t\tstand:0,\n\t\t * \t\t\t\trun:[1,5],\n\t\t * \t\t\t\tjump:[6,8,\"run\"]\n\t\t * \t\t\t}\n\t\t * \t\t};\n\t\t * \t\tvar spriteSheet = new createjs.SpriteSheet(data);\n\t\t * \t\tvar animation = new createjs.Sprite(spriteSheet, \"run\");\n\t\t *\n\t\t * <h3>Generating SpriteSheet Images</h3>\n\t\t * Spritesheets can be created manually by combining images in PhotoShop, and specifying the frame size or\n\t\t * coordinates manually, however there are a number of tools that facilitate this.\n\t\t * <ul>\n\t\t *     <li>Exporting SpriteSheets or HTML5 content from Flash Pro supports the EaselJS SpriteSheet format.</li>\n\t\t *     <li>The popular <a href=\"https://www.codeandweb.com/texturepacker/easeljs\" target=\"_blank\">Texture Packer</a> has\n\t\t *     EaselJS support.\n\t\t *     <li>SWF animations in Flash can be exported to SpriteSheets using <a href=\"http://createjs.com/zoe\" target=\"_blank\"></a></li>\n\t\t * </ul>\n\t\t *\n\t\t * <h3>Cross Origin Issues</h3>\n\t\t * <strong>Warning:</strong> Images loaded cross-origin will throw cross-origin security errors when interacted with\n\t\t * using:\n\t\t * <ul>\n\t\t *     <li>a mouse</li>\n\t\t *     <li>methods such as {{#crossLink \"Container/getObjectUnderPoint\"}}{{/crossLink}}</li>\n\t\t *     <li>Filters (see {{#crossLink \"Filter\"}}{{/crossLink}})</li>\n\t\t *     <li>caching (see {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}})</li>\n\t\t * </ul>\n\t\t * You can get around this by setting `crossOrigin` property on your images before passing them to EaselJS, or\n\t\t * setting the `crossOrigin` property on PreloadJS' LoadQueue or LoadItems.\n\t\t *\n\t\t * \t\tvar image = new Image();\n\t\t * \t\timg.crossOrigin=\"Anonymous\";\n\t\t * \t\timg.src = \"http://server-with-CORS-support.com/path/to/image.jpg\";\n\t\t *\n\t\t * If you pass string paths to SpriteSheets, they will not work cross-origin. The server that stores the image must\n\t\t * support cross-origin requests, or this will not work. For more information, check out\n\t\t * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\">CORS overview on MDN</a>.\n\t\t *\n\t\t * @class SpriteSheet\n\t\t * @constructor\n\t\t * @param {Object} data An object describing the SpriteSheet data.\n\t\t * @extends EventDispatcher\n\t\t **/\n\t\tfunction SpriteSheet(data) {\n\t\t\tthis.EventDispatcher_constructor();\n\t\n\t\n\t\t\t// public properties:\n\t\t\t/**\n\t\t\t * Indicates whether all images are finished loading.\n\t\t\t * @property complete\n\t\t\t * @type Boolean\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.complete = true;\n\t\n\t\t\t/**\n\t\t\t * Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See the Sprite class\n\t\t\t * {{#crossLink \"Sprite/framerate:property\"}}{{/crossLink}} for more information.\n\t\t\t * @property framerate\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.framerate = 0;\n\t\n\t\n\t\t\t// private properties:\n\t\t\t/**\n\t\t\t * @property _animations\n\t\t\t * @protected\n\t\t\t * @type Array\n\t\t\t **/\n\t\t\tthis._animations = null;\n\t\n\t\t\t/**\n\t\t\t * @property _frames\n\t\t\t * @protected\n\t\t\t * @type Array\n\t\t\t **/\n\t\t\tthis._frames = null;\n\t\n\t\t\t/**\n\t\t\t * @property _images\n\t\t\t * @protected\n\t\t\t * @type Array\n\t\t\t **/\n\t\t\tthis._images = null;\n\t\n\t\t\t/**\n\t\t\t * @property _data\n\t\t\t * @protected\n\t\t\t * @type Object\n\t\t\t **/\n\t\t\tthis._data = null;\n\t\n\t\t\t/**\n\t\t\t * @property _loadCount\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._loadCount = 0;\n\t\n\t\t\t// only used for simple frame defs:\n\t\t\t/**\n\t\t\t * @property _frameHeight\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._frameHeight = 0;\n\t\n\t\t\t/**\n\t\t\t * @property _frameWidth\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._frameWidth = 0;\n\t\n\t\t\t/**\n\t\t\t * @property _numFrames\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._numFrames = 0;\n\t\n\t\t\t/**\n\t\t\t * @property _regX\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._regX = 0;\n\t\n\t\t\t/**\n\t\t\t * @property _regY\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._regY = 0;\n\t\n\t\t\t/**\n\t\t\t * @property _spacing\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._spacing = 0;\n\t\n\t\t\t/**\n\t\t\t * @property _margin\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._margin = 0;\n\t\n\t\t\t// setup:\n\t\t\tthis._parseData(data);\n\t\t}\n\t\tvar p = createjs.extend(SpriteSheet, createjs.EventDispatcher);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n\t// events:\n\t\t/**\n\t\t * Dispatched when all images are loaded.  Note that this only fires if the images\n\t\t * were not fully loaded when the sprite sheet was initialized. You should check the complete property\n\t\t * to prior to adding a listener. Ex.\n\t\t *\n\t\t * \tvar sheet = new createjs.SpriteSheet(data);\n\t\t * \tif (!sheet.complete) {\n\t\t * \t\t// not preloaded, listen for the complete event:\n\t\t * \t\tsheet.addEventListener(\"complete\", handler);\n\t\t * \t}\n\t\t *\n\t\t * @event complete\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when getFrame is called with a valid frame index. This is primarily intended for use by {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}}\n\t\t * when doing on-demand rendering.\n\t\t * @event getframe\n\t\t * @param {Number} index The frame index.\n\t\t * @param {Object} frame The frame object that getFrame will return.\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when an image encounters an error. A SpriteSheet will dispatch an error event for each image that\n\t\t * encounters an error, and will still dispatch a {{#crossLink \"SpriteSheet/complete:event\"}}{{/crossLink}}\n\t\t * event once all images are finished processing, even if an error is encountered.\n\t\t * @event error\n\t\t * @param {String} src The source of the image that failed to load.\n\t\t * @since 0.8.2\n\t\t */\n\t\n\t\n\t// getter / setters:\n\t\t/**\n\t\t * Use the {{#crossLink \"SpriteSheet/animations:property\"}}{{/crossLink}} property instead.\n\t\t * @method getAnimations\n\t\t * @return {Array}\n\t\t * @deprecated\n\t\t **/\n\t\tp.getAnimations = function() {\n\t\t\treturn this._animations.slice();\n\t\t};\n\t\n\t\t/**\n\t\t * Returns an array of all available animation names available on this sprite sheet as strings.\n\t\t * @property animations\n\t\t * @type {Array}\n\t\t * @readonly\n\t\t **/\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tanimations: { get: p.getAnimations }\n\t\t\t});\n\t\t} catch (e) {}\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns the total number of frames in the specified animation, or in the whole sprite\n\t\t * sheet if the animation param is omitted. Returns 0 if the spritesheet relies on calculated frame counts, and\n\t\t * the images have not been fully loaded.\n\t\t * @method getNumFrames\n\t\t * @param {String} animation The name of the animation to get a frame count for.\n\t\t * @return {Number} The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.\n\t\t */\n\t\tp.getNumFrames = function(animation) {\n\t\t\tif (animation == null) {\n\t\t\t\treturn this._frames ? this._frames.length : this._numFrames || 0;\n\t\t\t} else {\n\t\t\t\tvar data = this._data[animation];\n\t\t\t\tif (data == null) { return 0; }\n\t\t\t\telse { return data.frames.length; }\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Returns an object defining the specified animation. The returned object contains:<UL>\n\t\t * \t<li>frames: an array of the frame ids in the animation</li>\n\t\t * \t<li>speed: the playback speed for this animation</li>\n\t\t * \t<li>name: the name of the animation</li>\n\t\t * \t<li>next: the default animation to play next. If the animation loops, the name and next property will be the\n\t\t * \tsame.</li>\n\t\t * </UL>\n\t\t * @method getAnimation\n\t\t * @param {String} name The name of the animation to get.\n\t\t * @return {Object} a generic object with frames, speed, name, and next properties.\n\t\t **/\n\t\tp.getAnimation = function(name) {\n\t\t\treturn this._data[name];\n\t\t};\n\t\n\t\t/**\n\t\t * Returns an object specifying the image and source rect of the specified frame. The returned object has:<UL>\n\t\t * \t<li>an image property holding a reference to the image object in which the frame is found</li>\n\t\t * \t<li>a rect property containing a Rectangle instance which defines the boundaries for the frame within that\n\t\t * \timage.</li>\n\t\t * \t<li> A regX and regY property corresponding to the regX/Y values for the frame.\n\t\t * </UL>\n\t\t * @method getFrame\n\t\t * @param {Number} frameIndex The index of the frame.\n\t\t * @return {Object} a generic object with image and rect properties. Returns null if the frame does not exist.\n\t\t **/\n\t\tp.getFrame = function(frameIndex) {\n\t\t\tvar frame;\n\t\t\tif (this._frames && (frame=this._frames[frameIndex])) { return frame; }\n\t\t\treturn null;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the specified frame relative\n\t\t * to the origin. For example, a 90 x 70 frame with a regX of 50 and a regY of 40 would return:\n\t\t *\n\t\t * \t[x=-50, y=-40, width=90, height=70]\n\t\t *\n\t\t * @method getFrameBounds\n\t\t * @param {Number} frameIndex The index of the frame.\n\t\t * @param {Rectangle} [rectangle] A Rectangle instance to copy the values into. By default a new instance is created.\n\t\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.\n\t\t **/\n\t\tp.getFrameBounds = function(frameIndex, rectangle) {\n\t\t\tvar frame = this.getFrame(frameIndex);\n\t\t\treturn frame ? (rectangle||new createjs.Rectangle()).setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[SpriteSheet]\";\n\t\t};\n\t\n\t\t/**\n\t\t * SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.\n\t\t * @method clone\n\t\t **/\n\t\tp.clone = function() {\n\t\t\tthrow(\"SpriteSheet cannot be cloned.\")\n\t\t};\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _parseData\n\t\t * @param {Object} data An object describing the SpriteSheet data.\n\t\t * @protected\n\t\t **/\n\t\tp._parseData = function(data) {\n\t\t\tvar i,l,o,a;\n\t\t\tif (data == null) { return; }\n\t\n\t\t\tthis.framerate = data.framerate||0;\n\t\n\t\t\t// parse images:\n\t\t\tif (data.images && (l=data.images.length) > 0) {\n\t\t\t\ta = this._images = [];\n\t\t\t\tfor (i=0; i<l; i++) {\n\t\t\t\t\tvar img = data.images[i];\n\t\t\t\t\tif (typeof img == \"string\") {\n\t\t\t\t\t\tvar src = img;\n\t\t\t\t\t\timg = document.createElement(\"img\");\n\t\t\t\t\t\timg.src = src;\n\t\t\t\t\t}\n\t\t\t\t\ta.push(img);\n\t\t\t\t\tif (!img.getContext && !img.naturalWidth) {\n\t\t\t\t\t\tthis._loadCount++;\n\t\t\t\t\t\tthis.complete = false;\n\t\t\t\t\t\t(function(o, src) { img.onload = function() { o._handleImageLoad(src); } })(this, src);\n\t\t\t\t\t\t(function(o, src) { img.onerror = function() { o._handleImageError(src); } })(this, src);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// parse frames:\n\t\t\tif (data.frames == null) { // nothing\n\t\t\t} else if (Array.isArray(data.frames)) {\n\t\t\t\tthis._frames = [];\n\t\t\t\ta = data.frames;\n\t\t\t\tfor (i=0,l=a.length;i<l;i++) {\n\t\t\t\t\tvar arr = a[i];\n\t\t\t\t\tthis._frames.push({image:this._images[arr[4]?arr[4]:0], rect:new createjs.Rectangle(arr[0],arr[1],arr[2],arr[3]), regX:arr[5]||0, regY:arr[6]||0 });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\to = data.frames;\n\t\t\t\tthis._frameWidth = o.width;\n\t\t\t\tthis._frameHeight = o.height;\n\t\t\t\tthis._regX = o.regX||0;\n\t\t\t\tthis._regY = o.regY||0;\n\t\t\t\tthis._spacing = o.spacing||0;\n\t\t\t\tthis._margin = o.margin||0;\n\t\t\t\tthis._numFrames = o.count;\n\t\t\t\tif (this._loadCount == 0) { this._calculateFrames(); }\n\t\t\t}\n\t\n\t\t\t// parse animations:\n\t\t\tthis._animations = [];\n\t\t\tif ((o=data.animations) != null) {\n\t\t\t\tthis._data = {};\n\t\t\t\tvar name;\n\t\t\t\tfor (name in o) {\n\t\t\t\t\tvar anim = {name:name};\n\t\t\t\t\tvar obj = o[name];\n\t\t\t\t\tif (typeof obj == \"number\") { // single frame\n\t\t\t\t\t\ta = anim.frames = [obj];\n\t\t\t\t\t} else if (Array.isArray(obj)) { // simple\n\t\t\t\t\t\tif (obj.length == 1) { anim.frames = [obj[0]]; }\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tanim.speed = obj[3];\n\t\t\t\t\t\t\tanim.next = obj[2];\n\t\t\t\t\t\t\ta = anim.frames = [];\n\t\t\t\t\t\t\tfor (i=obj[0];i<=obj[1];i++) {\n\t\t\t\t\t\t\t\ta.push(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { // complex\n\t\t\t\t\t\tanim.speed = obj.speed;\n\t\t\t\t\t\tanim.next = obj.next;\n\t\t\t\t\t\tvar frames = obj.frames;\n\t\t\t\t\t\ta = anim.frames = (typeof frames == \"number\") ? [frames] : frames.slice(0);\n\t\t\t\t\t}\n\t\t\t\t\tif (anim.next === true || anim.next === undefined) { anim.next = name; } // loop\n\t\t\t\t\tif (anim.next === false || (a.length < 2 && anim.next == name)) { anim.next = null; } // stop\n\t\t\t\t\tif (!anim.speed) { anim.speed = 1; }\n\t\t\t\t\tthis._animations.push(name);\n\t\t\t\t\tthis._data[name] = anim;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleImageLoad\n\t\t * @protected\n\t\t **/\n\t\tp._handleImageLoad = function(src) {\n\t\t\tif (--this._loadCount == 0) {\n\t\t\t\tthis._calculateFrames();\n\t\t\t\tthis.complete = true;\n\t\t\t\tthis.dispatchEvent(\"complete\");\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleImageError\n\t\t * @protected\n\t\t */\n\t\tp._handleImageError = function (src) {\n\t\t\tvar errorEvent = new createjs.Event(\"error\");\n\t\t\terrorEvent.src = src;\n\t\t\tthis.dispatchEvent(errorEvent);\n\t\n\t\t\t// Complete is still dispatched.\n\t\t\tif (--this._loadCount == 0) {\n\t\t\t\tthis.dispatchEvent(\"complete\");\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _calculateFrames\n\t\t * @protected\n\t\t **/\n\t\tp._calculateFrames = function() {\n\t\t\tif (this._frames || this._frameWidth == 0) { return; }\n\t\n\t\t\tthis._frames = [];\n\t\n\t\t\tvar maxFrames = this._numFrames || 100000; // if we go over this, something is wrong.\n\t\t\tvar frameCount = 0, frameWidth = this._frameWidth, frameHeight = this._frameHeight;\n\t\t\tvar spacing = this._spacing, margin = this._margin;\n\t\t\t\n\t\t\timgLoop:\n\t\t\tfor (var i=0, imgs=this._images; i<imgs.length; i++) {\n\t\t\t\tvar img = imgs[i], imgW = img.width, imgH = img.height;\n\t\n\t\t\t\tvar y = margin;\n\t\t\t\twhile (y <= imgH-margin-frameHeight) {\n\t\t\t\t\tvar x = margin;\n\t\t\t\t\twhile (x <= imgW-margin-frameWidth) {\n\t\t\t\t\t\tif (frameCount >= maxFrames) { break imgLoop; }\n\t\t\t\t\t\tframeCount++;\n\t\t\t\t\t\tthis._frames.push({\n\t\t\t\t\t\t\t\timage: img,\n\t\t\t\t\t\t\t\trect: new createjs.Rectangle(x, y, frameWidth, frameHeight),\n\t\t\t\t\t\t\t\tregX: this._regX,\n\t\t\t\t\t\t\t\tregY: this._regY\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tx += frameWidth+spacing;\n\t\t\t\t\t}\n\t\t\t\t\ty += frameHeight+spacing;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._numFrames = frameCount;\n\t\t};\n\t\n\t\n\t\tcreatejs.SpriteSheet = createjs.promote(SpriteSheet, \"EventDispatcher\");\n\t}());\n\t\n\t//##############################################################################\n\t// Graphics.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a\n\t\t * specified context. Note that you can use Graphics without any dependency on the EaselJS framework by calling {{#crossLink \"Graphics/draw\"}}{{/crossLink}}\n\t\t * directly, or it can be used with the {{#crossLink \"Shape\"}}{{/crossLink}} object to draw vector graphics within the\n\t\t * context of an EaselJS display list.\n\t\t *\n\t\t * There are two approaches to working with Graphics object: calling methods on a Graphics instance (the \"Graphics API\"), or\n\t\t * instantiating Graphics command objects and adding them to the graphics queue via {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n\t\t * The former abstracts the latter, simplifying beginning and ending paths, fills, and strokes.\n\t\t *\n\t\t *      var g = new createjs.Graphics();\n\t\t *      g.setStrokeStyle(1);\n\t\t *      g.beginStroke(\"#000000\");\n\t\t *      g.beginFill(\"red\");\n\t\t *      g.drawCircle(0,0,30);\n\t\t *\n\t\t * All drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,\n\t\t * the following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill:\n\t\t *\n\t\t *      myGraphics.beginStroke(\"red\").beginFill(\"blue\").drawRect(20, 20, 100, 50);\n\t\t *\n\t\t * Each graphics API call generates a command object (see below). The last command to be created can be accessed via\n\t\t * {{#crossLink \"Graphics/command:property\"}}{{/crossLink}}:\n\t\t *\n\t\t *      var fillCommand = myGraphics.beginFill(\"red\").command;\n\t\t *      // ... later, update the fill style/color:\n\t\t *      fillCommand.style = \"blue\";\n\t\t *      // or change it to a bitmap fill:\n\t\t *      fillCommand.bitmap(myImage);\n\t\t *\n\t\t * For more direct control of rendering, you can instantiate and append command objects to the graphics queue directly. In this case, you\n\t\t * need to manage path creation manually, and ensure that fill/stroke is applied to a defined path:\n\t\t *\n\t\t *      // start a new path. Graphics.beginCmd is a reusable BeginPath instance:\n\t\t *      myGraphics.append(createjs.Graphics.beginCmd);\n\t\t *      // we need to define the path before applying the fill:\n\t\t *      var circle = new createjs.Graphics.Circle(0,0,30);\n\t\t *      myGraphics.append(circle);\n\t\t *      // fill the path we just defined:\n\t\t *      var fill = new createjs.Graphics.Fill(\"red\");\n\t\t *      myGraphics.append(fill);\n\t\t *\n\t\t * These approaches can be used together, for example to insert a custom command:\n\t\t *\n\t\t *      myGraphics.beginFill(\"red\");\n\t\t *      var customCommand = new CustomSpiralCommand(etc);\n\t\t *      myGraphics.append(customCommand);\n\t\t *      myGraphics.beginFill(\"blue\");\n\t\t *      myGraphics.drawCircle(0, 0, 30);\n\t\t *\n\t\t * See {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more info on creating custom commands.\n\t\t *\n\t\t * <h4>Tiny API</h4>\n\t\t * The Graphics class also includes a \"tiny API\", which is one or two-letter methods that are shortcuts for all of the\n\t\t * Graphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS\n\t\t * to generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected\n\t\t * descriptions in the docs.\n\t\t *\n\t\t * <table>\n\t\t *     <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>\n\t\t *     <tr><td>mt</td><td>{{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} </td>\n\t\t *     <td>lt</td> <td>{{#crossLink \"Graphics/lineTo\"}}{{/crossLink}}</td></tr>\n\t\t *     <tr><td>a/at</td><td>{{#crossLink \"Graphics/arc\"}}{{/crossLink}} / {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} </td>\n\t\t *     <td>bt</td><td>{{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>qt</td><td>{{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} (also curveTo)</td>\n\t\t *     <td>r</td><td>{{#crossLink \"Graphics/rect\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>cp</td><td>{{#crossLink \"Graphics/closePath\"}}{{/crossLink}} </td>\n\t\t *     <td>c</td><td>{{#crossLink \"Graphics/clear\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>f</td><td>{{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} </td>\n\t\t *     <td>lf</td><td>{{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>rf</td><td>{{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} </td>\n\t\t *     <td>bf</td><td>{{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>ef</td><td>{{#crossLink \"Graphics/endFill\"}}{{/crossLink}} </td>\n\t\t *     <td>ss / sd</td><td>{{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} / {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>s</td><td>{{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} </td>\n\t\t *     <td>ls</td><td>{{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>rs</td><td>{{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} </td>\n\t\t *     <td>bs</td><td>{{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>es</td><td>{{#crossLink \"Graphics/endStroke\"}}{{/crossLink}} </td>\n\t\t *     <td>dr</td><td>{{#crossLink \"Graphics/drawRect\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>rr</td><td>{{#crossLink \"Graphics/drawRoundRect\"}}{{/crossLink}} </td>\n\t\t *     <td>rc</td><td>{{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>dc</td><td>{{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} </td>\n\t\t *     <td>de</td><td>{{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} </td></tr>\n\t\t *     <tr><td>dp</td><td>{{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} </td>\n\t\t *     <td>p</td><td>{{#crossLink \"Graphics/decodePath\"}}{{/crossLink}} </td></tr>\n\t\t * </table>\n\t\t *\n\t\t * Here is the above example, using the tiny API instead.\n\t\t *\n\t\t *      myGraphics.s(\"red\").f(\"blue\").r(20, 20, 100, 50);\n\t\t *\n\t\t * @class Graphics\n\t\t * @constructor\n\t\t **/\n\t\tfunction Graphics() {\n\t\n\t\n\t\t// public properties\n\t\t\t/**\n\t\t\t * Holds a reference to the last command that was created or appended. For example, you could retain a reference\n\t\t\t * to a Fill command in order to dynamically update the color later by using:\n\t\t\t *\n\t\t\t * \t\tvar myFill = myGraphics.beginFill(\"red\").command;\n\t\t\t * \t\t// update color later:\n\t\t\t * \t\tmyFill.style = \"yellow\";\n\t\t\t *\n\t\t\t * @property command\n\t\t\t * @type Object\n\t\t\t **/\n\t\t\tthis.command = null;\n\t\n\t\n\t\t// private properties\n\t\t\t/**\n\t\t\t * @property _stroke\n\t\t\t * @protected\n\t\t\t * @type {Stroke}\n\t\t\t **/\n\t\t\tthis._stroke = null;\n\t\n\t\t\t/**\n\t\t\t * @property _strokeStyle\n\t\t\t * @protected\n\t\t\t * @type {StrokeStyle}\n\t\t\t **/\n\t\t\tthis._strokeStyle = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _oldStrokeStyle\n\t\t\t * @protected\n\t\t\t * @type {StrokeStyle}\n\t\t\t **/\n\t\t\tthis._oldStrokeStyle = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _strokeDash\n\t\t\t * @protected\n\t\t\t * @type {StrokeDash}\n\t\t\t **/\n\t\t\tthis._strokeDash = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _oldStrokeDash\n\t\t\t * @protected\n\t\t\t * @type {StrokeDash}\n\t\t\t **/\n\t\t\tthis._oldStrokeDash = null;\n\t\n\t\t\t/**\n\t\t\t * @property _strokeIgnoreScale\n\t\t\t * @protected\n\t\t\t * @type Boolean\n\t\t\t **/\n\t\t\tthis._strokeIgnoreScale = false;\n\t\n\t\t\t/**\n\t\t\t * @property _fill\n\t\t\t * @protected\n\t\t\t * @type {Fill}\n\t\t\t **/\n\t\t\tthis._fill = null;\n\t\n\t\t\t/**\n\t\t\t * @property _instructions\n\t\t\t * @protected\n\t\t\t * @type {Array}\n\t\t\t **/\n\t\t\tthis._instructions = [];\n\t\n\t\t\t/**\n\t\t\t * Indicates the last instruction index that was committed.\n\t\t\t * @property _commitIndex\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t **/\n\t\t\tthis._commitIndex = 0;\n\t\n\t\t\t/**\n\t\t\t * Uncommitted instructions.\n\t\t\t * @property _activeInstructions\n\t\t\t * @protected\n\t\t\t * @type {Array}\n\t\t\t **/\n\t\t\tthis._activeInstructions = [];\n\t\n\t\t\t/**\n\t\t\t * This indicates that there have been changes to the activeInstruction list since the last updateInstructions call.\n\t\t\t * @property _dirty\n\t\t\t * @protected\n\t\t\t * @type {Boolean}\n\t\t\t * @default false\n\t\t\t **/\n\t\t\tthis._dirty = false;\n\t\n\t\t\t/**\n\t\t\t * Index to draw from if a store operation has happened.\n\t\t\t * @property _storeIndex\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis._storeIndex = 0;\n\t\n\t\t// setup:\n\t\t\tthis.clear();\n\t\t}\n\t\tvar p = Graphics.prototype;\n\t\tvar G = Graphics; // shortcut\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// static public methods:\n\t\t/**\n\t\t * Returns a CSS compatible color string based on the specified RGB numeric color values in the format\n\t\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\n\t\t *\n\t\t *      createjs.Graphics.getRGB(50, 100, 150, 0.5);\n\t\t *      // Returns \"rgba(50,100,150,0.5)\"\n\t\t *\n\t\t * It also supports passing a single hex color value as the first param, and an optional alpha value as the second\n\t\t * param. For example,\n\t\t *\n\t\t *      createjs.Graphics.getRGB(0xFF00FF, 0.2);\n\t\t *      // Returns \"rgba(255,0,255,0.2)\"\n\t\t *\n\t\t * @method getRGB\n\t\t * @static\n\t\t * @param {Number} r The red component for the color, between 0 and 0xFF (255).\n\t\t * @param {Number} g The green component for the color, between 0 and 0xFF (255).\n\t\t * @param {Number} b The blue component for the color, between 0 and 0xFF (255).\n\t\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t\t * @return {String} A CSS compatible color string based on the specified RGB numeric color values in the format\n\t\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\".\n\t\t **/\n\t\tGraphics.getRGB = function(r, g, b, alpha) {\n\t\t\tif (r != null && b == null) {\n\t\t\t\talpha = g;\n\t\t\t\tb = r&0xFF;\n\t\t\t\tg = r>>8&0xFF;\n\t\t\t\tr = r>>16&0xFF;\n\t\t\t}\n\t\t\tif (alpha == null) {\n\t\t\t\treturn \"rgb(\"+r+\",\"+g+\",\"+b+\")\";\n\t\t\t} else {\n\t\t\t\treturn \"rgba(\"+r+\",\"+g+\",\"+b+\",\"+alpha+\")\";\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\",\n\t\t * or if alpha is null then in the format \"hsl(360,100,100)\".\n\t\t *\n\t\t *      createjs.Graphics.getHSL(150, 100, 70);\n\t\t *      // Returns \"hsl(150,100,70)\"\n\t\t *\n\t\t * @method getHSL\n\t\t * @static\n\t\t * @param {Number} hue The hue component for the color, between 0 and 360.\n\t\t * @param {Number} saturation The saturation component for the color, between 0 and 100.\n\t\t * @param {Number} lightness The lightness component for the color, between 0 and 100.\n\t\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t\t * @return {String} A CSS compatible color string based on the specified HSL numeric color values in the format\n\t\t * \"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\".\n\t\t **/\n\t\tGraphics.getHSL = function(hue, saturation, lightness, alpha) {\n\t\t\tif (alpha == null) {\n\t\t\t\treturn \"hsl(\"+(hue%360)+\",\"+saturation+\"%,\"+lightness+\"%)\";\n\t\t\t} else {\n\t\t\t\treturn \"hsla(\"+(hue%360)+\",\"+saturation+\"%,\"+lightness+\"%,\"+alpha+\")\";\n\t\t\t}\n\t\t};\n\t\n\t\n\t// static properties:\n\t\t/**\n\t\t * A reusable instance of {{#crossLink \"Graphics/BeginPath\"}}{{/crossLink}} to avoid\n\t\t * unnecessary instantiation.\n\t\t * @property beginCmd\n\t\t * @type {Graphics.BeginPath}\n\t\t * @static\n\t\t **/\n\t\t // defined at the bottom of this file.\n\t\n\t\t/**\n\t\t * Map of Base64 characters to values. Used by {{#crossLink \"Graphics/decodePath\"}}{{/crossLink}}.\n\t\t * @property BASE_64\n\t\t * @static\n\t\t * @final\n\t\t * @readonly\n\t\t * @type {Object}\n\t\t **/\n\t\tGraphics.BASE_64 = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8,\"J\":9,\"K\":10,\"L\":11,\"M\":12,\"N\":13,\"O\":14,\"P\":15,\"Q\":16,\"R\":17,\"S\":18,\"T\":19,\"U\":20,\"V\":21,\"W\":22,\"X\":23,\"Y\":24,\"Z\":25,\"a\":26,\"b\":27,\"c\":28,\"d\":29,\"e\":30,\"f\":31,\"g\":32,\"h\":33,\"i\":34,\"j\":35,\"k\":36,\"l\":37,\"m\":38,\"n\":39,\"o\":40,\"p\":41,\"q\":42,\"r\":43,\"s\":44,\"t\":45,\"u\":46,\"v\":47,\"w\":48,\"x\":49,\"y\":50,\"z\":51,\"0\":52,\"1\":53,\"2\":54,\"3\":55,\"4\":56,\"5\":57,\"6\":58,\"7\":59,\"8\":60,\"9\":61,\"+\":62,\"/\":63};\n\t\n\t\t/**\n\t\t * Maps numeric values for the caps parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n\t\t * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\t\t * \"butt\", 1 to \"round\", and 2 to \"square\".\n\t\t * For example, to set the line caps to \"square\":\n\t\t *\n\t\t *      myGraphics.ss(16, 2);\n\t\t *\n\t\t * @property STROKE_CAPS_MAP\n\t\t * @static\n\t\t * @final\n\t\t * @readonly\n\t\t * @type {Array}\n\t\t **/\n\t\tGraphics.STROKE_CAPS_MAP = [\"butt\", \"round\", \"square\"];\n\t\n\t\t/**\n\t\t * Maps numeric values for the joints parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n\t\t * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\t\t * \"miter\", 1 to \"round\", and 2 to \"bevel\".\n\t\t * For example, to set the line joints to \"bevel\":\n\t\t *\n\t\t *      myGraphics.ss(16, 0, 2);\n\t\t *\n\t\t * @property STROKE_JOINTS_MAP\n\t\t * @static\n\t\t * @final\n\t\t * @readonly\n\t\t * @type {Array}\n\t\t **/\n\t\tGraphics.STROKE_JOINTS_MAP = [\"miter\", \"round\", \"bevel\"];\n\t\n\t\t/**\n\t\t * @property _ctx\n\t\t * @static\n\t\t * @protected\n\t\t * @type {CanvasRenderingContext2D}\n\t\t **/\n\t\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\t\tif (canvas.getContext) {\n\t\t\tGraphics._ctx = canvas.getContext(\"2d\");\n\t\t\tcanvas.width = canvas.height = 1;\n\t\t}\n\t\n\t\n\t// getter / setters:\n\t\t/**\n\t\t * Use the {{#crossLink \"Graphics/instructions:property\"}}{{/crossLink}} property instead.\n\t\t * @method getInstructions\n\t\t * @return {Array}\n\t\t * @deprecated\n\t\t **/\n\t\tp.getInstructions = function() {\n\t\t\tthis._updateInstructions();\n\t\t\treturn this._instructions;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)\n\t\t * Modifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.\n\t\t *\n\t\t * This property is mainly intended for introspection of the instructions (ex. for graphics export).\n\t\t * @property instructions\n\t\t * @type {Array}\n\t\t * @readonly\n\t\t **/\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tinstructions: { get: p.getInstructions }\n\t\t\t});\n\t\t} catch (e) {}\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns true if this Graphics instance has no drawing commands.\n\t\t * @method isEmpty\n\t\t * @return {Boolean} Returns true if this Graphics instance has no drawing commands.\n\t\t **/\n\t\tp.isEmpty = function() {\n\t\t\treturn !(this._instructions.length || this._activeInstructions.length);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns true if the draw was handled (useful for overriding functionality).\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Object} data Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.\n\t\t **/\n\t\tp.draw = function(ctx, data) {\n\t\t\tthis._updateInstructions();\n\t\t\tvar instr = this._instructions;\n\t\t\tfor (var i=this._storeIndex, l=instr.length; i<l; i++) {\n\t\t\t\tinstr[i].exec(ctx, data);\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and\n\t\t * stroke descriptions. Used for <code>DisplayObject.mask</code> to draw the clipping path, for example.\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method drawAsPath\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t **/\n\t\tp.drawAsPath = function(ctx) {\n\t\t\tthis._updateInstructions();\n\t\t\tvar instr, instrs = this._instructions;\n\t\t\tfor (var i=this._storeIndex, l=instrs.length; i<l; i++) {\n\t\t\t\t// the first command is always a beginPath command.\n\t\t\t\tif ((instr = instrs[i]).path !== false) { instr.exec(ctx); }\n\t\t\t}\n\t\t};\n\t\n\t\n\t// public methods that map directly to context 2D calls:\n\t\t/**\n\t\t * Moves the drawing point to the specified position. A tiny API method \"mt\" also exists.\n\t\t * @method moveTo\n\t\t * @param {Number} x The x coordinate the drawing point should move to.\n\t\t * @param {Number} y The y coordinate the drawing point should move to.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t\t * @chainable\n\t\t **/\n\t\tp.moveTo = function(x, y) {\n\t\t\treturn this.append(new G.MoveTo(x,y), true);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws a line from the current drawing point to the specified position, which become the new current drawing\n\t\t * point. Note that you *must* call {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} before the first `lineTo()`.\n\t\t * A tiny API method \"lt\" also exists.\n\t\t *\n\t\t * For detailed information, read the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\n\t\t * whatwg spec</a>.\n\t\t * @method lineTo\n\t\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.lineTo = function(x, y) {\n\t\t\treturn this.append(new G.LineTo(x,y));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws an arc with the specified control points and radius.  For detailed information, read the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\n\t\t * whatwg spec</a>. A tiny API method \"at\" also exists.\n\t\t * @method arcTo\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @param {Number} x2\n\t\t * @param {Number} y2\n\t\t * @param {Number} radius\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.arcTo = function(x1, y1, x2, y2, radius) {\n\t\t\treturn this.append(new G.ArcTo(x1, y1, x2, y2, radius));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For\n\t\t * example, to draw a full circle with a radius of 20 centered at (100, 100):\n\t\t *\n\t\t *      arc(100, 100, 20, 0, Math.PI*2);\n\t\t *\n\t\t * For detailed information, read the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.\n\t\t * A tiny API method \"a\" also exists.\n\t\t * @method arc\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} radius\n\t\t * @param {Number} startAngle Measured in radians.\n\t\t * @param {Number} endAngle Measured in radians.\n\t\t * @param {Boolean} anticlockwise\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\t\treturn this.append(new G.Arc(x, y, radius, startAngle, endAngle, anticlockwise));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\n\t\t * information, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\n\t\t * whatwg spec</a>. A tiny API method \"qt\" also exists.\n\t\t * @method quadraticCurveTo\n\t\t * @param {Number} cpx\n\t\t * @param {Number} cpy\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.quadraticCurveTo = function(cpx, cpy, x, y) {\n\t\t\treturn this.append(new G.QuadraticCurveTo(cpx, cpy, x, y));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x,\n\t\t * cp2y). For detailed information, read the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\n\t\t * whatwg spec</a>. A tiny API method \"bt\" also exists.\n\t\t * @method bezierCurveTo\n\t\t * @param {Number} cp1x\n\t\t * @param {Number} cp1y\n\t\t * @param {Number} cp2x\n\t\t * @param {Number} cp2y\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\t\treturn this.append(new G.BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\n\t\t * For detailed information, read the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\n\t\t * whatwg spec</a>. A tiny API method \"r\" also exists.\n\t\t * @method rect\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w Width of the rectangle\n\t\t * @param {Number} h Height of the rectangle\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.rect = function(x, y, w, h) {\n\t\t\treturn this.append(new G.Rect(x, y, w, h));\n\t\t};\n\t\n\t\t/**\n\t\t * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\n\t\t * since the fill or stroke was last set. A tiny API method \"cp\" also exists.\n\t\t * @method closePath\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.closePath = function() {\n\t\t\treturn this._activeInstructions.length ? this.append(new G.ClosePath()) : this;\n\t\t};\n\t\n\t\n\t// public methods that roughly map to Flash graphics APIs:\n\t\t/**\n\t\t * Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need\n\t\t * to be redefined to draw shapes following a clear call. A tiny API method \"c\" also exists.\n\t\t * @method clear\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.clear = function() {\n\t\t\tthis._instructions.length = this._activeInstructions.length = this._commitIndex = 0;\n\t\t\tthis._strokeStyle = this._oldStrokeStyle = this._stroke = this._fill = this._strokeDash = this._oldStrokeDash = null;\n\t\t\tthis._dirty = this._strokeIgnoreScale = false;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a fill with the specified color. This ends the current sub-path. A tiny API method \"f\" also exists.\n\t\t * @method beginFill\n\t\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t\t * null will result in no fill.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginFill = function(color) {\n\t\t\treturn this._setFill(color ? new G.Fill(color) : null);\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t\t * square to display it:\n\t\t *\n\t\t *      myGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t\t *\n\t\t * A tiny API method \"lf\" also exists.\n\t\t * @method beginLinearGradientFill\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t\t * drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t\t * the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginLinearGradientFill = function(colors, ratios, x0, y0, x1, y1) {\n\t\t\treturn this._setFill(new G.Fill().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to\n\t\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:\n\t\t *\n\t\t *      myGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);\n\t\t *\n\t\t * A tiny API method \"rf\" also exists.\n\t\t * @method beginRadialGradientFill\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginRadialGradientFill = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\t\treturn this._setFill(new G.Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a pattern fill using the specified image. This ends the current sub-path. A tiny API method \"bf\" also\n\t\t * exists.\n\t\t * @method beginBitmapFill\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t\t * will be applied relative to the parent transform.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginBitmapFill = function(image, repetition, matrix) {\n\t\t\treturn this._setFill(new G.Fill(null,matrix).bitmap(image, repetition));\n\t\t};\n\t\n\t\t/**\n\t\t * Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.\n\t\t * A tiny API method \"ef\" also exists.\n\t\t * @method endFill\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.endFill = function() {\n\t\t\treturn this.beginFill();\n\t\t};\n\t\n\t\t/**\n\t\t * Sets the stroke style. Like all drawing methods, this can be chained, so you can define\n\t\t * the stroke style and color in a single line of code like so:\n\t\t *\n\t\t * \tmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");\n\t\t *\n\t\t * A tiny API method \"ss\" also exists.\n\t\t * @method setStrokeStyle\n\t\t * @param {Number} thickness The width of the stroke.\n\t\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t\t * the tiny API.\n\t\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t\t * for use with the tiny API.\n\t\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t\t * controls at what point a mitered joint will be clipped.\n\t\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t\t * of active transformations.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.setStrokeStyle = function(thickness, caps, joints, miterLimit, ignoreScale) {\n\t\t\tthis._updateInstructions(true);\n\t\t\tthis._strokeStyle = this.command = new G.StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale);\n\t\n\t\t\t// ignoreScale lives on Stroke, not StrokeStyle, so we do a little trickery:\n\t\t\tif (this._stroke) { this._stroke.ignoreScale = ignoreScale; }\n\t\t\tthis._strokeIgnoreScale = ignoreScale;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Sets or clears the stroke dash pattern.\n\t\t *\n\t\t * \tmyGraphics.setStrokeDash([20, 10], 0);\n\t\t *\n\t\t * A tiny API method `sd` also exists.\n\t\t * @method setStrokeDash\n\t\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t\t * For example, `[20,10]` would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t\t * Passing null or an empty array will clear the existing stroke dash.\n\t\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.setStrokeDash = function(segments, offset) {\n\t\t\tthis._updateInstructions(true);\n\t\t\tthis._strokeDash = this.command = new G.StrokeDash(segments, offset);\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a stroke with the specified color. This ends the current sub-path. A tiny API method \"s\" also exists.\n\t\t * @method beginStroke\n\t\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t\t * null will result in no stroke.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginStroke = function(color) {\n\t\t\treturn this._setStroke(color ? new G.Stroke(color) : null);\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t\t * square to display it:\n\t\t *\n\t\t *      myGraphics.setStrokeStyle(10).\n\t\t *          beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t\t *\n\t\t * A tiny API method \"ls\" also exists.\n\t\t * @method beginLinearGradientStroke\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginLinearGradientStroke = function(colors, ratios, x0, y0, x1, y1) {\n\t\t\treturn this._setStroke(new G.Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to\n\t\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:\n\t\t *\n\t\t *      myGraphics.setStrokeStyle(10)\n\t\t *          .beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50)\n\t\t *          .drawRect(50, 90, 150, 110);\n\t\t *\n\t\t * A tiny API method \"rs\" also exists.\n\t\t * @method beginRadialGradientStroke\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t\t * to 100%.\n\t\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginRadialGradientStroke = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\t\treturn this._setStroke(new G.Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t\t};\n\t\n\t\t/**\n\t\t * Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,\n\t\t * strokes do not currently support a matrix parameter due to limitations in the canvas API. A tiny API method \"bs\"\n\t\t * also exists.\n\t\t * @method beginBitmapStroke\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.beginBitmapStroke = function(image, repetition) {\n\t\t\t// NOTE: matrix is not supported for stroke because transforms on strokes also affect the drawn stroke width.\n\t\t\treturn this._setStroke(new G.Stroke().bitmap(image, repetition));\n\t\t};\n\t\n\t\t/**\n\t\t * Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.\n\t\t * A tiny API method \"es\" also exists.\n\t\t * @method endStroke\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.endStroke = function() {\n\t\t\treturn this.beginStroke();\n\t\t};\n\t\n\t\t/**\n\t\t * Maps the familiar ActionScript <code>curveTo()</code> method to the functionally similar {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}}\n\t\t * method.\n\t\t * @method quadraticCurveTo\n\t\t * @param {Number} cpx\n\t\t * @param {Number} cpy\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.curveTo = p.quadraticCurveTo;\n\t\n\t\t/**\n\t\t *\n\t\t * Maps the familiar ActionScript <code>drawRect()</code> method to the functionally similar {{#crossLink \"Graphics/rect\"}}{{/crossLink}}\n\t\t * method.\n\t\t * @method drawRect\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w Width of the rectangle\n\t\t * @param {Number} h Height of the rectangle\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.drawRect = p.rect;\n\t\n\t\t/**\n\t\t * Draws a rounded rectangle with all corners with the specified radius.\n\t\t * @method drawRoundRect\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w\n\t\t * @param {Number} h\n\t\t * @param {Number} radius Corner radius.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.drawRoundRect = function(x, y, w, h, radius) {\n\t\t\treturn this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii. A tiny API\n\t\t * method \"rc\" also exists.\n\t\t * @method drawRoundRectComplex\n\t\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t\t * @param {Number} w The width of the round rect.\n\t\t * @param {Number} h The height of the round rect.\n\t\t * @param {Number} radiusTL Top left corner radius.\n\t\t * @param {Number} radiusTR Top right corner radius.\n\t\t * @param {Number} radiusBR Bottom right corner radius.\n\t\t * @param {Number} radiusBL Bottom left corner radius.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.drawRoundRectComplex = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\t\treturn this.append(new G.RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws a circle with the specified radius at (x, y).\n\t\t *\n\t\t *      var g = new createjs.Graphics();\n\t\t *\t    g.setStrokeStyle(1);\n\t\t *\t    g.beginStroke(createjs.Graphics.getRGB(0,0,0));\n\t\t *\t    g.beginFill(createjs.Graphics.getRGB(255,0,0));\n\t\t *\t    g.drawCircle(0,0,3);\n\t\t *\n\t\t *\t    var s = new createjs.Shape(g);\n\t\t *\t\ts.x = 100;\n\t\t *\t\ts.y = 100;\n\t\t *\n\t\t *\t    stage.addChild(s);\n\t\t *\t    stage.update();\n\t\t *\n\t\t * A tiny API method \"dc\" also exists.\n\t\t * @method drawCircle\n\t\t * @param {Number} x x coordinate center point of circle.\n\t\t * @param {Number} y y coordinate center point of circle.\n\t\t * @param {Number} radius Radius of circle.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.drawCircle = function(x, y, radius) {\n\t\t\treturn this.append(new G.Circle(x, y, radius));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}},\n\t\t * except the width and height can be different. A tiny API method \"de\" also exists.\n\t\t * @method drawEllipse\n\t\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t\t * which draws from center.\n\t\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t\t * which draws from the center.\n\t\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t\t * number.\n\t\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.drawEllipse = function(x, y, w, h) {\n\t\t\treturn this.append(new G.Ellipse(x, y, w, h));\n\t\t};\n\t\n\t\t/**\n\t\t * Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of\n\t\t * points. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a\n\t\t * radius of 50:\n\t\t *\n\t\t *      myGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90);\n\t\t *      // Note: -90 makes the first point vertical\n\t\t *\n\t\t * A tiny API method \"dp\" also exists.\n\t\t *\n\t\t * @method drawPolyStar\n\t\t * @param {Number} x Position of the center of the shape.\n\t\t * @param {Number} y Position of the center of the shape.\n\t\t * @param {Number} radius The outer radius of the shape.\n\t\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t\t * directly to the right of the center.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.drawPolyStar = function(x, y, radius, sides, pointSize, angle) {\n\t\t\treturn this.append(new G.PolyStar(x, y, radius, sides, pointSize, angle));\n\t\t};\n\t\n\t\t// TODO: deprecated.\n\t\t/**\n\t\t * Removed in favour of using custom command objects with {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n\t\t * @method inject\n\t\t * @deprecated\n\t\t **/\n\t\n\t\t/**\n\t\t * Appends a graphics command object to the graphics queue. Command objects expose an \"exec\" method\n\t\t * that accepts two parameters: the Context2D to operate on, and an arbitrary data object passed into\n\t\t * {{#crossLink \"Graphics/draw\"}}{{/crossLink}}. The latter will usually be the Shape instance that called draw.\n\t\t *\n\t\t * This method is used internally by Graphics methods, such as drawCircle, but can also be used directly to insert\n\t\t * built-in or custom graphics commands. For example:\n\t\t *\n\t\t * \t\t// attach data to our shape, so we can access it during the draw:\n\t\t * \t\tmyShape.color = \"red\";\n\t\t *\n\t\t * \t\t// append a Circle command object:\n\t\t * \t\tmyShape.graphics.append(new createjs.Graphics.Circle(50, 50, 30));\n\t\t *\n\t\t * \t\t// append a custom command object with an exec method that sets the fill style\n\t\t * \t\t// based on the shape's data, and then fills the circle.\n\t\t * \t\tmyShape.graphics.append({exec:function(ctx, shape) {\n\t\t * \t\t\tctx.fillStyle = shape.color;\n\t\t * \t\t\tctx.fill();\n\t\t * \t\t}});\n\t\t *\n\t\t * @method append\n\t\t * @param {Object} command A graphics command object exposing an \"exec\" method.\n\t\t * @param {boolean} clean The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.append = function(command, clean) {\n\t\t\tthis._activeInstructions.push(command);\n\t\t\tthis.command = command;\n\t\t\tif (!clean) { this._dirty = true; }\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Decodes a compact encoded path string into a series of draw instructions.\n\t\t * This format is not intended to be human readable, and is meant for use by authoring tools.\n\t\t * The format uses a base64 character set, with each character representing 6 bits, to define a series of draw\n\t\t * commands.\n\t\t *\n\t\t * Each command is comprised of a single \"header\" character followed by a variable number of alternating x and y\n\t\t * position values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the\n\t\t * type of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4\n\t\t * indicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the\n\t\t * latter. Bits 5 and 6 are currently unused.\n\t\t *\n\t\t * Following the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)\n\t\t * parameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the\n\t\t * 4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed\n\t\t * by an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the\n\t\t * case of move operations which are absolute, this value is a delta from the previous x or y position (as\n\t\t * appropriate).\n\t\t *\n\t\t * For example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\n\t\t * <br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per\n\t\t * parameter.\n\t\t * <br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits\n\t\t * indicate 1500 tenths of a pixel.\n\t\t * <br />AA - 000000000000. Absolute y position of 0.\n\t\t * <br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\n\t\t * <br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to\n\t\t * provide an absolute position of +150.0px.\n\t\t * <br />AAA - 000000000000000000. A y delta value of 0.\n\t\t *\n\t\t * A tiny API method \"p\" also exists.\n\t\t * @method decodePath\n\t\t * @param {String} str The path string to decode.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.decodePath = function(str) {\n\t\t\tvar instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];\n\t\t\tvar paramCount = [2, 2, 4, 6, 0];\n\t\t\tvar i=0, l=str.length;\n\t\t\tvar params = [];\n\t\t\tvar x=0, y=0;\n\t\t\tvar base64 = Graphics.BASE_64;\n\t\n\t\t\twhile (i<l) {\n\t\t\t\tvar c = str.charAt(i);\n\t\t\t\tvar n = base64[c];\n\t\t\t\tvar fi = n>>3; // highest order bits 1-3 code for operation.\n\t\t\t\tvar f = instructions[fi];\n\t\t\t\t// check that we have a valid instruction & that the unused bits are empty:\n\t\t\t\tif (!f || (n&3)) { throw(\"bad path data (@\"+i+\"): \"+c); }\n\t\t\t\tvar pl = paramCount[fi];\n\t\t\t\tif (!fi) { x=y=0; } // move operations reset the position.\n\t\t\t\tparams.length = 0;\n\t\t\t\ti++;\n\t\t\t\tvar charCount = (n>>2&1)+2;  // 4th header bit indicates number size for this operation.\n\t\t\t\tfor (var p=0; p<pl; p++) {\n\t\t\t\t\tvar num = base64[str.charAt(i)];\n\t\t\t\t\tvar sign = (num>>5) ? -1 : 1;\n\t\t\t\t\tnum = ((num&31)<<6)|(base64[str.charAt(i+1)]);\n\t\t\t\t\tif (charCount == 3) { num = (num<<6)|(base64[str.charAt(i+2)]); }\n\t\t\t\t\tnum = sign*num/10;\n\t\t\t\t\tif (p%2) { x = (num += x); }\n\t\t\t\t\telse { y = (num += y); }\n\t\t\t\t\tparams[p] = num;\n\t\t\t\t\ti += charCount;\n\t\t\t\t}\n\t\t\t\tf.apply(this,params);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Stores all graphics commands so they won't be executed in future draws. Calling store() a second time adds to\n\t\t * the existing store. This also affects `drawAsPath()`.\n\t\t *\n\t\t * This is useful in cases where you are creating vector graphics in an iterative manner (ex. generative art), so\n\t\t * that only new graphics need to be drawn (which can provide huge performance benefits), but you wish to retain all\n\t\t * of the vector instructions for later use (ex. scaling, modifying, or exporting).\n\t\t *\n\t\t * Note that calling store() will force the active path (if any) to be ended in a manner similar to changing\n\t\t * the fill or stroke.\n\t\t *\n\t\t * For example, consider a application where the user draws lines with the mouse. As each line segment (or collection of\n\t\t * segments) are added to a Shape, it can be rasterized using {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}},\n\t\t * and then stored, so that it can be redrawn at a different scale when the application is resized, or exported to SVG.\n\t\t *\n\t\t * \t// set up cache:\n\t\t * \tmyShape.cache(0,0,500,500,scale);\n\t\t *\n\t\t * \t// when the user drags, draw a new line:\n\t\t * \tmyShape.graphics.moveTo(oldX,oldY).lineTo(newX,newY);\n\t\t * \t// then draw it into the existing cache:\n\t\t * \tmyShape.updateCache(\"source-over\");\n\t\t * \t// store the new line, so it isn't redrawn next time:\n\t\t * \tmyShape.store();\n\t\t *\n\t\t * \t// then, when the window resizes, we can re-render at a different scale:\n\t\t * \t// first, unstore all our lines:\n\t\t * \tmyShape.unstore();\n\t\t * \t// then cache using the new scale:\n\t\t * \tmyShape.cache(0,0,500,500,newScale);\n\t\t * \t// finally, store the existing commands again:\n\t\t * \tmyShape.store();\n\t\t *\n\t\t * @method store\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.store = function() {\n\t\t\tthis._updateInstructions(true);\n\t\t\tthis._storeIndex = this._instructions.length;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Unstores any graphics commands that were previously stored using {{#crossLink \"Graphics/store\"}}{{/crossLink}}\n\t\t * so that they will be executed in subsequent draw calls.\n\t\t *\n\t\t * @method unstore\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.unstore = function() {\n\t\t\tthis._storeIndex = 0;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.\n\t\t * @method clone\n\t\t * @return {Graphics} A clone of the current Graphics instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\tvar o = new Graphics();\n\t\t\to.command = this.command;\n\t\t\to._stroke = this._stroke;\n\t\t\to._strokeStyle = this._strokeStyle;\n\t\t\to._strokeDash = this._strokeDash;\n\t\t\to._strokeIgnoreScale = this._strokeIgnoreScale;\n\t\t\to._fill = this._fill;\n\t\t\to._instructions = this._instructions.slice();\n\t\t\to._commitIndex = this._commitIndex;\n\t\t\to._activeInstructions = this._activeInstructions.slice();\n\t\t\to._dirty = this._dirty;\n\t\t\to._storeIndex = this._storeIndex;\n\t\t\treturn o;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Graphics]\";\n\t\t};\n\t\n\t\n\t// tiny API:\n\t\t/**\n\t\t * Shortcut to moveTo.\n\t\t * @method mt\n\t\t * @param {Number} x The x coordinate the drawing point should move to.\n\t\t * @param {Number} y The y coordinate the drawing point should move to.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.mt = p.moveTo;\n\t\n\t\t/**\n\t\t * Shortcut to lineTo.\n\t\t * @method lt\n\t\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.lt = p.lineTo;\n\t\n\t\t/**\n\t\t * Shortcut to arcTo.\n\t\t * @method at\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @param {Number} x2\n\t\t * @param {Number} y2\n\t\t * @param {Number} radius\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.at = p.arcTo;\n\t\n\t\t/**\n\t\t * Shortcut to bezierCurveTo.\n\t\t * @method bt\n\t\t * @param {Number} cp1x\n\t\t * @param {Number} cp1y\n\t\t * @param {Number} cp2x\n\t\t * @param {Number} cp2y\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.bt = p.bezierCurveTo;\n\t\n\t\t/**\n\t\t * Shortcut to quadraticCurveTo / curveTo.\n\t\t * @method qt\n\t\t * @param {Number} cpx\n\t\t * @param {Number} cpy\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @protected\n\t\t * @chainable\n\t\t **/\n\t\tp.qt = p.quadraticCurveTo;\n\t\n\t\t/**\n\t\t * Shortcut to arc.\n\t\t * @method a\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} radius\n\t\t * @param {Number} startAngle Measured in radians.\n\t\t * @param {Number} endAngle Measured in radians.\n\t\t * @param {Boolean} anticlockwise\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @protected\n\t\t * @chainable\n\t\t **/\n\t\tp.a = p.arc;\n\t\n\t\t/**\n\t\t * Shortcut to rect.\n\t\t * @method r\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w Width of the rectangle\n\t\t * @param {Number} h Height of the rectangle\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.r = p.rect;\n\t\n\t\t/**\n\t\t * Shortcut to closePath.\n\t\t * @method cp\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.cp = p.closePath;\n\t\n\t\t/**\n\t\t * Shortcut to clear.\n\t\t * @method c\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.c = p.clear;\n\t\n\t\t/**\n\t\t * Shortcut to beginFill.\n\t\t * @method f\n\t\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t\t * null will result in no fill.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.f = p.beginFill;\n\t\n\t\t/**\n\t\t * Shortcut to beginLinearGradientFill.\n\t\t * @method lf\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t\t * drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t\t * the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.lf = p.beginLinearGradientFill;\n\t\n\t\t/**\n\t\t * Shortcut to beginRadialGradientFill.\n\t\t * @method rf\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.rf = p.beginRadialGradientFill;\n\t\n\t\t/**\n\t\t * Shortcut to beginBitmapFill.\n\t\t * @method bf\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t\t * as the pattern.\n\t\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t\t * will be applied relative to the parent transform.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.bf = p.beginBitmapFill;\n\t\n\t\t/**\n\t\t * Shortcut to endFill.\n\t\t * @method ef\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.ef = p.endFill;\n\t\n\t\t/**\n\t\t * Shortcut to setStrokeStyle.\n\t\t * @method ss\n\t\t * @param {Number} thickness The width of the stroke.\n\t\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t\t * the tiny API.\n\t\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t\t * for use with the tiny API.\n\t\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t\t * controls at what point a mitered joint will be clipped.\n\t\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t\t * of active transformations.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.ss = p.setStrokeStyle;\n\t\t\n\t\t/**\n\t\t * Shortcut to setStrokeDash.\n\t\t * @method sd\n\t\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t\t * For example, [20,10] would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t\t * Passing null or an empty array will clear any existing dash.\n\t\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.sd = p.setStrokeDash;\n\t\n\t\t/**\n\t\t * Shortcut to beginStroke.\n\t\t * @method s\n\t\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t\t * null will result in no stroke.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.s = p.beginStroke;\n\t\n\t\t/**\n\t\t * Shortcut to beginLinearGradientStroke.\n\t\t * @method ls\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.ls = p.beginLinearGradientStroke;\n\t\n\t\t/**\n\t\t * Shortcut to beginRadialGradientStroke.\n\t\t * @method rs\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t\t * to 100%.\n\t\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.rs = p.beginRadialGradientStroke;\n\t\n\t\t/**\n\t\t * Shortcut to beginBitmapStroke.\n\t\t * @method bs\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t\t * as the pattern.\n\t\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.bs = p.beginBitmapStroke;\n\t\n\t\t/**\n\t\t * Shortcut to endStroke.\n\t\t * @method es\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.es = p.endStroke;\n\t\n\t\t/**\n\t\t * Shortcut to drawRect.\n\t\t * @method dr\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w Width of the rectangle\n\t\t * @param {Number} h Height of the rectangle\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.dr = p.drawRect;\n\t\n\t\t/**\n\t\t * Shortcut to drawRoundRect.\n\t\t * @method rr\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w\n\t\t * @param {Number} h\n\t\t * @param {Number} radius Corner radius.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.rr = p.drawRoundRect;\n\t\n\t\t/**\n\t\t * Shortcut to drawRoundRectComplex.\n\t\t * @method rc\n\t\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t\t * @param {Number} w The width of the round rect.\n\t\t * @param {Number} h The height of the round rect.\n\t\t * @param {Number} radiusTL Top left corner radius.\n\t\t * @param {Number} radiusTR Top right corner radius.\n\t\t * @param {Number} radiusBR Bottom right corner radius.\n\t\t * @param {Number} radiusBL Bottom left corner radius.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.rc = p.drawRoundRectComplex;\n\t\n\t\t/**\n\t\t * Shortcut to drawCircle.\n\t\t * @method dc\n\t\t * @param {Number} x x coordinate center point of circle.\n\t\t * @param {Number} y y coordinate center point of circle.\n\t\t * @param {Number} radius Radius of circle.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.dc = p.drawCircle;\n\t\n\t\t/**\n\t\t * Shortcut to drawEllipse.\n\t\t * @method de\n\t\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t\t * which draws from center.\n\t\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t\t * which draws from the center.\n\t\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t\t * number.\n\t\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.de = p.drawEllipse;\n\t\n\t\t/**\n\t\t * Shortcut to drawPolyStar.\n\t\t * @method dp\n\t\t * @param {Number} x Position of the center of the shape.\n\t\t * @param {Number} y Position of the center of the shape.\n\t\t * @param {Number} radius The outer radius of the shape.\n\t\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t\t * directly to the right of the center.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.dp = p.drawPolyStar;\n\t\n\t\t/**\n\t\t * Shortcut to decodePath.\n\t\t * @method p\n\t\t * @param {String} str The path string to decode.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t **/\n\t\tp.p = p.decodePath;\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _updateInstructions\n\t\t * @param commit\n\t\t * @protected\n\t\t **/\n\t\tp._updateInstructions = function(commit) {\n\t\t\tvar instr = this._instructions, active = this._activeInstructions, commitIndex = this._commitIndex;\n\t\n\t\t\tif (this._dirty && active.length) {\n\t\t\t\tinstr.length = commitIndex; // remove old, uncommitted commands\n\t\t\t\tinstr.push(Graphics.beginCmd);\n\t\n\t\t\t\tvar l = active.length, ll = instr.length;\n\t\t\t\tinstr.length = ll+l;\n\t\t\t\tfor (var i=0; i<l; i++) { instr[i+ll] = active[i]; }\n\t\n\t\t\t\tif (this._fill) { instr.push(this._fill); }\n\t\t\t\tif (this._stroke) {\n\t\t\t\t\t// doesn't need to be re-applied if it hasn't changed.\n\t\t\t\t\tif (this._strokeDash !== this._oldStrokeDash) {\n\t\t\t\t\t\tthis._oldStrokeDash = this._strokeDash;\n\t\t\t\t\t\tinstr.push(this._strokeDash);\n\t\t\t\t\t}\n\t\t\t\t\tif (this._strokeStyle !== this._oldStrokeStyle) {\n\t\t\t\t\t\tthis._oldStrokeStyle = this._strokeStyle;\n\t\t\t\t\t\tinstr.push(this._strokeStyle);\n\t\t\t\t\t}\n\t\t\t\t\tinstr.push(this._stroke);\n\t\t\t\t}\n\t\n\t\t\t\tthis._dirty = false;\n\t\t\t}\n\t\n\t\t\tif (commit) {\n\t\t\t\tactive.length = 0;\n\t\t\t\tthis._commitIndex = instr.length;\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _setFill\n\t\t * @param fill\n\t\t * @protected\n\t\t **/\n\t\tp._setFill = function(fill) {\n\t\t\tthis._updateInstructions(true);\n\t\t\tthis.command = this._fill = fill;\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * @method _setStroke\n\t\t * @param stroke\n\t\t * @protected\n\t\t **/\n\t\tp._setStroke = function(stroke) {\n\t\t\tthis._updateInstructions(true);\n\t\t\tif (this.command = this._stroke = stroke) {\n\t\t\t\tstroke.ignoreScale = this._strokeIgnoreScale;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\t\n\t// Command Objects:\n\t\t/**\n\t\t * @namespace Graphics\n\t\t */\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/lineTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class LineTo\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.LineTo = function(x, y) {\n\t\t\tthis.x = x; this.y = y;\n\t\t}).prototype.exec = function(ctx) { ctx.lineTo(this.x,this.y); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class MoveTo\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx\n\t\t */\n\t\t(G.MoveTo = function(x, y) {\n\t\t\tthis.x = x; this.y = y;\n\t\t}).prototype.exec = function(ctx) { ctx.moveTo(this.x, this.y); };\n\t\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class ArcTo\n\t\t * @constructor\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @param {Number} x2\n\t\t * @param {Number} y2\n\t\t * @param {Number} radius\n\t\t **/\n\t\t/**\n\t\t * @property x1\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y1\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property x2\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y2\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.ArcTo = function(x1, y1, x2, y2, radius) {\n\t\t\tthis.x1 = x1; this.y1 = y1;\n\t\t\tthis.x2 = x2; this.y2 = y2;\n\t\t\tthis.radius = radius;\n\t\t}).prototype.exec = function(ctx) { ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/arc\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class Arc\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} radius\n\t\t * @param {Number} startAngle\n\t\t * @param {Number} endAngle\n\t\t * @param {Number} anticlockwise\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property startAngle\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property endAngle\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property anticlockwise\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.Arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\t\tthis.x = x; this.y = y;\n\t\t\tthis.radius = radius;\n\t\t\tthis.startAngle = startAngle; this.endAngle = endAngle;\n\t\t\tthis.anticlockwise = !!anticlockwise;\n\t\t}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class QuadraticCurveTo\n\t\t * @constructor\n\t\t * @param {Number} cpx\n\t\t * @param {Number} cpy\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t **/\n\t\t/**\n\t\t * @property cpx\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property cpy\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.QuadraticCurveTo = function(cpx, cpy, x, y) {\n\t\t\tthis.cpx = cpx; this.cpy = cpy;\n\t\t\tthis.x = x; this.y = y;\n\t\t}).prototype.exec = function(ctx) { ctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class BezierCurveTo\n\t\t * @constructor\n\t\t * @param {Number} cp1x\n\t\t * @param {Number} cp1y\n\t\t * @param {Number} cp2x\n\t\t * @param {Number} cp2y\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t **/\n\t\t/**\n\t\t * @property cp1x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property cp1y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property cp2x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property cp2y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\t\tthis.cp1x = cp1x; this.cp1y = cp1y;\n\t\t\tthis.cp2x = cp2x; this.cp2y = cp2y;\n\t\t\tthis.x = x; this.y = y;\n\t\t}).prototype.exec = function(ctx) { ctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/rect\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class Rect\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w\n\t\t * @param {Number} h\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property w\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property h\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.Rect = function(x, y, w, h) {\n\t\t\tthis.x = x; this.y = y;\n\t\t\tthis.w = w; this.h = h;\n\t\t}).prototype.exec = function(ctx) { ctx.rect(this.x, this.y, this.w, this.h); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/closePath\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class ClosePath\n\t\t * @constructor\n\t\t **/\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.ClosePath = function() {\n\t\t}).prototype.exec = function(ctx) { ctx.closePath(); };\n\t\n\t\t/**\n\t\t * Graphics command object to begin a new path. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class BeginPath\n\t\t * @constructor\n\t\t **/\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.BeginPath = function() {\n\t\t}).prototype.exec = function(ctx) { ctx.beginPath(); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class Fill\n\t\t * @constructor\n\t\t * @param {Object} style A valid Context2D fillStyle.\n\t\t * @param {Matrix2D} matrix\n\t\t **/\n\t\t/**\n\t\t * A valid Context2D fillStyle.\n\t\t * @property style\n\t\t * @type Object\n\t\t */\n\t\t/**\n\t\t * @property matrix\n\t\t * @type Matrix2D\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\tp = (G.Fill = function(style, matrix) {\n\t\t\tthis.style = style;\n\t\t\tthis.matrix = matrix;\n\t\t}).prototype;\n\t\tp.exec = function(ctx) {\n\t\t\tif (!this.style) { return; }\n\t\t\tctx.fillStyle = this.style;\n\t\t\tvar mtx = this.matrix;\n\t\t\tif (mtx) { ctx.save(); ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty); }\n\t\t\tctx.fill();\n\t\t\tif (mtx) { ctx.restore(); }\n\t\t};\n\t\t/**\n\t\t * Creates a linear gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t\t * See {{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} for more information.\n\t\t * @method linearGradient\n\t\t * @param {Array} colors\n\t\t *\n\t\t * @param {Array} ratios\n\t\t * @param {Number} x0\n\t\t * @param {Number} y0\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t\t */\n\t\tp.linearGradient = function(colors, ratios, x0, y0, x1, y1) {\n\t\t\tvar o = this.style =  Graphics._ctx.createLinearGradient(x0, y0, x1, y1);\n\t\t\tfor (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\t\to.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, x1:x1, y1:y1, type:\"linear\"};\n\t\t\treturn this;\n\t\t};\n\t\t/**\n\t\t * Creates a radial gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t\t * See {{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} for more information.\n\t\t * @method radialGradient\n\t\t * @param {Array} colors\n\t\t * @param {Array} ratios\n\t\t * @param {Number} x0\n\t\t * @param {Number} y0\n\t\t * @param {Number} r0\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @param {Number} r1\n\t\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t\t */\n\t\tp.radialGradient = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\t\tvar o = this.style =  Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n\t\t\tfor (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\t\to.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, r0:r0, x1:x1, y1:y1, r1:r1, type:\"radial\"};\n\t\t\treturn this;\n\t\t};\n\t\t/**\n\t\t * Creates a bitmap fill style and assigns it to the {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t\t * See {{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} for more information.\n\t\t * @method bitmap\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image  Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t\t */\n\t\tp.bitmap = function(image, repetition) {\n\t\t\tif (image.naturalWidth || image.getContext || image.readyState >= 2) {\n\t\t\t\tvar o = this.style = Graphics._ctx.createPattern(image, repetition || \"\");\n\t\t\t\to.props = {image: image, repetition: repetition, type: \"bitmap\"};\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\t\tp.path = false;\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class Stroke\n\t\t * @constructor\n\t\t * @param {Object} style A valid Context2D fillStyle.\n\t\t * @param {Boolean} ignoreScale\n\t\t **/\n\t\t/**\n\t\t * A valid Context2D strokeStyle.\n\t\t * @property style\n\t\t * @type Object\n\t\t */\n\t\t/**\n\t\t * @property ignoreScale\n\t\t * @type Boolean\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\tp = (G.Stroke = function(style, ignoreScale) {\n\t\t\tthis.style = style;\n\t\t\tthis.ignoreScale = ignoreScale;\n\t\t}).prototype;\n\t\tp.exec = function(ctx) {\n\t\t\tif (!this.style) { return; }\n\t\t\tctx.strokeStyle = this.style;\n\t\t\tif (this.ignoreScale) { ctx.save(); ctx.setTransform(1,0,0,1,0,0); }\n\t\t\tctx.stroke();\n\t\t\tif (this.ignoreScale) { ctx.restore(); }\n\t\t};\n\t\t/**\n\t\t * Creates a linear gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t\t * See {{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} for more information.\n\t\t * @method linearGradient\n\t\t * @param {Array} colors\n\t\t * @param {Array} ratios\n\t\t * @param {Number} x0\n\t\t * @param {Number} y0\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t\t */\n\t\tp.linearGradient = G.Fill.prototype.linearGradient;\n\t\t/**\n\t\t * Creates a radial gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t\t * See {{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} for more information.\n\t\t * @method radialGradient\n\t\t * @param {Array} colors\n\t\t * @param {Array} ratios\n\t\t * @param {Number} x0\n\t\t * @param {Number} y0\n\t\t * @param {Number} r0\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @param {Number} r1\n\t\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t\t */\n\t\tp.radialGradient = G.Fill.prototype.radialGradient;\n\t\t/**\n\t\t * Creates a bitmap fill style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t\t * See {{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} for more information.\n\t\t * @method bitmap\n\t\t * @param {HTMLImageElement} image\n\t\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t\t */\n\t\tp.bitmap = G.Fill.prototype.bitmap;\n\t\tp.path = false;\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class StrokeStyle\n\t\t * @constructor\n\t\t * @param {Number} width\n\t\t * @param {String} [caps=butt]\n\t\t * @param {String} [joints=miter]\n\t\t * @param {Number} [miterLimit=10]\n\t\t * @param {Boolean} [ignoreScale=false]\n\t\t **/\n\t\t/**\n\t\t * @property width\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * One of: butt, round, square\n\t\t * @property caps\n\t\t * @type String\n\t\t */\n\t\t/**\n\t\t * One of: round, bevel, miter\n\t\t * @property joints\n\t\t * @type String\n\t\t */\n\t\t/**\n\t\t * @property miterLimit\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\tp = (G.StrokeStyle = function(width, caps, joints, miterLimit, ignoreScale) {\n\t\t\tthis.width = width;\n\t\t\tthis.caps = caps;\n\t\t\tthis.joints = joints;\n\t\t\tthis.miterLimit = miterLimit;\n\t\t\tthis.ignoreScale = ignoreScale;\n\t\t}).prototype;\n\t\tp.exec = function(ctx) {\n\t\t\tctx.lineWidth = (this.width == null ? \"1\" : this.width);\n\t\t\tctx.lineCap = (this.caps == null ? \"butt\" : (isNaN(this.caps) ? this.caps : Graphics.STROKE_CAPS_MAP[this.caps]));\n\t\t\tctx.lineJoin = (this.joints == null ? \"miter\" : (isNaN(this.joints) ? this.joints : Graphics.STROKE_JOINTS_MAP[this.joints]));\n\t\t\tctx.miterLimit = (this.miterLimit == null ? \"10\" : this.miterLimit);\n\t\t\tctx.ignoreScale = (this.ignoreScale == null ? false : this.ignoreScale);\n\t\t};\n\t\tp.path = false;\n\t\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class StrokeDash\n\t\t * @constructor\n\t\t * @param {Array} [segments]\n\t\t * @param {Number} [offset=0]\n\t\t **/\n\t\t/**\n\t\t * @property segments\n\t\t * @type Array\n\t\t */\n\t\t/**\n\t\t * @property offset\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.StrokeDash = function(segments, offset) {\n\t\t\tthis.segments = segments;\n\t\t\tthis.offset = offset||0;\n\t\t}).prototype.exec = function(ctx) {\n\t\t\tif (ctx.setLineDash) { // feature detection.\n\t\t\t\tctx.setLineDash(this.segments|| G.StrokeDash.EMPTY_SEGMENTS); // instead of [] to reduce churn.\n\t\t\t\tctx.lineDashOffset = this.offset||0;\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * The default value for segments (ie. no dash).\n\t\t * @property EMPTY_SEGMENTS\n\t\t * @static\n\t\t * @final\n\t\t * @readonly\n\t\t * @protected\n\t\t * @type {Array}\n\t\t **/\n\t\tG.StrokeDash.EMPTY_SEGMENTS = [];\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class RoundRect\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w\n\t\t * @param {Number} h\n\t\t * @param {Number} radiusTL\n\t\t * @param {Number} radiusTR\n\t\t * @param {Number} radiusBR\n\t\t * @param {Number} radiusBL\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property w\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property h\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radiusTL\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radiusTR\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radiusBR\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radiusBL\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.RoundRect = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\t\tthis.x = x; this.y = y;\n\t\t\tthis.w = w; this.h = h;\n\t\t\tthis.radiusTL = radiusTL; this.radiusTR = radiusTR;\n\t\t\tthis.radiusBR = radiusBR; this.radiusBL = radiusBL;\n\t\t}).prototype.exec = function(ctx) {\n\t\t\tvar max = (w<h?w:h)/2;\n\t\t\tvar mTL=0, mTR=0, mBR=0, mBL=0;\n\t\t\tvar x = this.x, y = this.y, w = this.w, h = this.h;\n\t\t\tvar rTL = this.radiusTL, rTR = this.radiusTR, rBR = this.radiusBR, rBL = this.radiusBL;\n\t\n\t\t\tif (rTL < 0) { rTL *= (mTL=-1); }\n\t\t\tif (rTL > max) { rTL = max; }\n\t\t\tif (rTR < 0) { rTR *= (mTR=-1); }\n\t\t\tif (rTR > max) { rTR = max; }\n\t\t\tif (rBR < 0) { rBR *= (mBR=-1); }\n\t\t\tif (rBR > max) { rBR = max; }\n\t\t\tif (rBL < 0) { rBL *= (mBL=-1); }\n\t\t\tif (rBL > max) { rBL = max; }\n\t\n\t\t\tctx.moveTo(x+w-rTR, y);\n\t\t\tctx.arcTo(x+w+rTR*mTR, y-rTR*mTR, x+w, y+rTR, rTR);\n\t\t\tctx.lineTo(x+w, y+h-rBR);\n\t\t\tctx.arcTo(x+w+rBR*mBR, y+h+rBR*mBR, x+w-rBR, y+h, rBR);\n\t\t\tctx.lineTo(x+rBL, y+h);\n\t\t\tctx.arcTo(x-rBL*mBL, y+h+rBL*mBL, x, y+h-rBL, rBL);\n\t\t\tctx.lineTo(x, y+rTL);\n\t\t\tctx.arcTo(x-rTL*mTL, y-rTL*mTL, x+rTL, y, rTL);\n\t\t\tctx.closePath();\n\t\t};\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class Circle\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} radius\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.Circle = function(x, y, radius) {\n\t\t\tthis.x = x; this.y = y;\n\t\t\tthis.radius = radius;\n\t\t}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2); };\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class Ellipse\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w\n\t\t * @param {Number} h\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property w\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property h\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.Ellipse = function(x, y, w, h) {\n\t\t\tthis.x = x; this.y = y;\n\t\t\tthis.w = w; this.h = h;\n\t\t}).prototype.exec = function(ctx) {\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar w = this.w, h = this.h;\n\t\n\t\t\tvar k = 0.5522848;\n\t\t\tvar ox = (w / 2) * k;\n\t\t\tvar oy = (h / 2) * k;\n\t\t\tvar xe = x + w;\n\t\t\tvar ye = y + h;\n\t\t\tvar xm = x + w / 2;\n\t\t\tvar ym = y + h / 2;\n\t\n\t\t\tctx.moveTo(x, ym);\n\t\t\tctx.bezierCurveTo(x, ym-oy, xm-ox, y, xm, y);\n\t\t\tctx.bezierCurveTo(xm+ox, y, xe, ym-oy, xe, ym);\n\t\t\tctx.bezierCurveTo(xe, ym+oy, xm+ox, ye, xm, ye);\n\t\t\tctx.bezierCurveTo(xm-ox, ye, x, ym+oy, x, ym);\n\t\t};\n\t\n\t\t/**\n\t\t * Graphics command object. See {{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t\t * @class PolyStar\n\t\t * @constructor\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} radius\n\t\t * @param {Number} sides\n\t\t * @param {Number} pointSize\n\t\t * @param {Number} angle\n\t\t **/\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property sides\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property pointSize\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * @property angle\n\t\t * @type Number\n\t\t */\n\t\t/**\n\t\t * Execute the Graphics command in the provided Canvas context.\n\t\t * @method exec\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t\t */\n\t\t(G.PolyStar = function(x, y, radius, sides, pointSize, angle) {\n\t\t\tthis.x = x; this.y = y;\n\t\t\tthis.radius = radius;\n\t\t\tthis.sides = sides;\n\t\t\tthis.pointSize = pointSize;\n\t\t\tthis.angle = angle;\n\t\t}).prototype.exec = function(ctx) {\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar radius = this.radius;\n\t\t\tvar angle = (this.angle||0)/180*Math.PI;\n\t\t\tvar sides = this.sides;\n\t\t\tvar ps = 1-(this.pointSize||0);\n\t\t\tvar a = Math.PI/sides;\n\t\n\t\t\tctx.moveTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t\t\tfor (var i=0; i<sides; i++) {\n\t\t\t\tangle += a;\n\t\t\t\tif (ps != 1) {\n\t\t\t\t\tctx.lineTo(x+Math.cos(angle)*radius*ps, y+Math.sin(angle)*radius*ps);\n\t\t\t\t}\n\t\t\t\tangle += a;\n\t\t\t\tctx.lineTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t};\n\t\n\t\t// docced above.\n\t\tGraphics.beginCmd = new G.BeginPath(); // so we don't have to instantiate multiple instances.\n\t\n\t\n\t\tcreatejs.Graphics = Graphics;\n\t}());\n\t\n\t//##############################################################################\n\t// DisplayObject.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\n\t\t * {{#crossLink \"Container\"}}{{/crossLink}}, {{#crossLink \"Bitmap\"}}{{/crossLink}}, and {{#crossLink \"Shape\"}}{{/crossLink}}.\n\t\t * DisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and\n\t\t * methods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),\n\t\t * caching, and mouse handlers.\n\t\t * @class DisplayObject\n\t\t * @extends EventDispatcher\n\t\t * @constructor\n\t\t **/\n\t\tfunction DisplayObject() {\n\t\t\tthis.EventDispatcher_constructor();\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.\n\t\t\t * @property alpha\n\t\t\t * @type {Number}\n\t\t\t * @default 1\n\t\t\t **/\n\t\t\tthis.alpha = 1;\n\t\t\n\t\t\t/**\n\t\t\t * If a cache is active, this returns the canvas that holds the cached version of this display object. See {{#crossLink \"cache\"}}{{/crossLink}}\n\t\t\t * for more information.\n\t\t\t * @property cacheCanvas\n\t\t\t * @type {HTMLCanvasElement | Object}\n\t\t\t * @default null\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.cacheCanvas = null;\n\t\t\n\t\t\t/**\n\t\t\t * Returns an ID number that uniquely identifies the current cache for this display object. This can be used to\n\t\t\t * determine if the cache has changed since a previous check.\n\t\t\t * @property cacheID\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t */\n\t\t\tthis.cacheID = 0;\n\t\t\n\t\t\t/**\n\t\t\t * Unique ID for this display object. Makes display objects easier for some uses.\n\t\t\t * @property id\n\t\t\t * @type {Number}\n\t\t\t * @default -1\n\t\t\t **/\n\t\t\tthis.id = createjs.UID.get();\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether to include this object when running mouse interactions. Setting this to `false` for children\n\t\t\t * of a {{#crossLink \"Container\"}}{{/crossLink}} will cause events on the Container to not fire when that child is\n\t\t\t * clicked. Setting this property to `false` does not prevent the {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}\n\t\t\t * method from returning the child.\n\t\t\t *\n\t\t\t * <strong>Note:</strong> In EaselJS 0.7.0, the mouseEnabled property will not work properly with nested Containers. Please\n\t\t\t * check out the latest NEXT version in <a href=\"https://github.com/CreateJS/EaselJS/tree/master/lib\">GitHub</a> for an updated version with this issue resolved. The fix will be\n\t\t\t * provided in the next release of EaselJS.\n\t\t\t * @property mouseEnabled\n\t\t\t * @type {Boolean}\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.mouseEnabled = true;\n\t\t\t\n\t\t\t/**\n\t\t\t * If false, the tick will not run on this display object (or its children). This can provide some performance benefits.\n\t\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n\t\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n\t\t\t * @property tickEnabled\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.tickEnabled = true;\n\t\t\n\t\t\t/**\n\t\t\t * An optional name for this display object. Included in {{#crossLink \"DisplayObject/toString\"}}{{/crossLink}} . Useful for\n\t\t\t * debugging.\n\t\t\t * @property name\n\t\t\t * @type {String}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.name = null;\n\t\t\n\t\t\t/**\n\t\t\t * A reference to the {{#crossLink \"Container\"}}{{/crossLink}} or {{#crossLink \"Stage\"}}{{/crossLink}} object that\n\t\t\t * contains this display object, or null if it has not been added\n\t\t\t * to one.\n\t\t\t * @property parent\n\t\t\t * @final\n\t\t\t * @type {Container}\n\t\t\t * @default null\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.parent = null;\n\t\t\n\t\t\t/**\n\t\t\t * The left offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate\n\t\t\t * around its center, you would set regX and {{#crossLink \"DisplayObject/regY:property\"}}{{/crossLink}} to 50.\n\t\t\t * @property regX\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.regX = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\n\t\t\t * its center, you would set {{#crossLink \"DisplayObject/regX:property\"}}{{/crossLink}} and regY to 50.\n\t\t\t * @property regY\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.regY = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The rotation in degrees for this display object.\n\t\t\t * @property rotation\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.rotation = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\n\t\t\t * object to twice its nominal width. To horizontally flip an object, set the scale to a negative number.\n\t\t\t * @property scaleX\n\t\t\t * @type {Number}\n\t\t\t * @default 1\n\t\t\t **/\n\t\t\tthis.scaleX = 1;\n\t\t\n\t\t\t/**\n\t\t\t * The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\n\t\t\t * object to half its nominal height. To vertically flip an object, set the scale to a negative number.\n\t\t\t * @property scaleY\n\t\t\t * @type {Number}\n\t\t\t * @default 1\n\t\t\t **/\n\t\t\tthis.scaleY = 1;\n\t\t\n\t\t\t/**\n\t\t\t * The factor to skew this display object horizontally.\n\t\t\t * @property skewX\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.skewX = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The factor to skew this display object vertically.\n\t\t\t * @property skewY\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.skewY = 0;\n\t\t\n\t\t\t/**\n\t\t\t * A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If\n\t\t\t * null, this property is inherited from the parent container.\n\t\t\t * @property shadow\n\t\t\t * @type {Shadow}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.shadow = null;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether this display object should be rendered to the canvas and included when running the Stage\n\t\t\t * {{#crossLink \"Stage/getObjectsUnderPoint\"}}{{/crossLink}} method.\n\t\t\t * @property visible\n\t\t\t * @type {Boolean}\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.visible = true;\n\t\t\n\t\t\t/**\n\t\t\t * The x (horizontal) position of the display object, relative to its parent.\n\t\t\t * @property x\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.x = 0;\n\t\t\n\t\t\t/** The y (vertical) position of the display object, relative to its parent.\n\t\t\t * @property y\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.y = 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * If set, defines the transformation for this display object, overriding all other transformation properties\n\t\t\t * (x, y, rotation, scale, skew).\n\t\t\t * @property transformMatrix\n\t\t\t * @type {Matrix2D}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.transformMatrix = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * The composite operation indicates how the pixels of this display object will be composited with the elements\n\t\t\t * behind it. If `null`, this property is inherited from the parent container. For more information, read the\n\t\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n\t\t\t * whatwg spec on compositing</a>.\n\t\t\t * @property compositeOperation\n\t\t\t * @type {String}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.compositeOperation = null;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether the display object should be drawn to a whole pixel when\n\t\t\t * {{#crossLink \"Stage/snapToPixelEnabled\"}}{{/crossLink}} is true. To enable/disable snapping on whole\n\t\t\t * categories of display objects, set this value on the prototype (Ex. Text.prototype.snapToPixel = true).\n\t\t\t * @property snapToPixel\n\t\t\t * @type {Boolean}\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.snapToPixel = true;\n\t\t\n\t\t\t/**\n\t\t\t * An array of Filter objects to apply to this display object. Filters are only applied / updated when {{#crossLink \"cache\"}}{{/crossLink}}\n\t\t\t * or {{#crossLink \"updateCache\"}}{{/crossLink}} is called on the display object, and only apply to the area that is\n\t\t\t * cached.\n\t\t\t * @property filters\n\t\t\t * @type {Array}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.filters = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\n\t\t\t * will be applied relative to the display object's parent coordinates (as if it were a child of the parent).\n\t\t\t * @property mask\n\t\t\t * @type {Shape}\n\t\t\t * @default null\n\t\t\t */\n\t\t\tthis.mask = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * A display object that will be tested when checking mouse interactions or testing {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}.\n\t\t\t * The hit area will have its transformation applied relative to this display object's coordinate space (as though\n\t\t\t * the hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested\n\t\t\t * using only its own `alpha` value regardless of the alpha value on the target display object, or the target's\n\t\t\t * ancestors (parents).\n\t\t\t * \n\t\t\t * If set on a {{#crossLink \"Container\"}}{{/crossLink}}, children of the Container will not receive mouse events.\n\t\t\t * This is similar to setting {{#crossLink \"mouseChildren\"}}{{/crossLink}} to false.\n\t\t\t *\n\t\t\t * Note that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink \"Stage\"}}{{/crossLink}}.\n\t\t\t * @property hitArea\n\t\t\t * @type {DisplayObject}\n\t\t\t * @default null\n\t\t\t */\n\t\t\tthis.hitArea = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * A CSS cursor (ex. \"pointer\", \"help\", \"text\", etc) that will be displayed when the user hovers over this display\n\t\t\t * object. You must enable mouseover events using the {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}} method to\n\t\t\t * use this property. Setting a non-null cursor on a Container will override the cursor set on its descendants.\n\t\t\t * @property cursor\n\t\t\t * @type {String}\n\t\t\t * @default null\n\t\t\t */\n\t\t\tthis.cursor = null;\n\t\t\n\t\t\n\t\t// private properties:\n\t\t\t/**\n\t\t\t * @property _cacheOffsetX\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis._cacheOffsetX = 0;\n\t\t\n\t\t\t/**\n\t\t\t * @property _cacheOffsetY\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis._cacheOffsetY = 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _filterOffsetX\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis._filterOffsetX = 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _filterOffsetY\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis._filterOffsetY = 0;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _cacheScale\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t * @default 1\n\t\t\t **/\n\t\t\tthis._cacheScale = 1;\n\t\t\n\t\t\t/**\n\t\t\t* @property _cacheDataURLID\n\t\t\t* @protected\n\t\t\t* @type {Number}\n\t\t\t* @default 0\n\t\t\t*/\n\t\t\tthis._cacheDataURLID = 0;\n\t\t\t\n\t\t\t/**\n\t\t\t* @property _cacheDataURL\n\t\t\t* @protected\n\t\t\t* @type {String}\n\t\t\t* @default null\n\t\t\t*/\n\t\t\tthis._cacheDataURL = null;\n\t\t\n\t\t\t/**\n\t\t\t * @property _props\n\t\t\t * @protected\n\t\t\t * @type {DisplayObject}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis._props = new createjs.DisplayProps();\n\t\t\n\t\t\t/**\n\t\t\t * @property _rectangle\n\t\t\t * @protected\n\t\t\t * @type {Rectangle}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis._rectangle = new createjs.Rectangle();\n\t\t\n\t\t\t/**\n\t\t\t * @property _bounds\n\t\t\t * @protected\n\t\t\t * @type {Rectangle}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis._bounds = null;\n\t\t}\n\t\tvar p = createjs.extend(DisplayObject, createjs.EventDispatcher);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\t\n\t// static properties:\n\t\t/**\n\t\t * Listing of mouse event names. Used in _hasMouseEventListener.\n\t\t * @property _MOUSE_EVENTS\n\t\t * @protected\n\t\t * @static\n\t\t * @type {Array}\n\t\t **/\n\t\tDisplayObject._MOUSE_EVENTS = [\"click\",\"dblclick\",\"mousedown\",\"mouseout\",\"mouseover\",\"pressmove\",\"pressup\",\"rollout\",\"rollover\"];\n\t\n\t\t/**\n\t\t * Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink \"getObjectsUnderPoint\"}}{{/crossLink}}\n\t\t * with cross domain content.\n\t\t * @property suppressCrossDomainErrors\n\t\t * @static\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tDisplayObject.suppressCrossDomainErrors = false;\n\t\t\n\t\t/**\n\t\t * @property _snapToPixelEnabled\n\t\t * @protected\n\t\t * @static\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tDisplayObject._snapToPixelEnabled = false; // stage.snapToPixelEnabled is temporarily copied here during a draw to provide global access.\n\t\n\t\t/**\n\t\t * @property _hitTestCanvas\n\t\t * @type {HTMLCanvasElement | Object}\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\t/**\n\t\t * @property _hitTestContext\n\t\t * @type {CanvasRenderingContext2D}\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tvar canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); // prevent errors on load in browsers without canvas.\n\t\tif (canvas.getContext) {\n\t\t\tDisplayObject._hitTestCanvas = canvas;\n\t\t\tDisplayObject._hitTestContext = canvas.getContext(\"2d\");\n\t\t\tcanvas.width = canvas.height = 1;\n\t\t}\n\t\n\t\t/**\n\t\t * @property _nextCacheID\n\t\t * @type {Number}\n\t\t * @static\n\t\t * @protected\n\t\t **/\n\t\tDisplayObject._nextCacheID = 1;\n\t\n\t\n\t// events:\n\t\t/**\n\t\t * Dispatched when the user presses their left mouse button over the display object. See the \n\t\t * {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event mousedown\n\t\t * @since 0.6.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched when the user presses their left mouse button and then releases it while over the display object.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event click\n\t\t * @since 0.6.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched when the user double clicks their left mouse button over this display object.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event dblclick\n\t\t * @since 0.6.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched when the user's mouse enters this display object. This event must be enabled using \n\t\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event mouseover\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when the user's mouse leaves this display object. This event must be enabled using \n\t\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event mouseout\n\t\t * @since 0.6.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * This event is similar to {{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}, with the following\n\t\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n\t\t * aggregate of their content.\n\t\t * \n\t\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n\t\t * shapeA and then directly on to shapeB. With a listener for {{#crossLink \"mouseover:event\"}}{{/crossLink}} on\n\t\t * myContainer, two events would be received, each targeting a child element:<OL>\n\t\t * <LI>when the mouse enters shapeA (target=shapeA)</LI>\n\t\t * <LI>when the mouse enters shapeB (target=shapeB)</LI>\n\t\t * </OL>\n\t\t * However, with a listener for \"rollover\" instead, only a single event is received when the mouse first enters\n\t\t * the aggregate myContainer content (target=myContainer).\n\t\t * \n\t\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event rollover\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * This event is similar to {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}, with the following\n\t\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n\t\t * aggregate of their content.\n\t\t * \n\t\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n\t\t * shapeA, then directly on to shapeB, then off both. With a listener for {{#crossLink \"mouseout:event\"}}{{/crossLink}}\n\t\t * on myContainer, two events would be received, each targeting a child element:<OL>\n\t\t * <LI>when the mouse leaves shapeA (target=shapeA)</LI>\n\t\t * <LI>when the mouse leaves shapeB (target=shapeB)</LI>\n\t\t * </OL>\n\t\t * However, with a listener for \"rollout\" instead, only a single event is received when the mouse leaves\n\t\t * the aggregate myContainer content (target=myContainer).\n\t\t * \n\t\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event rollout\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressmove\n\t\t * event will be generated on that object whenever the mouse moves until the mouse press is released. This can be\n\t\t * useful for dragging and similar operations.\n\t\t * @event pressmove\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressup event\n\t\t * will be generated on that object when that mouse press is released. This can be useful for dragging and similar\n\t\t * operations.\n\t\t * @event pressup\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched when the display object is added to a parent container.\n\t\t * @event added\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched when the display object is removed from its parent container.\n\t\t * @event removed\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the\n\t\t * rendering (draw) pass. When {{#crossLink \"Stage/update\"}}{{/crossLink}} is called, first all display objects on\n\t\t * the stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their\n\t\t * {{#crossLink \"tick:event\"}}{{/crossLink}} event dispatched in order of their depth prior to the event being\n\t\t * dispatched on their parent.\n\t\t * @event tick\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @param {Array} params An array containing any arguments that were passed to the Stage.update() method. For\n\t\t *      example if you called stage.update(\"hello\"), then the params would be [\"hello\"].\n\t\t * @since 0.6.0\n\t\t */\n\t\t\n\t\t\n\t// getter / setters:\n\t\t/**\n\t\t * Use the {{#crossLink \"DisplayObject/stage:property\"}}{{/crossLink}} property instead.\n\t\t * @method getStage\n\t\t * @return {Stage}\n\t\t * @deprecated\n\t\t **/\n\t\tp.getStage = function() {\n\t\t\t// uses dynamic access to avoid circular dependencies;\n\t\t\tvar o = this, _Stage = createjs[\"Stage\"];\n\t\t\twhile (o.parent) { o = o.parent; }\n\t\t\tif (o instanceof _Stage) { return o; }\n\t\t\treturn null;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the Stage instance that this display object will be rendered on, or null if it has not been added to one.\n\t\t * @property stage\n\t\t * @type {Stage}\n\t\t * @readonly\n\t\t **/\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tstage: { get: p.getStage }\n\t\t\t});\n\t\t} catch (e) {}\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns <code>true</code> if the draw was handled (useful for overriding functionality).\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t\t * @return {Boolean}\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\tvar cacheCanvas = this.cacheCanvas;\n\t\t\tif (ignoreCache || !cacheCanvas) { return false; }\n\t\t\tvar scale = this._cacheScale;\n\t\t\tctx.drawImage(cacheCanvas, this._cacheOffsetX+this._filterOffsetX, this._cacheOffsetY+this._filterOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow\n\t\t * to the specified context. This is typically called prior to {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}.\n\t\t * @method updateContext\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D to update.\n\t\t **/\n\t\tp.updateContext = function(ctx) {\n\t\t\tvar o=this, mask=o.mask, mtx= o._props.matrix;\n\t\t\t\n\t\t\tif (mask && mask.graphics && !mask.graphics.isEmpty()) {\n\t\t\t\tmask.getMatrix(mtx);\n\t\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n\t\t\t\t\n\t\t\t\tmask.graphics.drawAsPath(ctx);\n\t\t\t\tctx.clip();\n\t\t\t\t\n\t\t\t\tmtx.invert();\n\t\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n\t\t\t}\n\t\t\t\n\t\t\tthis.getMatrix(mtx);\n\t\t\tvar tx = mtx.tx, ty = mtx.ty;\n\t\t\tif (DisplayObject._snapToPixelEnabled && o.snapToPixel) {\n\t\t\t\ttx = tx + (tx < 0 ? -0.5 : 0.5) | 0;\n\t\t\t\tty = ty + (ty < 0 ? -0.5 : 0.5) | 0;\n\t\t\t}\n\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, tx, ty);\n\t\t\tctx.globalAlpha *= o.alpha;\n\t\t\tif (o.compositeOperation) { ctx.globalCompositeOperation = o.compositeOperation; }\n\t\t\tif (o.shadow) { this._applyShadow(ctx, o.shadow); }\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into a new canvas, which is then used for subsequent draws. For complex content\n\t\t * that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),\n\t\t * this can provide for much faster rendering because the content does not need to be re-rendered each tick. The\n\t\t * cached display object can be moved, rotated, faded, etc freely, however if its content changes, you must\n\t\t * manually update the cache by calling <code>updateCache()</code> or <code>cache()</code> again. You must specify\n\t\t * the cache area via the x, y, w, and h parameters. This defines the rectangle that will be rendered and cached\n\t\t * using this display object's coordinates.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25:\n\t\t *\n\t\t *      var shape = new createjs.Shape();\n\t\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n\t\t *      myShape.cache(-25, -25, 50, 50);\n\t\t *\n\t\t * Note that filters need to be defined <em>before</em> the cache is applied. Check out the {{#crossLink \"Filter\"}}{{/crossLink}}\n\t\t * class for more information. Some filters (ex. BlurFilter) will not work as expected in conjunction with the scale param.\n\t\t * \n\t\t * Usually, the resulting cacheCanvas will have the dimensions width*scale by height*scale, however some filters (ex. BlurFilter)\n\t\t * will add padding to the canvas dimensions.\n\t\t *\n\t\t * @method cache\n\t\t * @param {Number} x The x coordinate origin for the cache region.\n\t\t * @param {Number} y The y coordinate origin for the cache region.\n\t\t * @param {Number} width The width of the cache region.\n\t\t * @param {Number} height The height of the cache region.\n\t\t * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using\n\t\t * \tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\n\t\t * \tcached elements with greater fidelity. Default is 1.\n\t\t **/\n\t\tp.cache = function(x, y, width, height, scale) {\n\t\t\t// draw to canvas.\n\t\t\tscale = scale||1;\n\t\t\tif (!this.cacheCanvas) { this.cacheCanvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); }\n\t\t\tthis._cacheWidth = width;\n\t\t\tthis._cacheHeight = height;\n\t\t\tthis._cacheOffsetX = x;\n\t\t\tthis._cacheOffsetY = y;\n\t\t\tthis._cacheScale = scale;\n\t\t\tthis.updateCache();\n\t\t};\n\t\n\t\t/**\n\t\t * Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\n\t\t * If compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\n\t\t * will be drawn over the existing cache using the specified compositeOperation.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * Clear the current graphics of a cached shape, draw some new instructions, and then update the cache. The new line\n\t\t * will be drawn on top of the old one.\n\t\t *\n\t\t *      // Not shown: Creating the shape, and caching it.\n\t\t *      shapeInstance.clear();\n\t\t *      shapeInstance.setStrokeStyle(3).beginStroke(\"#ff0000\").moveTo(100, 100).lineTo(200,200);\n\t\t *      shapeInstance.updateCache();\n\t\t *\n\t\t * @method updateCache\n\t\t * @param {String} compositeOperation The compositeOperation to use, or null to clear the cache and redraw it.\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n\t\t * whatwg spec on compositing</a>.\n\t\t **/\n\t\tp.updateCache = function(compositeOperation) {\n\t\t\tvar cacheCanvas = this.cacheCanvas;\n\t\t\tif (!cacheCanvas) { throw \"cache() must be called before updateCache()\"; }\n\t\t\tvar scale = this._cacheScale, offX = this._cacheOffsetX*scale, offY = this._cacheOffsetY*scale;\n\t\t\tvar w = this._cacheWidth, h = this._cacheHeight, ctx = cacheCanvas.getContext(\"2d\");\n\t\t\t\n\t\t\tvar fBounds = this._getFilterBounds();\n\t\t\toffX += (this._filterOffsetX = fBounds.x);\n\t\t\toffY += (this._filterOffsetY = fBounds.y);\n\t\t\t\n\t\t\tw = Math.ceil(w*scale) + fBounds.width;\n\t\t\th = Math.ceil(h*scale) + fBounds.height;\n\t\t\tif (w != cacheCanvas.width || h != cacheCanvas.height) {\n\t\t\t\t// TODO: it would be nice to preserve the content if there is a compositeOperation.\n\t\t\t\tcacheCanvas.width = w;\n\t\t\t\tcacheCanvas.height = h;\n\t\t\t} else if (!compositeOperation) {\n\t\t\t\tctx.clearRect(0, 0, w+1, h+1);\n\t\t\t}\n\t\t\t\n\t\t\tctx.save();\n\t\t\tctx.globalCompositeOperation = compositeOperation;\n\t\t\tctx.setTransform(scale, 0, 0, scale, -offX, -offY);\n\t\t\tthis.draw(ctx, true);\n\t\t\t// TODO: filters and cache scale don't play well together at present.\n\t\t\tthis._applyFilters();\n\t\t\tctx.restore();\n\t\t\tthis.cacheID = DisplayObject._nextCacheID++;\n\t\t};\n\t\n\t\t/**\n\t\t * Clears the current cache. See {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} for more information.\n\t\t * @method uncache\n\t\t **/\n\t\tp.uncache = function() {\n\t\t\tthis._cacheDataURL = this.cacheCanvas = null;\n\t\t\tthis.cacheID = this._cacheOffsetX = this._cacheOffsetY = this._filterOffsetX = this._filterOffsetY = 0;\n\t\t\tthis._cacheScale = 1;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a data URL for the cache, or null if this display object is not cached.\n\t\t * Uses cacheID to ensure a new data URL is not generated if the cache has not changed.\n\t\t * @method getCacheDataURL\n\t\t * @return {String} The image data url for the cache.\n\t\t **/\n\t\tp.getCacheDataURL = function() {\n\t\t\tif (!this.cacheCanvas) { return null; }\n\t\t\tif (this.cacheID != this._cacheDataURLID) { this._cacheDataURL = this.cacheCanvas.toDataURL(); }\n\t\t\treturn this._cacheDataURL;\n\t\t};\n\t\n\t\t/**\n\t\t * Transforms the specified x and y position from the coordinate space of the display object\n\t\t * to the global (stage) coordinate space. For example, this could be used to position an HTML label\n\t\t * over a specific point on a nested display object. Returns a Point instance with x and y properties\n\t\t * correlating to the transformed coordinates on the stage.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      displayObject.x = 300;\n\t\t *      displayObject.y = 200;\n\t\t *      stage.addChild(displayObject);\n\t\t *      var point = displayObject.localToGlobal(100, 100);\n\t\t *      // Results in x=400, y=300\n\t\t *\n\t\t * @method localToGlobal\n\t\t * @param {Number} x The x position in the source display object to transform.\n\t\t * @param {Number} y The y position in the source display object to transform.\n\t\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n\t\t * @return {Point} A Point instance with x and y properties correlating to the transformed coordinates\n\t\t * on the stage.\n\t\t **/\n\t\tp.localToGlobal = function(x, y, pt) {\n\t\t\treturn this.getConcatenatedMatrix(this._props.matrix).transformPoint(x,y, pt||new createjs.Point());\n\t\t};\n\t\n\t\t/**\n\t\t * Transforms the specified x and y position from the global (stage) coordinate space to the\n\t\t * coordinate space of the display object. For example, this could be used to determine\n\t\t * the current mouse position within the display object. Returns a Point instance with x and y properties\n\t\t * correlating to the transformed position in the display object's coordinate space.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      displayObject.x = 300;\n\t\t *      displayObject.y = 200;\n\t\t *      stage.addChild(displayObject);\n\t\t *      var point = displayObject.globalToLocal(100, 100);\n\t\t *      // Results in x=-200, y=-100\n\t\t *\n\t\t * @method globalToLocal\n\t\t * @param {Number} x The x position on the stage to transform.\n\t\t * @param {Number} y The y position on the stage to transform.\n\t\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n\t\t * @return {Point} A Point instance with x and y properties correlating to the transformed position in the\n\t\t * display object's coordinate space.\n\t\t **/\n\t\tp.globalToLocal = function(x, y, pt) {\n\t\t\treturn this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x,y, pt||new createjs.Point());\n\t\t};\n\t\n\t\t/**\n\t\t * Transforms the specified x and y position from the coordinate space of this display object to the coordinate\n\t\t * space of the target display object. Returns a Point instance with x and y properties correlating to the\n\t\t * transformed position in the target's coordinate space. Effectively the same as using the following code with\n\t\t * {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\t\t *\n\t\t *      var pt = this.localToGlobal(x, y);\n\t\t *      pt = target.globalToLocal(pt.x, pt.y);\n\t\t *\n\t\t * @method localToLocal\n\t\t * @param {Number} x The x position in the source display object to transform.\n\t\t * @param {Number} y The y position on the source display object to transform.\n\t\t * @param {DisplayObject} target The target display object to which the coordinates will be transformed.\n\t\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n\t\t * @return {Point} Returns a Point instance with x and y properties correlating to the transformed position\n\t\t * in the target's coordinate space.\n\t\t **/\n\t\tp.localToLocal = function(x, y, target, pt) {\n\t\t\tpt = this.localToGlobal(x, y, pt);\n\t\t\treturn target.globalToLocal(pt.x, pt.y, pt);\n\t\t};\n\t\n\t\t/**\n\t\t * Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\n\t\t * Omitted parameters will have the default value set.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      displayObject.setTransform(100, 100, 2, 2);\n\t\t *\n\t\t * @method setTransform\n\t\t * @param {Number} [x=0] The horizontal translation (x position) in pixels\n\t\t * @param {Number} [y=0] The vertical translation (y position) in pixels\n\t\t * @param {Number} [scaleX=1] The horizontal scale, as a percentage of 1\n\t\t * @param {Number} [scaleY=1] the vertical scale, as a percentage of 1\n\t\t * @param {Number} [rotation=0] The rotation, in degrees\n\t\t * @param {Number} [skewX=0] The horizontal skew factor\n\t\t * @param {Number} [skewY=0] The vertical skew factor\n\t\t * @param {Number} [regX=0] The horizontal registration point in pixels\n\t\t * @param {Number} [regY=0] The vertical registration point in pixels\n\t\t * @return {DisplayObject} Returns this instance. Useful for chaining commands.\n\t\t * @chainable\n\t\t*/\n\t\tp.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\t\tthis.x = x || 0;\n\t\t\tthis.y = y || 0;\n\t\t\tthis.scaleX = scaleX == null ? 1 : scaleX;\n\t\t\tthis.scaleY = scaleY == null ? 1 : scaleY;\n\t\t\tthis.rotation = rotation || 0;\n\t\t\tthis.skewX = skewX || 0;\n\t\t\tthis.skewY = skewY || 0;\n\t\t\tthis.regX = regX || 0;\n\t\t\tthis.regY = regY || 0;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a matrix based on this object's current transform.\n\t\t * @method getMatrix\n\t\t * @param {Matrix2D} matrix Optional. A Matrix2D object to populate with the calculated values. If null, a new\n\t\t * Matrix object is returned.\n\t\t * @return {Matrix2D} A matrix representing this display object's transform.\n\t\t **/\n\t\tp.getMatrix = function(matrix) {\n\t\t\tvar o = this, mtx = matrix&&matrix.identity() || new createjs.Matrix2D();\n\t\t\treturn o.transformMatrix ?  mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Generates a Matrix2D object representing the combined transform of the display object and all of its\n\t\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}). This can\n\t\t * be used to transform positions between coordinate spaces, such as with {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n\t\t * and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\t\t * @method getConcatenatedMatrix\n\t\t * @param {Matrix2D} [matrix] A {{#crossLink \"Matrix2D\"}}{{/crossLink}} object to populate with the calculated values.\n\t\t * If null, a new Matrix2D object is returned.\n\t\t * @return {Matrix2D} The combined matrix.\n\t\t **/\n\t\tp.getConcatenatedMatrix = function(matrix) {\n\t\t\tvar o = this, mtx = this.getMatrix(matrix);\n\t\t\twhile (o = o.parent) {\n\t\t\t\tmtx.prependMatrix(o.getMatrix(o._props.matrix));\n\t\t\t}\n\t\t\treturn mtx;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Generates a DisplayProps object representing the combined display properties of the  object and all of its\n\t\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}).\n\t\t * @method getConcatenatedDisplayProps\n\t\t * @param {DisplayProps} [props] A {{#crossLink \"DisplayProps\"}}{{/crossLink}} object to populate with the calculated values.\n\t\t * If null, a new DisplayProps object is returned.\n\t\t * @return {DisplayProps} The combined display properties.\n\t\t **/\n\t\tp.getConcatenatedDisplayProps = function(props) {\n\t\t\tprops = props ? props.identity() : new createjs.DisplayProps();\n\t\t\tvar o = this, mtx = o.getMatrix(props.matrix); \n\t\t\tdo {\n\t\t\t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation);\n\t\t\t\t\n\t\t\t\t// we do this to avoid problems with the matrix being used for both operations when o._props.matrix is passed in as the props param.\n\t\t\t\t// this could be simplified (ie. just done as part of the prepend above) if we switched to using a pool.\n\t\t\t\tif (o != this) { mtx.prependMatrix(o.getMatrix(o._props.matrix)); }\n\t\t\t} while (o = o.parent);\n\t\t\treturn props;\n\t\t};\n\t\n\t\t/**\n\t\t * Tests whether the display object intersects the specified point in <em>local</em> coordinates (ie. draws a pixel\n\t\t * with alpha > 0 at the specified position). This ignores the alpha, shadow, hitArea, mask, and compositeOperation\n\t\t * of the display object.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t * \t\tvar myShape = new createjs.Shape();\n\t\t * \t\tmyShape.graphics.beginFill(\"red\").drawRect(100, 100, 20, 50);\n\t\t *\n\t\t * \t\tconsole.log(myShape.hitTest(10,10); // false\n\t\t * \t\tconsole.log(myShape.hitTest(110, 25); // true\n\t\t *\n\t\t * Note that to use Stage coordinates (such as {{#crossLink \"Stage/mouseX:property\"}}{{/crossLink}}), they must\n\t\t * first be converted to local coordinates:\n\t\t *\n\t\t *      stage.addEventListener(\"stagemousedown\", handleMouseDown);\n\t\t *      function handleMouseDown(event) {\n\t\t *      \tvar p = myShape.globalToLocal(stage.mouseX, stage.mouseY);\n\t\t *          var hit = myShape.hitTest(p.x, p.y);\n\t\t *      }\n\t\t *\n\t\t * Shape-to-shape collision is not currently supported by EaselJS.\n\t\t *\n\t\t * @method hitTest\n\t\t * @param {Number} x The x position to check in the display object's local coordinates.\n\t\t * @param {Number} y The y position to check in the display object's local coordinates.\n\t\t * @return {Boolean} A Boolean indicating whether a visible portion of the DisplayObject intersect the specified\n\t\t * local Point.\n\t\t*/\n\t\tp.hitTest = function(x, y) {\n\t\t\tvar ctx = DisplayObject._hitTestContext;\n\t\t\tctx.setTransform(1, 0, 0, 1, -x, -y);\n\t\t\tthis.draw(ctx);\n\t\n\t\t\tvar hit = this._testHit(ctx);\n\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tctx.clearRect(0, 0, 2, 2);\n\t\t\treturn hit;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var myGraphics = new createjs.Graphics().beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n\t\t *      var shape = stage.addChild(new createjs.Shape()).set({graphics:myGraphics, x:100, y:100, alpha:0.5});\n\t\t *\n\t\t * @method set\n\t\t * @param {Object} props A generic object containing properties to copy to the DisplayObject instance.\n\t\t * @return {DisplayObject} Returns the instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t*/\n\t\tp.set = function(props) {\n\t\t\tfor (var n in props) { this[n] = props[n]; }\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a rectangle representing this object's bounds in its local coordinate system (ie. with no transformation).\n\t\t * Objects that have been cached will return the bounds of the cache.\n\t\t * \n\t\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n\t\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n\t\t * bounds.\n\t\t * \n\t\t * <table>\n\t\t * \t<tr><td><b>All</b></td><td>\n\t\t * \t\tAll display objects support setting bounds manually using setBounds(). Likewise, display objects that\n\t\t * \t\thave been cached using cache() will return the bounds of their cache. Manual and cache bounds will override\n\t\t * \t\tthe automatic calculations listed below.\n\t\t * \t</td></tr>\n\t\t * \t<tr><td><b>Bitmap</b></td><td>\n\t\t * \t\tReturns the width and height of the sourceRect (if specified) or image, extending from (x=0,y=0).\n\t\t * \t</td></tr>\n\t\t * \t<tr><td><b>Sprite</b></td><td>\n\t\t * \t\tReturns the bounds of the current frame. May have non-zero x/y if a frame registration point was specified\n\t\t * \t\tin the spritesheet data. See also {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}}\n\t\t * \t</td></tr>\n\t\t * \t<tr><td><b>Container</b></td><td>\n\t\t * \t\tReturns the aggregate (combined) bounds of all children that return a non-null value from getBounds().\n\t\t * \t</td></tr>\n\t\t * \t<tr><td><b>Shape</b></td><td>\n\t\t * \t\tDoes not currently support automatic bounds calculations. Use setBounds() to manually define bounds.\n\t\t * \t</td></tr>\n\t\t * \t<tr><td><b>Text</b></td><td>\n\t\t * \t\tReturns approximate bounds. Horizontal values (x/width) are quite accurate, but vertical values (y/height) are\n\t\t * \t\tnot, especially when using textBaseline values other than \"top\".\n\t\t * \t</td></tr>\n\t\t * \t<tr><td><b>BitmapText</b></td><td>\n\t\t * \t\tReturns approximate bounds. Values will be more accurate if spritesheet frame registration points are close\n\t\t * \t\tto (x=0,y=0).\n\t\t * \t</td></tr>\n\t\t* </table>\n\t\t * \n\t\t * Bounds can be expensive to calculate for some objects (ex. text, or containers with many children), and\n\t\t * are recalculated each time you call getBounds(). You can prevent recalculation on static objects by setting the\n\t\t * bounds explicitly:\n\t\t * \n\t\t * \tvar bounds = obj.getBounds();\n\t\t * \tobj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t * \t// getBounds will now use the set values, instead of recalculating\n\t\t * \n\t\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n\t\t * values if you need to retain it.\n\t\t * \n\t\t * \tvar myBounds = obj.getBounds().clone();\n\t\t * \t// OR:\n\t\t * \tmyRect.copy(obj.getBounds());\n\t\t * \n\t\t * @method getBounds\n\t\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this\n\t\t * object.\n\t\t **/\n\t\tp.getBounds = function() {\n\t\t\tif (this._bounds) { return this._rectangle.copy(this._bounds); }\n\t\t\tvar cacheCanvas = this.cacheCanvas;\n\t\t\tif (cacheCanvas) {\n\t\t\t\tvar scale = this._cacheScale;\n\t\t\t\treturn this._rectangle.setValues(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a rectangle representing this object's bounds in its parent's coordinate system (ie. with transformations applied).\n\t\t * Objects that have been cached will return the transformed bounds of the cache.\n\t\t * \n\t\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n\t\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n\t\t * bounds.\n\t\t * \n\t\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n\t\t * values if you need to retain it.\n\t\t * \n\t\t * Container instances calculate aggregate bounds for all children that return bounds via getBounds.\n\t\t * @method getTransformedBounds\n\t\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.\n\t\t **/\n\t\tp.getTransformedBounds = function() {\n\t\t\treturn this._getBounds();\n\t\t};\n\t\t\n\t\t/**\n\t\t * Allows you to manually specify the bounds of an object that either cannot calculate their own bounds (ex. Shape &\n\t\t * Text) for future reference, or so the object can be included in Container bounds. Manually set bounds will always\n\t\t * override calculated bounds.\n\t\t * \n\t\t * The bounds should be specified in the object's local (untransformed) coordinates. For example, a Shape instance\n\t\t * with a 25px radius circle centered at 0,0 would have bounds of (-25, -25, 50, 50).\n\t\t * @method setBounds\n\t\t * @param {Number} x The x origin of the bounds. Pass null to remove the manual bounds.\n\t\t * @param {Number} y The y origin of the bounds.\n\t\t * @param {Number} width The width of the bounds.\n\t\t * @param {Number} height The height of the bounds.\n\t\t **/\n\t\tp.setBounds = function(x, y, width, height) {\n\t\t\tif (x == null) { this._bounds = x; }\n\t\t\tthis._bounds = (this._bounds || new createjs.Rectangle()).setValues(x, y, width, height);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\n\t\t * reverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements\n\t\t * are copied by reference (masks, individual filter instances, hit area)\n\t\t * @method clone\n\t\t * @return {DisplayObject} A clone of the current DisplayObject instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn this._cloneProps(new DisplayObject());\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[DisplayObject (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t// separated so it can be used more easily in subclasses:\n\t\t/**\n\t\t * @method _cloneProps\n\t\t * @param {DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject\n\t\t * instance copied into.\n\t\t * @return {DisplayObject} o\n\t\t * @protected\n\t\t **/\n\t\tp._cloneProps = function(o) {\n\t\t\to.alpha = this.alpha;\n\t\t\to.mouseEnabled = this.mouseEnabled;\n\t\t\to.tickEnabled = this.tickEnabled;\n\t\t\to.name = this.name;\n\t\t\to.regX = this.regX;\n\t\t\to.regY = this.regY;\n\t\t\to.rotation = this.rotation;\n\t\t\to.scaleX = this.scaleX;\n\t\t\to.scaleY = this.scaleY;\n\t\t\to.shadow = this.shadow;\n\t\t\to.skewX = this.skewX;\n\t\t\to.skewY = this.skewY;\n\t\t\to.visible = this.visible;\n\t\t\to.x  = this.x;\n\t\t\to.y = this.y;\n\t\t\to.compositeOperation = this.compositeOperation;\n\t\t\to.snapToPixel = this.snapToPixel;\n\t\t\to.filters = this.filters==null?null:this.filters.slice(0);\n\t\t\to.mask = this.mask;\n\t\t\to.hitArea = this.hitArea;\n\t\t\to.cursor = this.cursor;\n\t\t\to._bounds = this._bounds;\n\t\t\treturn o;\n\t\t};\n\t\n\t\t/**\n\t\t * @method _applyShadow\n\t\t * @protected\n\t\t * @param {CanvasRenderingContext2D} ctx\n\t\t * @param {Shadow} shadow\n\t\t **/\n\t\tp._applyShadow = function(ctx, shadow) {\n\t\t\tshadow = shadow || Shadow.identity;\n\t\t\tctx.shadowColor = shadow.color;\n\t\t\tctx.shadowOffsetX = shadow.offsetX;\n\t\t\tctx.shadowOffsetY = shadow.offsetY;\n\t\t\tctx.shadowBlur = shadow.blur;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * @method _tick\n\t\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t\t * @protected\n\t\t **/\n\t\tp._tick = function(evtObj) {\n\t\t\t// because tick can be really performance sensitive, check for listeners before calling dispatchEvent.\n\t\t\tvar ls = this._listeners;\n\t\t\tif (ls && ls[\"tick\"]) {\n\t\t\t\t// reset & reuse the event object to avoid construction / GC costs:\n\t\t\t\tevtObj.target = null;\n\t\t\t\tevtObj.propagationStopped = evtObj.immediatePropagationStopped = false;\n\t\t\t\tthis.dispatchEvent(evtObj);\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _testHit\n\t\t * @protected\n\t\t * @param {CanvasRenderingContext2D} ctx\n\t\t * @return {Boolean}\n\t\t **/\n\t\tp._testHit = function(ctx) {\n\t\t\ttry {\n\t\t\t\tvar hit = ctx.getImageData(0, 0, 1, 1).data[3] > 1;\n\t\t\t} catch (e) {\n\t\t\t\tif (!DisplayObject.suppressCrossDomainErrors) {\n\t\t\t\t\tthrow \"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn hit;\n\t\t};\n\t\n\t\t/**\n\t\t * @method _applyFilters\n\t\t * @protected\n\t\t **/\n\t\tp._applyFilters = function() {\n\t\t\tif (!this.filters || this.filters.length == 0 || !this.cacheCanvas) { return; }\n\t\t\tvar l = this.filters.length;\n\t\t\tvar ctx = this.cacheCanvas.getContext(\"2d\");\n\t\t\tvar w = this.cacheCanvas.width;\n\t\t\tvar h = this.cacheCanvas.height;\n\t\t\tfor (var i=0; i<l; i++) {\n\t\t\t\tthis.filters[i].applyFilter(ctx, 0, 0, w, h);\n\t\t\t}\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _getFilterBounds\n\t\t * @return {Rectangle}\n\t\t * @protected\n\t\t **/\n\t\tp._getFilterBounds = function(rect) {\n\t\t\tvar l, filters = this.filters, bounds = this._rectangle.setValues(0,0,0,0);\n\t\t\tif (!filters || !(l=filters.length)) { return bounds; }\n\t\t\t\n\t\t\tfor (var i=0; i<l; i++) {\n\t\t\t\tvar f = this.filters[i];\n\t\t\t\tf.getBounds&&f.getBounds(bounds);\n\t\t\t}\n\t\t\treturn bounds;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _getBounds\n\t\t * @param {Matrix2D} matrix\n\t\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n\t\t * @return {Rectangle}\n\t\t * @protected\n\t\t **/\n\t\tp._getBounds = function(matrix, ignoreTransform){\n\t\t\treturn this._transformBounds(this.getBounds(), matrix, ignoreTransform);\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _transformBounds\n\t\t * @param {Rectangle} bounds\n\t\t * @param {Matrix2D} matrix\n\t\t * @param {Boolean} ignoreTransform\n\t\t * @return {Rectangle}\n\t\t * @protected\n\t\t **/\n\t\tp._transformBounds = function(bounds, matrix, ignoreTransform) {\n\t\t\tif (!bounds) { return bounds; }\n\t\t\tvar x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height, mtx = this._props.matrix;\n\t\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\t\t\t\n\t\t\tif (x || y) { mtx.appendTransform(0,0,1,1,0,0,0,-x,-y); } // TODO: simplify this.\n\t\t\tif (matrix) { mtx.prependMatrix(matrix); }\n\t\t\t\n\t\t\tvar x_a = width*mtx.a, x_b = width*mtx.b;\n\t\t\tvar y_c = height*mtx.c, y_d = height*mtx.d;\n\t\t\tvar tx = mtx.tx, ty = mtx.ty;\n\t\t\t\n\t\t\tvar minX = tx, maxX = tx, minY = ty, maxY = ty;\n\t\n\t\t\tif ((x = x_a + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\t\tif ((x = x_a + y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\t\tif ((x = y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\t\t\n\t\t\tif ((y = x_b + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\t\tif ((y = x_b + y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\t\tif ((y = y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\t\t\n\t\t\treturn bounds.setValues(minX, minY, maxX-minX, maxY-minY);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Indicates whether the display object has any mouse event listeners or a cursor.\n\t\t * @method _isMouseOpaque\n\t\t * @return {Boolean}\n\t\t * @protected\n\t\t **/\n\t\tp._hasMouseEventListener = function() {\n\t\t\tvar evts = DisplayObject._MOUSE_EVENTS;\n\t\t\tfor (var i= 0, l=evts.length; i<l; i++) {\n\t\t\t\tif (this.hasEventListener(evts[i])) { return true; }\n\t\t\t}\n\t\t\treturn !!this.cursor;\n\t\t};\n\t\n\t\tcreatejs.DisplayObject = createjs.promote(DisplayObject, \"EventDispatcher\");\n\t}());\n\t\n\t//##############################################################################\n\t// Container.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\t\n\t\n\t// constructor:\n\t/**\n\t * A Container is a nestable display list that allows you to work with compound display elements. For  example you could\n\t * group arm, leg, torso and head {{#crossLink \"Bitmap\"}}{{/crossLink}} instances together into a Person Container, and\n\t * transform them as a group, while still being able to move the individual parts relative to each other. Children of\n\t * containers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent\n\t * Container.\n\t *\n\t * For example, a {{#crossLink \"Shape\"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>\n\t * and <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.\n\t * Containers have some overhead, so you generally shouldn't create a Container to hold a single child.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var container = new createjs.Container();\n\t *      container.addChild(bitmapInstance, shapeInstance);\n\t *      container.x = 100;\n\t *\n\t * @class Container\n\t * @extends DisplayObject\n\t * @constructor\n\t **/\n\t\tfunction Container() {\n\t\t\tthis.DisplayObject_constructor();\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The array of children in the display list. You should usually use the child management methods such as\n\t\t\t * {{#crossLink \"Container/addChild\"}}{{/crossLink}}, {{#crossLink \"Container/removeChild\"}}{{/crossLink}},\n\t\t\t * {{#crossLink \"Container/swapChildren\"}}{{/crossLink}}, etc, rather than accessing this directly, but it is\n\t\t\t * included for advanced uses.\n\t\t\t * @property children\n\t\t\t * @type Array\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.children = [];\n\t\t\t\n\t\t\t/**\n\t\t\t * Indicates whether the children of this container are independently enabled for mouse/pointer interaction.\n\t\t\t * If false, the children will be aggregated under the container - for example, a click on a child shape would\n\t\t\t * trigger a click event on the container.\n\t\t\t * @property mouseChildren\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.mouseChildren = true;\n\t\t\t\n\t\t\t/**\n\t\t\t * If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.\n\t\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n\t\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n\t\t\t * @property tickChildren\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.tickChildren = true;\n\t\t}\n\t\tvar p = createjs.extend(Container, createjs.DisplayObject);\n\t\t\n\t\t\n\t// getter / setters:\n\t\t/**\n\t\t * Use the {{#crossLink \"Container/numChildren:property\"}}{{/crossLink}} property instead.\n\t\t * @method getNumChildren\n\t\t * @return {Number}\n\t\t * @deprecated\n\t\t **/\n\t\tp.getNumChildren = function() {\n\t\t\treturn this.children.length;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the number of children in the container.\n\t\t * @property numChildren\n\t\t * @type {Number}\n\t\t * @readonly\n\t\t **/\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tnumChildren: { get: p.getNumChildren }\n\t\t\t});\n\t\t} catch (e) {}\n\t\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t\t * @method initialize\n\t\t * @deprecated in favour of `createjs.promote()`\n\t\t **/\n\t\tp.initialize = Container; // TODO: deprecated.\n\t\t\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\tvar hasContent = this.cacheCanvas || this.children.length;\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns true if the draw was handled (useful for overriding functionality).\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n\t\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t\t * into itself).\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\t\t\n\t\t\t// this ensures we don't have issues with display list changes that occur during a draw:\n\t\t\tvar list = this.children.slice();\n\t\t\tfor (var i=0,l=list.length; i<l; i++) {\n\t\t\t\tvar child = list[i];\n\t\t\t\tif (!child.isVisible()) { continue; }\n\t\t\t\t\n\t\t\t\t// draw the child:\n\t\t\t\tctx.save();\n\t\t\t\tchild.updateContext(ctx);\n\t\t\t\tchild.draw(ctx);\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Adds a child to the top of the display list.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t * \t\tcontainer.addChild(bitmapInstance);\n\t\t *\n\t\t * You can also add multiple children at once:\n\t\t *\n\t\t * \t\tcontainer.addChild(bitmapInstance, shapeInstance, textInstance);\n\t\t *\n\t\t * @method addChild\n\t\t * @param {DisplayObject} child The display object to add.\n\t\t * @return {DisplayObject} The child that was added, or the last child if multiple children were added.\n\t\t **/\n\t\tp.addChild = function(child) {\n\t\t\tif (child == null) { return child; }\n\t\t\tvar l = arguments.length;\n\t\t\tif (l > 1) {\n\t\t\t\tfor (var i=0; i<l; i++) { this.addChild(arguments[i]); }\n\t\t\t\treturn arguments[l-1];\n\t\t\t}\n\t\t\tif (child.parent) { child.parent.removeChild(child); }\n\t\t\tchild.parent = this;\n\t\t\tthis.children.push(child);\n\t\t\tchild.dispatchEvent(\"added\");\n\t\t\treturn child;\n\t\t};\n\t\n\t\t/**\n\t\t * Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\n\t\t * setting its parent to this Container.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      addChildAt(child1, index);\n\t\t *\n\t\t * You can also add multiple children, such as:\n\t\t *\n\t\t *      addChildAt(child1, child2, ..., index);\n\t\t *\n\t\t * The index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\n\t\t * you could use:\n\t\t *\n\t\t *      container.addChildAt(myShape, container.getChildIndex(otherShape));\n\t\t *\n\t\t * This would also bump otherShape's index up by one. Fails silently if the index is out of range.\n\t\t *\n\t\t * @method addChildAt\n\t\t * @param {DisplayObject} child The display object to add.\n\t\t * @param {Number} index The index to add the child at.\n\t\t * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.\n\t\t **/\n\t\tp.addChildAt = function(child, index) {\n\t\t\tvar l = arguments.length;\n\t\t\tvar indx = arguments[l-1]; // can't use the same name as the index param or it replaces arguments[1]\n\t\t\tif (indx < 0 || indx > this.children.length) { return arguments[l-2]; }\n\t\t\tif (l > 2) {\n\t\t\t\tfor (var i=0; i<l-1; i++) { this.addChildAt(arguments[i], indx+i); }\n\t\t\t\treturn arguments[l-2];\n\t\t\t}\n\t\t\tif (child.parent) { child.parent.removeChild(child); }\n\t\t\tchild.parent = this;\n\t\t\tthis.children.splice(index, 0, child);\n\t\t\tchild.dispatchEvent(\"added\");\n\t\t\treturn child;\n\t\t};\n\t\n\t\t/**\n\t\t * Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is\n\t\t * already known.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      container.removeChild(child);\n\t\t *\n\t\t * You can also remove multiple children:\n\t\t *\n\t\t *      removeChild(child1, child2, ...);\n\t\t *\n\t\t * Returns true if the child (or children) was removed, or false if it was not in the display list.\n\t\t * @method removeChild\n\t\t * @param {DisplayObject} child The child to remove.\n\t\t * @return {Boolean} true if the child (or children) was removed, or false if it was not in the display list.\n\t\t **/\n\t\tp.removeChild = function(child) {\n\t\t\tvar l = arguments.length;\n\t\t\tif (l > 1) {\n\t\t\t\tvar good = true;\n\t\t\t\tfor (var i=0; i<l; i++) { good = good && this.removeChild(arguments[i]); }\n\t\t\t\treturn good;\n\t\t\t}\n\t\t\treturn this.removeChildAt(createjs.indexOf(this.children, child));\n\t\t};\n\t\n\t\t/**\n\t\t * Removes the child at the specified index from the display list, and sets its parent to null.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      container.removeChildAt(2);\n\t\t *\n\t\t * You can also remove multiple children:\n\t\t *\n\t\t *      container.removeChild(2, 7, ...)\n\t\t *\n\t\t * Returns true if the child (or children) was removed, or false if any index was out of range.\n\t\t * @method removeChildAt\n\t\t * @param {Number} index The index of the child to remove.\n\t\t * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.\n\t\t **/\n\t\tp.removeChildAt = function(index) {\n\t\t\tvar l = arguments.length;\n\t\t\tif (l > 1) {\n\t\t\t\tvar a = [];\n\t\t\t\tfor (var i=0; i<l; i++) { a[i] = arguments[i]; }\n\t\t\t\ta.sort(function(a, b) { return b-a; });\n\t\t\t\tvar good = true;\n\t\t\t\tfor (var i=0; i<l; i++) { good = good && this.removeChildAt(a[i]); }\n\t\t\t\treturn good;\n\t\t\t}\n\t\t\tif (index < 0 || index > this.children.length-1) { return false; }\n\t\t\tvar child = this.children[index];\n\t\t\tif (child) { child.parent = null; }\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.dispatchEvent(\"removed\");\n\t\t\treturn true;\n\t\t};\n\t\n\t\t/**\n\t\t * Removes all children from the display list.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t * \tcontainer.removeAllChildren();\n\t\t *\n\t\t * @method removeAllChildren\n\t\t **/\n\t\tp.removeAllChildren = function() {\n\t\t\tvar kids = this.children;\n\t\t\twhile (kids.length) { this.removeChildAt(0); }\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the child at the specified index.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      container.getChildAt(2);\n\t\t *\n\t\t * @method getChildAt\n\t\t * @param {Number} index The index of the child to return.\n\t\t * @return {DisplayObject} The child at the specified index. Returns null if there is no child at the index.\n\t\t **/\n\t\tp.getChildAt = function(index) {\n\t\t\treturn this.children[index];\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns the child with the specified name.\n\t\t * @method getChildByName\n\t\t * @param {String} name The name of the child to return.\n\t\t * @return {DisplayObject} The child with the specified name.\n\t\t **/\n\t\tp.getChildByName = function(name) {\n\t\t\tvar kids = this.children;\n\t\t\tfor (var i=0,l=kids.length;i<l;i++) {\n\t\t\t\tif(kids[i].name == name) { return kids[i]; }\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\n\t\t/**\n\t\t * Performs an array sort operation on the child list.\n\t\t *\n\t\t * <h4>Example: Display children with a higher y in front.</h4>\n\t\t * \n\t\t *      var sortFunction = function(obj1, obj2, options) {\n\t\t *          if (obj1.y > obj2.y) { return 1; }\n\t\t *          if (obj1.y < obj2.y) { return -1; }\n\t\t *          return 0;\n\t\t *      }\n\t\t *      container.sortChildren(sortFunction);\n\t\t *\n\t\t * @method sortChildren\n\t\t * @param {Function} sortFunction the function to use to sort the child list. See JavaScript's <code>Array.sort</code>\n\t\t * documentation for details.\n\t\t **/\n\t\tp.sortChildren = function(sortFunction) {\n\t\t\tthis.children.sort(sortFunction);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the index of the specified child in the display list, or -1 if it is not in the display list.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var index = container.getChildIndex(child);\n\t\t *\n\t\t * @method getChildIndex\n\t\t * @param {DisplayObject} child The child to return the index of.\n\t\t * @return {Number} The index of the specified child. -1 if the child is not found.\n\t\t **/\n\t\tp.getChildIndex = function(child) {\n\t\t\treturn createjs.indexOf(this.children, child);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Swaps the children at the specified indexes. Fails silently if either index is out of range.\n\t\t * @method swapChildrenAt\n\t\t * @param {Number} index1\n\t\t * @param {Number} index2\n\t\t **/\n\t\tp.swapChildrenAt = function(index1, index2) {\n\t\t\tvar kids = this.children;\n\t\t\tvar o1 = kids[index1];\n\t\t\tvar o2 = kids[index2];\n\t\t\tif (!o1 || !o2) { return; }\n\t\t\tkids[index1] = o2;\n\t\t\tkids[index2] = o1;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this\n\t\t * Container.\n\t\t * @method swapChildren\n\t\t * @param {DisplayObject} child1\n\t\t * @param {DisplayObject} child2\n\t\t **/\n\t\tp.swapChildren = function(child1, child2) {\n\t\t\tvar kids = this.children;\n\t\t\tvar index1,index2;\n\t\t\tfor (var i=0,l=kids.length;i<l;i++) {\n\t\t\t\tif (kids[i] == child1) { index1 = i; }\n\t\t\t\tif (kids[i] == child2) { index2 = i; }\n\t\t\t\tif (index1 != null && index2 != null) { break; }\n\t\t\t}\n\t\t\tif (i==l) { return; } // TODO: throw error?\n\t\t\tkids[index1] = child2;\n\t\t\tkids[index2] = child1;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.\n\t\t * @param {DisplayObject} child\n\t\t * @param {Number} index  \n\t\t * @method setChildIndex\n\t\t **/\n\t\tp.setChildIndex = function(child, index) {\n\t\t\tvar kids = this.children, l=kids.length;\n\t\t\tif (child.parent != this || index < 0 || index >= l) { return; }\n\t\t\tfor (var i=0;i<l;i++) {\n\t\t\t\tif (kids[i] == child) { break; }\n\t\t\t}\n\t\t\tif (i==l || i == index) { return; }\n\t\t\tkids.splice(i,1);\n\t\t\tkids.splice(index,0,child);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)\n\t\t * of this container.\n\t\t * @method contains\n\t\t * @param {DisplayObject} child The DisplayObject to be checked.\n\t\t * @return {Boolean} true if the specified display object either is this container or is a descendent.\n\t\t **/\n\t\tp.contains = function(child) {\n\t\t\twhile (child) {\n\t\t\t\tif (child == this) { return true; }\n\t\t\t\tchild = child.parent;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\n\t\t/**\n\t\t * Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the\n\t\t * specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\n\t\t * transform properties including regX/Y.\n\t\t * @method hitTest\n\t\t * @param {Number} x The x position to check in the display object's local coordinates.\n\t\t * @param {Number} y The y position to check in the display object's local coordinates.\n\t\t * @return {Boolean} A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\n\t\t * coordinates.\n\t\t **/\n\t\tp.hitTest = function(x, y) {\n\t\t\t// TODO: optimize to use the fast cache check where possible.\n\t\t\treturn (this.getObjectUnderPoint(x, y) != null);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns an array of all display objects under the specified coordinates that are in this container's display\n\t\t * list. This routine ignores any display objects with {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n\t\t * set to `false`. The array will be sorted in order of visual depth, with the top-most display object at index 0.\n\t\t * This uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.\n\t\t * For example, if testing for objects under the mouse, test on tick (instead of on {{#crossLink \"DisplayObject/mousemove:event\"}}{{/crossLink}}),\n\t\t * and only if the mouse's position has changed.\n\t\t * \n\t\t * <ul>\n\t\t *     <li>By default (mode=0) this method evaluates all display objects.</li>\n\t\t *     <li>By setting the `mode` parameter to `1`, the {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n\t\t * \t\tand {{#crossLink \"mouseChildren:property\"}}{{/crossLink}} properties will be respected.</li>\n\t\t * \t   <li>Setting the `mode` to `2` additionally excludes display objects that do not have active mouse event\n\t\t * \t   \tlisteners or a {{#crossLink \"DisplayObject:cursor:property\"}}{{/crossLink}} property. That is, only objects\n\t\t * \t   \tthat would normally intercept mouse interaction will be included. This can significantly improve performance\n\t\t * \t   \tin some cases by reducing the number of display objects that need to be tested.</li>\n\t\t * </li>\n\t\t * \n\t\t * This method accounts for both {{#crossLink \"DisplayObject/hitArea:property\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/mask:property\"}}{{/crossLink}}.\n\t\t * @method getObjectsUnderPoint\n\t\t * @param {Number} x The x position in the container to test.\n\t\t * @param {Number} y The y position in the container to test.\n\t\t * @param {Number} [mode=0] The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n\t\t * @return {Array} An Array of DisplayObjects under the specified coordinates.\n\t\t **/\n\t\tp.getObjectsUnderPoint = function(x, y, mode) {\n\t\t\tvar arr = [];\n\t\t\tvar pt = this.localToGlobal(x, y);\n\t\t\tthis._getObjectsUnderPoint(pt.x, pt.y, arr, mode>0, mode==1);\n\t\t\treturn arr;\n\t\t};\n\t\n\t\t/**\n\t\t * Similar to {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}, but returns only the top-most display\n\t\t * object. This runs significantly faster than <code>getObjectsUnderPoint()</code>, but is still potentially an expensive\n\t\t * operation. See {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}} for more information.\n\t\t * @method getObjectUnderPoint\n\t\t * @param {Number} x The x position in the container to test.\n\t\t * @param {Number} y The y position in the container to test.\n\t\t * @param {Number} mode The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n\t\t * @return {DisplayObject} The top-most display object under the specified coordinates.\n\t\t **/\n\t\tp.getObjectUnderPoint = function(x, y, mode) {\n\t\t\tvar pt = this.localToGlobal(x, y);\n\t\t\treturn this._getObjectsUnderPoint(pt.x, pt.y, null, mode>0, mode==1);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Docced in superclass.\n\t\t */\n\t\tp.getBounds = function() {\n\t\t\treturn this._getBounds(null, true);\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Docced in superclass.\n\t\t */\n\t\tp.getTransformedBounds = function() {\n\t\t\treturn this._getBounds();\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of this Container. Some properties that are specific to this instance's current context are\n\t\t * reverted to their defaults (for example .parent).\n\t\t * @method clone\n\t\t * @param {Boolean} [recursive=false] If true, all of the descendants of this container will be cloned recursively. If false, the\n\t\t * properties of the container will be cloned, but the new instance will not have any children.\n\t\t * @return {Container} A clone of the current Container instance.\n\t\t **/\n\t\tp.clone = function(recursive) {\n\t\t\tvar o = this._cloneProps(new Container());\n\t\t\tif (recursive) { this._cloneChildren(o); }\n\t\t\treturn o;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Container (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _tick\n\t\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t\t * @protected\n\t\t **/\n\t\tp._tick = function(evtObj) {\n\t\t\tif (this.tickChildren) {\n\t\t\t\tfor (var i=this.children.length-1; i>=0; i--) {\n\t\t\t\t\tvar child = this.children[i];\n\t\t\t\t\tif (child.tickEnabled && child._tick) { child._tick(evtObj); }\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.DisplayObject__tick(evtObj);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Recursively clones all children of this container, and adds them to the target container.\n\t\t * @method cloneChildren\n\t\t * @protected\n\t\t * @param {Container} o The target container.\n\t\t **/\n\t\tp._cloneChildren = function(o) {\n\t\t\tif (o.children.length) { o.removeAllChildren(); }\n\t\t\tvar arr = o.children;\n\t\t\tfor (var i=0, l=this.children.length; i<l; i++) {\n\t\t\t\tvar clone = this.children[i].clone(true);\n\t\t\t\tclone.parent = o;\n\t\t\t\tarr.push(clone);\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _getObjectsUnderPoint\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Array} arr\n\t\t * @param {Boolean} mouse If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.\n\t\t * @param {Boolean} activeListener If true, there is an active mouse event listener on a parent object.\n\t\t * @param {Number} currentDepth Indicates the current depth of the search.\n\t\t * @return {DisplayObject}\n\t\t * @protected\n\t\t **/\n\t\tp._getObjectsUnderPoint = function(x, y, arr, mouse, activeListener, currentDepth) {\n\t\t\tcurrentDepth = currentDepth || 0;\n\t\t\tif (!currentDepth && !this._testMask(this, x, y)) { return null; }\n\t\t\tvar mtx, ctx = createjs.DisplayObject._hitTestContext;\n\t\t\tactiveListener = activeListener || (mouse&&this._hasMouseEventListener());\n\t\n\t\t\t// draw children one at a time, and check if we get a hit:\n\t\t\tvar children = this.children, l = children.length;\n\t\t\tfor (var i=l-1; i>=0; i--) {\n\t\t\t\tvar child = children[i];\n\t\t\t\tvar hitArea = child.hitArea;\n\t\t\t\tif (!child.visible || (!hitArea && !child.isVisible()) || (mouse && !child.mouseEnabled)) { continue; }\n\t\t\t\tif (!hitArea && !this._testMask(child, x, y)) { continue; }\n\t\t\t\t\n\t\t\t\t// if a child container has a hitArea then we only need to check its hitArea, so we can treat it as a normal DO:\n\t\t\t\tif (!hitArea && child instanceof Container) {\n\t\t\t\t\tvar result = child._getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth+1);\n\t\t\t\t\tif (!arr && result) { return (mouse && !this.mouseChildren) ? this : result; }\n\t\t\t\t} else {\n\t\t\t\t\tif (mouse && !activeListener && !child._hasMouseEventListener()) { continue; }\n\t\t\t\t\t\n\t\t\t\t\t// TODO: can we pass displayProps forward, to avoid having to calculate this backwards every time? It's kind of a mixed bag. When we're only hunting for DOs with event listeners, it may not make sense.\n\t\t\t\t\tvar props = child.getConcatenatedDisplayProps(child._props);\n\t\t\t\t\tmtx = props.matrix;\n\t\t\t\t\t\n\t\t\t\t\tif (hitArea) {\n\t\t\t\t\t\tmtx.appendMatrix(hitArea.getMatrix(hitArea._props.matrix));\n\t\t\t\t\t\tprops.alpha = hitArea.alpha;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tctx.globalAlpha = props.alpha;\n\t\t\t\t\tctx.setTransform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\n\t\t\t\t\t(hitArea||child).draw(ctx);\n\t\t\t\t\tif (!this._testHit(ctx)) { continue; }\n\t\t\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\t\t\tctx.clearRect(0, 0, 2, 2);\n\t\t\t\t\tif (arr) { arr.push(child); }\n\t\t\t\t\telse { return (mouse && !this.mouseChildren) ? this : child; }\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _testMask\n\t\t * @param {DisplayObject} target\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Boolean} Indicates whether the x/y is within the masked region.\n\t\t * @protected\n\t\t **/\n\t\tp._testMask = function(target, x, y) {\n\t\t\tvar mask = target.mask;\n\t\t\tif (!mask || !mask.graphics || mask.graphics.isEmpty()) { return true; }\n\t\t\t\n\t\t\tvar mtx = this._props.matrix, parent = target.parent;\n\t\t\tmtx = parent ? parent.getConcatenatedMatrix(mtx) : mtx.identity();\n\t\t\tmtx = mask.getMatrix(mask._props.matrix).prependMatrix(mtx);\n\t\t\t\n\t\t\tvar ctx = createjs.DisplayObject._hitTestContext;\n\t\t\tctx.setTransform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\n\t\t\t\n\t\t\t// draw the mask as a solid fill:\n\t\t\tmask.graphics.drawAsPath(ctx);\n\t\t\tctx.fillStyle = \"#000\";\n\t\t\tctx.fill();\n\t\t\t\n\t\t\tif (!this._testHit(ctx)) { return false; }\n\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tctx.clearRect(0, 0, 2, 2);\n\t\t\t\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _getBounds\n\t\t * @param {Matrix2D} matrix\n\t\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n\t\t * @return {Rectangle}\n\t\t * @protected\n\t\t **/\n\t\tp._getBounds = function(matrix, ignoreTransform) {\n\t\t\tvar bounds = this.DisplayObject_getBounds();\n\t\t\tif (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }\n\t\t\t\n\t\t\tvar mtx = this._props.matrix;\n\t\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\t\t\tif (matrix) { mtx.prependMatrix(matrix); }\n\t\t\t\n\t\t\tvar l = this.children.length, rect=null;\n\t\t\tfor (var i=0; i<l; i++) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tif (!child.visible || !(bounds = child._getBounds(mtx))) { continue; }\n\t\t\t\tif (rect) { rect.extend(bounds.x, bounds.y, bounds.width, bounds.height); }\n\t\t\t\telse { rect = bounds.clone(); }\n\t\t\t}\n\t\t\treturn rect;\n\t\t};\n\t\n\t\n\t\tcreatejs.Container = createjs.promote(Container, \"DisplayObject\");\n\t}());\n\t\n\t//##############################################################################\n\t// Stage.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * A stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for a display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n\t\t * method is called, it will render its display list to its target canvas.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * This example creates a stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\n\t\t * and redraw the stage using {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t\t *\n\t\t *      var stage = new createjs.Stage(\"canvasElementId\");\n\t\t *      var image = new createjs.Bitmap(\"imagePath.png\");\n\t\t *      stage.addChild(image);\n\t\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t\t *      function handleTick(event) {\n\t\t *          image.x += 10;\n\t\t *          stage.update();\n\t\t *      }\n\t\t *\n\t\t * @class Stage\n\t\t * @extends Container\n\t\t * @constructor\n\t\t * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the Stage will render to, or the string id\n\t\t * of a canvas object in the current document.\n\t\t **/\n\t\tfunction Stage(canvas) {\n\t\t\tthis.Container_constructor();\n\t\t\n\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * Indicates whether the stage should automatically clear the canvas before each render. You can set this to <code>false</code>\n\t\t\t * to manually control clearing (for generative art, or when pointing multiple stages at the same canvas for\n\t\t\t * example).\n\t\t\t *\n\t\t\t * <h4>Example</h4>\n\t\t\t *\n\t\t\t *      var stage = new createjs.Stage(\"canvasId\");\n\t\t\t *      stage.autoClear = false;\n\t\t\t *\n\t\t\t * @property autoClear\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.autoClear = true;\n\t\t\n\t\t\t/**\n\t\t\t * The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\n\t\t\t * first stage that will be ticked (or they will clear each other's render).\n\t\t\t *\n\t\t\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t\t\t * new canvas or mouse events will not work as expected. For example:\n\t\t\t *\n\t\t\t *      myStage.enableDOMEvents(false);\n\t\t\t *      myStage.canvas = anotherCanvas;\n\t\t\t *      myStage.enableDOMEvents(true);\n\t\t\t *\n\t\t\t * @property canvas\n\t\t\t * @type HTMLCanvasElement | Object\n\t\t\t **/\n\t\t\tthis.canvas = (typeof canvas == \"string\") ? document.getElementById(canvas) : canvas;\n\t\t\n\t\t\t/**\n\t\t\t * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t\t * @property mouseX\n\t\t\t * @type Number\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.mouseX = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t\t * @property mouseY\n\t\t\t * @type Number\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.mouseY = 0;\n\t\t\n\t\t\t/**\n\t\t\t * Specifies the area of the stage to affect when calling update. This can be use to selectively\n\t\t\t * re-draw specific regions of the canvas. If null, the whole canvas area is drawn.\n\t\t\t * @property drawRect\n\t\t\t * @type {Rectangle}\n\t\t\t */\n\t\t\tthis.drawRect = null;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether display objects should be rendered on whole pixels. You can set the\n\t\t\t * {{#crossLink \"DisplayObject/snapToPixel\"}}{{/crossLink}} property of\n\t\t\t * display objects to false to enable/disable this behaviour on a per instance basis.\n\t\t\t * @property snapToPixelEnabled\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t **/\n\t\t\tthis.snapToPixelEnabled = false;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether the mouse is currently within the bounds of the canvas.\n\t\t\t * @property mouseInBounds\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t **/\n\t\t\tthis.mouseInBounds = false;\n\t\t\n\t\t\t/**\n\t\t\t * If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.\n\t\t\t * @property tickOnUpdate\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.tickOnUpdate = true;\n\t\t\n\t\t\t/**\n\t\t\t * If true, mouse move events will continue to be called when the mouse leaves the target canvas. See\n\t\t\t * {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}}, and {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t\t\t * x/y/rawX/rawY.\n\t\t\t * @property mouseMoveOutside\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t **/\n\t\t\tthis.mouseMoveOutside = false;\n\t\t\t\n\t\t\t\n\t\t\t/**\n\t\t\t * Prevents selection of other elements in the html page if the user clicks and drags, or double clicks on the canvas.\n\t\t\t * This works by calling `preventDefault()` on any mousedown events (or touch equivalent) originating on the canvas.\n\t\t\t * @property preventSelection\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t **/\n\t\t\tthis.preventSelection = true;\n\t\t\n\t\t\t/**\n\t\t\t * The hitArea property is not supported for Stage.\n\t\t\t * @property hitArea\n\t\t\t * @type {DisplayObject}\n\t\t\t * @default null\n\t\t\t */\n\t\t\t \n\t\t\t \n\t\t// private properties:\n\t\t\t/**\n\t\t\t * Holds objects with data for each active pointer id. Each object has the following properties:\n\t\t\t * x, y, event, target, overTarget, overX, overY, inBounds, posEvtObj (native event that last updated position)\n\t\t\t * @property _pointerData\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._pointerData = {};\n\t\t\n\t\t\t/**\n\t\t\t * Number of active pointers.\n\t\t\t * @property _pointerCount\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._pointerCount = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The ID of the primary pointer.\n\t\t\t * @property _primaryPointerID\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._primaryPointerID = null;\n\t\t\n\t\t\t/**\n\t\t\t * @property _mouseOverIntervalID\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._mouseOverIntervalID = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _nextStage\n\t\t\t * @protected\n\t\t\t * @type Stage\n\t\t\t **/\n\t\t\tthis._nextStage = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _prevStage\n\t\t\t * @protected\n\t\t\t * @type Stage\n\t\t\t **/\n\t\t\tthis._prevStage = null;\n\t\t\t\n\t\t\t\n\t\t// initialize:\n\t\t\tthis.enableDOMEvents(true);\n\t\t}\n\t\tvar p = createjs.extend(Stage, createjs.Container);\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// events:\n\t\t/**\n\t\t * Dispatched when the user moves the mouse over the canvas.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event stagemousemove\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when the user presses their left mouse button on the canvas. See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t\t * class for a listing of event properties.\n\t\t * @event stagemousedown\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when the user the user presses somewhere on the stage, then releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).\n\t\t * You can use {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}} to check whether the mouse is currently within the stage bounds.\n\t\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t\t * @event stagemouseup\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when the mouse moves from within the canvas area (mouseInBounds == true) to outside it (mouseInBounds == false).\n\t\t * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t\t * class for a listing of event properties.\n\t\t * @event mouseleave\n\t\t * @since 0.7.0\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when the mouse moves into the canvas area (mouseInBounds == false) from outside it (mouseInBounds == true).\n\t\t * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t\t * class for a listing of event properties.\n\t\t * @event mouseenter\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched each update immediately before the tick event is propagated through the display list.\n\t\t * You can call preventDefault on the event object to cancel propagating the tick event.\n\t\t * @event tickstart\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched each update immediately after the tick event is propagated through the display list. Does not fire if\n\t\t * tickOnUpdate is false. Precedes the \"drawstart\" event.\n\t\t * @event tickend\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.\n\t\t * You can call preventDefault on the event object to cancel the draw.\n\t\t * @event drawstart\n\t\t * @since 0.7.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is restored.\n\t\t * @event drawend\n\t\t * @since 0.7.0\n\t\t */\n\t\n\t\t \n\t// getter / setters:\n\t\t/**\n\t\t * Specifies a target stage that will have mouse / touch interactions relayed to it after this stage handles them.\n\t\t * This can be useful in cases where you have multiple layered canvases and want user interactions\n\t\t * events to pass through. For example, this would relay mouse events from topStage to bottomStage:\n\t\t *\n\t\t *      topStage.nextStage = bottomStage;\n\t\t *\n\t\t * To disable relaying, set nextStage to null.\n\t\t * \n\t\t * MouseOver, MouseOut, RollOver, and RollOut interactions are also passed through using the mouse over settings\n\t\t * of the top-most stage, but are only processed if the target stage has mouse over interactions enabled.\n\t\t * Considerations when using roll over in relay targets:<OL>\n\t\t * <LI> The top-most (first) stage must have mouse over interactions enabled (via enableMouseOver)</LI>\n\t\t * <LI> All stages that wish to participate in mouse over interaction must enable them via enableMouseOver</LI>\n\t\t * <LI> All relay targets will share the frequency value of the top-most stage</LI>\n\t\t * </OL>\n\t\t * To illustrate, in this example the targetStage would process mouse over interactions at 10hz (despite passing\n\t\t * 30 as it's desired frequency):\n\t\t * \ttopStage.nextStage = targetStage;\n\t\t * \ttopStage.enableMouseOver(10);\n\t\t * \ttargetStage.enableMouseOver(30);\n\t\t * \n\t\t * If the target stage's canvas is completely covered by this stage's canvas, you may also want to disable its\n\t\t * DOM events using:\n\t\t * \n\t\t *\ttargetStage.enableDOMEvents(false);\n\t\t * \n\t\t * @property nextStage\n\t\t * @type {Stage}\n\t\t **/\n\t\tp._get_nextStage = function() {\n\t\t\treturn this._nextStage;\n\t\t};\n\t\tp._set_nextStage = function(value) {\n\t\t\tif (this._nextStage) { this._nextStage._prevStage = null; }\n\t\t\tif (value) { value._prevStage = this; }\n\t\t\tthis._nextStage = value;\n\t\t};\n\t\t\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tnextStage: { get: p._get_nextStage, set: p._set_nextStage }\n\t\t\t});\n\t\t} catch (e) {} // TODO: use Log\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Each time the update method is called, the stage will call {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n\t\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false,\n\t\t * and then render the display list to the canvas.\n\t\t *\n\t\t * @method update\n\t\t * @param {Object} [props] Props object to pass to `tick()`. Should usually be a {{#crossLink \"Ticker\"}}{{/crossLink}} event object, or similar object with a delta property.\n\t\t **/\n\t\tp.update = function(props) {\n\t\t\tif (!this.canvas) { return; }\n\t\t\tif (this.tickOnUpdate) { this.tick(props); }\n\t\t\tif (this.dispatchEvent(\"drawstart\", false, true) === false) { return; }\n\t\t\tcreatejs.DisplayObject._snapToPixelEnabled = this.snapToPixelEnabled;\n\t\t\tvar r = this.drawRect, ctx = this.canvas.getContext(\"2d\");\n\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tif (this.autoClear) {\n\t\t\t\tif (r) { ctx.clearRect(r.x, r.y, r.width, r.height); }\n\t\t\t\telse { ctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1); }\n\t\t\t}\n\t\t\tctx.save();\n\t\t\tif (this.drawRect) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.rect(r.x, r.y, r.width, r.height);\n\t\t\t\tctx.clip();\n\t\t\t}\n\t\t\tthis.updateContext(ctx);\n\t\t\tthis.draw(ctx, false);\n\t\t\tctx.restore();\n\t\t\tthis.dispatchEvent(\"drawend\");\n\t\t};\n\t\t\n\t\t/**\n\t\t * Propagates a tick event through the display list. This is automatically called by {{#crossLink \"Stage/update\"}}{{/crossLink}}\n\t\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false.\n\t\t *\n\t\t * If a props object is passed to `tick()`, then all of its properties will be copied to the event object that is\n\t\t * propagated to listeners.\n\t\t *\n\t\t * Some time-based features in EaselJS (for example {{#crossLink \"Sprite/framerate\"}}{{/crossLink}} require that\n\t\t * a {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} event object (or equivalent object with a delta property) be\n\t\t * passed as the `props` parameter to `tick()`. For example:\n\t\t *\n\t\t * \tTicker.on(\"tick\", handleTick);\n\t\t * \tfunction handleTick(evtObj) {\n\t\t * \t\t// clone the event object from Ticker, and add some custom data to it:\n\t\t * \t\tvar evt = evtObj.clone().set({greeting:\"hello\", name:\"world\"});\n\t\t * \t\t\n\t\t * \t\t// pass it to stage.update():\n\t\t * \t\tmyStage.update(evt); // subsequently calls tick() with the same param\n\t\t * \t}\n\t\t * \t\n\t\t * \t// ...\n\t\t * \tmyDisplayObject.on(\"tick\", handleDisplayObjectTick);\n\t\t * \tfunction handleDisplayObjectTick(evt) {\n\t\t * \t\tconsole.log(evt.delta); // the delta property from the Ticker tick event object\n\t\t * \t\tconsole.log(evt.greeting, evt.name); // custom data: \"hello world\"\n\t\t * \t}\n\t\t * \n\t\t * @method tick\n\t\t * @param {Object} [props] An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.\n\t\t **/\n\t\tp.tick = function(props) {\n\t\t\tif (!this.tickEnabled || this.dispatchEvent(\"tickstart\", false, true) === false) { return; }\n\t\t\tvar evtObj = new createjs.Event(\"tick\");\n\t\t\tif (props) {\n\t\t\t\tfor (var n in props) {\n\t\t\t\t\tif (props.hasOwnProperty(n)) { evtObj[n] = props[n]; }\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._tick(evtObj);\n\t\t\tthis.dispatchEvent(\"tickend\");\n\t\t};\n\t\n\t\t/**\n\t\t * Default event handler that calls the Stage {{#crossLink \"Stage/update\"}}{{/crossLink}} method when a {{#crossLink \"DisplayObject/tick:event\"}}{{/crossLink}}\n\t\t * event is received. This allows you to register a Stage instance as a event listener on {{#crossLink \"Ticker\"}}{{/crossLink}}\n\t\t * directly, using:\n\t\t *\n\t\t *      Ticker.addEventListener(\"tick\", myStage\");\n\t\t *\n\t\t * Note that if you subscribe to ticks using this pattern, then the tick event object will be passed through to\n\t\t * display object tick handlers, instead of <code>delta</code> and <code>paused</code> parameters.\n\t\t * @property handleEvent\n\t\t * @type Function\n\t\t **/\n\t\tp.handleEvent = function(evt) {\n\t\t\tif (evt.type == \"tick\") { this.update(evt); }\n\t\t};\n\t\n\t\t/**\n\t\t * Clears the target canvas. Useful if {{#crossLink \"Stage/autoClear:property\"}}{{/crossLink}} is set to `false`.\n\t\t * @method clear\n\t\t **/\n\t\tp.clear = function() {\n\t\t\tif (!this.canvas) { return; }\n\t\t\tvar ctx = this.canvas.getContext(\"2d\");\n\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can\n\t\t * be specified as the src value of an image element.\n\t\t * @method toDataURL\n\t\t * @param {String} [backgroundColor] The background color to be used for the generated image. Any valid CSS color\n\t\t * value is allowed. The default value is a transparent background.\n\t\t * @param {String} [mimeType=\"image/png\"] The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\n\t\t * is passed in, or if the browser does not support the specified MIME type, the default value will be used.\n\t\t * @return {String} a Base64 encoded image.\n\t\t **/\n\t\tp.toDataURL = function(backgroundColor, mimeType) {\n\t\t\tvar data, ctx = this.canvas.getContext('2d'), w = this.canvas.width, h = this.canvas.height;\n\t\n\t\t\tif (backgroundColor) {\n\t\t\t\tdata = ctx.getImageData(0, 0, w, h);\n\t\t\t\tvar compositeOperation = ctx.globalCompositeOperation;\n\t\t\t\tctx.globalCompositeOperation = \"destination-over\";\n\t\t\t\t\n\t\t\t\tctx.fillStyle = backgroundColor;\n\t\t\t\tctx.fillRect(0, 0, w, h);\n\t\t\t}\n\t\n\t\t\tvar dataURL = this.canvas.toDataURL(mimeType||\"image/png\");\n\t\n\t\t\tif(backgroundColor) {\n\t\t\t\tctx.putImageData(data, 0, 0);\n\t\t\t\tctx.globalCompositeOperation = compositeOperation;\n\t\t\t}\n\t\n\t\t\treturn dataURL;\n\t\t};\n\t\n\t\t/**\n\t\t * Enables or disables (by passing a frequency of 0) mouse over ({{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}\n\t\t * and {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}) and roll over events ({{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}\n\t\t * and {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}) for this stage's display list. These events can\n\t\t * be expensive to generate, so they are disabled by default. The frequency of the events can be controlled\n\t\t * independently of mouse move events via the optional `frequency` parameter.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var stage = new createjs.Stage(\"canvasId\");\n\t\t *      stage.enableMouseOver(10); // 10 updates per second\n\t\t *\n\t\t * @method enableMouseOver\n\t\t * @param {Number} [frequency=20] Optional param specifying the maximum number of times per second to broadcast\n\t\t * mouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less\n\t\t * responsive, but uses less CPU.\n\t\t **/\n\t\tp.enableMouseOver = function(frequency) {\n\t\t\tif (this._mouseOverIntervalID) {\n\t\t\t\tclearInterval(this._mouseOverIntervalID);\n\t\t\t\tthis._mouseOverIntervalID = null;\n\t\t\t\tif (frequency == 0) {\n\t\t\t\t\tthis._testMouseOver(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (frequency == null) { frequency = 20; }\n\t\t\telse if (frequency <= 0) { return; }\n\t\t\tvar o = this;\n\t\t\tthis._mouseOverIntervalID = setInterval(function(){ o._testMouseOver(); }, 1000/Math.min(50,frequency));\n\t\t};\n\t\n\t\t/**\n\t\t * Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas). It is good\n\t\t * practice to disable events when disposing of a Stage instance, otherwise the stage will continue to receive\n\t\t * events from the page.\n\t\t *\n\t\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t\t * new canvas or mouse events will not work as expected. For example:\n\t\t *\n\t\t *      myStage.enableDOMEvents(false);\n\t\t *      myStage.canvas = anotherCanvas;\n\t\t *      myStage.enableDOMEvents(true);\n\t\t *\n\t\t * @method enableDOMEvents\n\t\t * @param {Boolean} [enable=true] Indicates whether to enable or disable the events. Default is true.\n\t\t **/\n\t\tp.enableDOMEvents = function(enable) {\n\t\t\tif (enable == null) { enable = true; }\n\t\t\tvar n, o, ls = this._eventListeners;\n\t\t\tif (!enable && ls) {\n\t\t\t\tfor (n in ls) {\n\t\t\t\t\to = ls[n];\n\t\t\t\t\to.t.removeEventListener(n, o.f, false);\n\t\t\t\t}\n\t\t\t\tthis._eventListeners = null;\n\t\t\t} else if (enable && !ls && this.canvas) {\n\t\t\t\tvar t = window.addEventListener ? window : document;\n\t\t\t\tvar _this = this;\n\t\t\t\tls = this._eventListeners = {};\n\t\t\t\tls[\"mouseup\"] = {t:t, f:function(e) { _this._handleMouseUp(e)} };\n\t\t\t\tls[\"mousemove\"] = {t:t, f:function(e) { _this._handleMouseMove(e)} };\n\t\t\t\tls[\"dblclick\"] = {t:this.canvas, f:function(e) { _this._handleDoubleClick(e)} };\n\t\t\t\tls[\"mousedown\"] = {t:this.canvas, f:function(e) { _this._handleMouseDown(e)} };\n\t\n\t\t\t\tfor (n in ls) {\n\t\t\t\t\to = ls[n];\n\t\t\t\t\to.t.addEventListener(n, o.f, false);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Stage instances cannot be cloned.\n\t\t * @method clone\n\t\t **/\n\t\tp.clone = function() {\n\t\t\tthrow(\"Stage cannot be cloned.\");\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Stage (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _getElementRect\n\t\t * @protected\n\t\t * @param {HTMLElement} e\n\t\t **/\n\t\tp._getElementRect = function(e) {\n\t\t\tvar bounds;\n\t\t\ttry { bounds = e.getBoundingClientRect(); } // this can fail on disconnected DOM elements in IE9\n\t\t\tcatch (err) { bounds = {top: e.offsetTop, left: e.offsetLeft, width:e.offsetWidth, height:e.offsetHeight}; }\n\t\n\t\t\tvar offX = (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || document.body.clientLeft || 0);\n\t\t\tvar offY = (window.pageYOffset || document.scrollTop || 0) - (document.clientTop  || document.body.clientTop  || 0);\n\t\n\t\t\tvar styles = window.getComputedStyle ? getComputedStyle(e,null) : e.currentStyle; // IE <9 compatibility.\n\t\t\tvar padL = parseInt(styles.paddingLeft)+parseInt(styles.borderLeftWidth);\n\t\t\tvar padT = parseInt(styles.paddingTop)+parseInt(styles.borderTopWidth);\n\t\t\tvar padR = parseInt(styles.paddingRight)+parseInt(styles.borderRightWidth);\n\t\t\tvar padB = parseInt(styles.paddingBottom)+parseInt(styles.borderBottomWidth);\n\t\n\t\t\t// note: in some browsers bounds properties are read only.\n\t\t\treturn {\n\t\t\t\tleft: bounds.left+offX+padL,\n\t\t\t\tright: bounds.right+offX-padR,\n\t\t\t\ttop: bounds.top+offY+padT,\n\t\t\t\tbottom: bounds.bottom+offY-padB\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _getPointerData\n\t\t * @protected\n\t\t * @param {Number} id\n\t\t **/\n\t\tp._getPointerData = function(id) {\n\t\t\tvar data = this._pointerData[id];\n\t\t\tif (!data) { data = this._pointerData[id] = {x:0,y:0}; }\n\t\t\treturn data;\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleMouseMove\n\t\t * @protected\n\t\t * @param {MouseEvent} e\n\t\t **/\n\t\tp._handleMouseMove = function(e) {\n\t\t\tif(!e){ e = window.event; }\n\t\t\tthis._handlePointerMove(-1, e, e.pageX, e.pageY);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handlePointerMove\n\t\t * @protected\n\t\t * @param {Number} id\n\t\t * @param {Event} e\n\t\t * @param {Number} pageX\n\t\t * @param {Number} pageY\n\t\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t\t **/\n\t\tp._handlePointerMove = function(id, e, pageX, pageY, owner) {\n\t\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\t\tif (!this.canvas) { return; }\n\t\t\tvar nextStage=this._nextStage, o=this._getPointerData(id);\n\t\n\t\t\tvar inBounds = o.inBounds;\n\t\t\tthis._updatePointerPosition(id, e, pageX, pageY);\n\t\t\tif (inBounds || o.inBounds || this.mouseMoveOutside) {\n\t\t\t\tif (id === -1 && o.inBounds == !inBounds) {\n\t\t\t\t\tthis._dispatchMouseEvent(this, (inBounds ? \"mouseleave\" : \"mouseenter\"), false, id, o, e);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis._dispatchMouseEvent(this, \"stagemousemove\", false, id, o, e);\n\t\t\t\tthis._dispatchMouseEvent(o.target, \"pressmove\", true, id, o, e);\n\t\t\t}\n\t\t\t\n\t\t\tnextStage&&nextStage._handlePointerMove(id, e, pageX, pageY, null);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _updatePointerPosition\n\t\t * @protected\n\t\t * @param {Number} id\n\t\t * @param {Event} e\n\t\t * @param {Number} pageX\n\t\t * @param {Number} pageY\n\t\t **/\n\t\tp._updatePointerPosition = function(id, e, pageX, pageY) {\n\t\t\tvar rect = this._getElementRect(this.canvas);\n\t\t\tpageX -= rect.left;\n\t\t\tpageY -= rect.top;\n\t\n\t\t\tvar w = this.canvas.width;\n\t\t\tvar h = this.canvas.height;\n\t\t\tpageX /= (rect.right-rect.left)/w;\n\t\t\tpageY /= (rect.bottom-rect.top)/h;\n\t\t\tvar o = this._getPointerData(id);\n\t\t\tif (o.inBounds = (pageX >= 0 && pageY >= 0 && pageX <= w-1 && pageY <= h-1)) {\n\t\t\t\to.x = pageX;\n\t\t\t\to.y = pageY;\n\t\t\t} else if (this.mouseMoveOutside) {\n\t\t\t\to.x = pageX < 0 ? 0 : (pageX > w-1 ? w-1 : pageX);\n\t\t\t\to.y = pageY < 0 ? 0 : (pageY > h-1 ? h-1 : pageY);\n\t\t\t}\n\t\n\t\t\to.posEvtObj = e;\n\t\t\to.rawX = pageX;\n\t\t\to.rawY = pageY;\n\t\n\t\t\tif (id === this._primaryPointerID || id === -1) {\n\t\t\t\tthis.mouseX = o.x;\n\t\t\t\tthis.mouseY = o.y;\n\t\t\t\tthis.mouseInBounds = o.inBounds;\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleMouseUp\n\t\t * @protected\n\t\t * @param {MouseEvent} e\n\t\t **/\n\t\tp._handleMouseUp = function(e) {\n\t\t\tthis._handlePointerUp(-1, e, false);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handlePointerUp\n\t\t * @protected\n\t\t * @param {Number} id\n\t\t * @param {Event} e\n\t\t * @param {Boolean} clear\n\t\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t\t **/\n\t\tp._handlePointerUp = function(id, e, clear, owner) {\n\t\t\tvar nextStage = this._nextStage, o = this._getPointerData(id);\n\t\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\t\t\n\t\t\tvar target=null, oTarget = o.target;\n\t\t\tif (!owner && (oTarget || nextStage)) { target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\t\t\t\n\t\t\tif (o.down) { this._dispatchMouseEvent(this, \"stagemouseup\", false, id, o, e, target); o.down = false; }\n\t\t\t\n\t\t\tif (target == oTarget) { this._dispatchMouseEvent(oTarget, \"click\", true, id, o, e); }\n\t\t\tthis._dispatchMouseEvent(oTarget, \"pressup\", true, id, o, e);\n\t\t\t\n\t\t\tif (clear) {\n\t\t\t\tif (id==this._primaryPointerID) { this._primaryPointerID = null; }\n\t\t\t\tdelete(this._pointerData[id]);\n\t\t\t} else { o.target = null; }\n\t\t\t\n\t\t\tnextStage&&nextStage._handlePointerUp(id, e, clear, owner || target && this);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleMouseDown\n\t\t * @protected\n\t\t * @param {MouseEvent} e\n\t\t **/\n\t\tp._handleMouseDown = function(e) {\n\t\t\tthis._handlePointerDown(-1, e, e.pageX, e.pageY);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handlePointerDown\n\t\t * @protected\n\t\t * @param {Number} id\n\t\t * @param {Event} e\n\t\t * @param {Number} pageX\n\t\t * @param {Number} pageY\n\t\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t\t **/\n\t\tp._handlePointerDown = function(id, e, pageX, pageY, owner) {\n\t\t\tif (this.preventSelection) { e.preventDefault(); }\n\t\t\tif (this._primaryPointerID == null || id === -1) { this._primaryPointerID = id; } // mouse always takes over.\n\t\t\t\n\t\t\tif (pageY != null) { this._updatePointerPosition(id, e, pageX, pageY); }\n\t\t\tvar target = null, nextStage = this._nextStage, o = this._getPointerData(id);\n\t\t\tif (!owner) { target = o.target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\t\n\t\t\tif (o.inBounds) { this._dispatchMouseEvent(this, \"stagemousedown\", false, id, o, e, target); o.down = true; }\n\t\t\tthis._dispatchMouseEvent(target, \"mousedown\", true, id, o, e);\n\t\t\t\n\t\t\tnextStage&&nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _testMouseOver\n\t\t * @param {Boolean} clear If true, clears the mouseover / rollover (ie. no target)\n\t\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t\t * @param {Stage} eventTarget The stage that the cursor is actively over.\n\t\t * @protected\n\t\t **/\n\t\tp._testMouseOver = function(clear, owner, eventTarget) {\n\t\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\t\t\n\t\t\tvar nextStage = this._nextStage;\n\t\t\tif (!this._mouseOverIntervalID) {\n\t\t\t\t// not enabled for mouseover, but should still relay the event.\n\t\t\t\tnextStage&&nextStage._testMouseOver(clear, owner, eventTarget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar o = this._getPointerData(-1);\n\t\t\t// only update if the mouse position has changed. This provides a lot of optimization, but has some trade-offs.\n\t\t\tif (!o || (!clear && this.mouseX == this._mouseOverX && this.mouseY == this._mouseOverY && this.mouseInBounds)) { return; }\n\t\t\t\n\t\t\tvar e = o.posEvtObj;\n\t\t\tvar isEventTarget = eventTarget || e&&(e.target == this.canvas);\n\t\t\tvar target=null, common = -1, cursor=\"\", t, i, l;\n\t\t\t\n\t\t\tif (!owner && (clear || this.mouseInBounds && isEventTarget)) {\n\t\t\t\ttarget = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);\n\t\t\t\tthis._mouseOverX = this.mouseX;\n\t\t\t\tthis._mouseOverY = this.mouseY;\n\t\t\t}\n\t\n\t\t\tvar oldList = this._mouseOverTarget||[];\n\t\t\tvar oldTarget = oldList[oldList.length-1];\n\t\t\tvar list = this._mouseOverTarget = [];\n\t\n\t\t\t// generate ancestor list and check for cursor:\n\t\t\tt = target;\n\t\t\twhile (t) {\n\t\t\t\tlist.unshift(t);\n\t\t\t\tif (!cursor) { cursor = t.cursor; }\n\t\t\t\tt = t.parent;\n\t\t\t}\n\t\t\tthis.canvas.style.cursor = cursor;\n\t\t\tif (!owner && eventTarget) { eventTarget.canvas.style.cursor = cursor; }\n\t\n\t\t\t// find common ancestor:\n\t\t\tfor (i=0,l=list.length; i<l; i++) {\n\t\t\t\tif (list[i] != oldList[i]) { break; }\n\t\t\t\tcommon = i;\n\t\t\t}\n\t\n\t\t\tif (oldTarget != target) {\n\t\t\t\tthis._dispatchMouseEvent(oldTarget, \"mouseout\", true, -1, o, e, target);\n\t\t\t}\n\t\n\t\t\tfor (i=oldList.length-1; i>common; i--) {\n\t\t\t\tthis._dispatchMouseEvent(oldList[i], \"rollout\", false, -1, o, e, target);\n\t\t\t}\n\t\n\t\t\tfor (i=list.length-1; i>common; i--) {\n\t\t\t\tthis._dispatchMouseEvent(list[i], \"rollover\", false, -1, o, e, oldTarget);\n\t\t\t}\n\t\n\t\t\tif (oldTarget != target) {\n\t\t\t\tthis._dispatchMouseEvent(target, \"mouseover\", true, -1, o, e, oldTarget);\n\t\t\t}\n\t\t\t\n\t\t\tnextStage&&nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleDoubleClick\n\t\t * @protected\n\t\t * @param {MouseEvent} e\n\t\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t\t **/\n\t\tp._handleDoubleClick = function(e, owner) {\n\t\t\tvar target=null, nextStage=this._nextStage, o=this._getPointerData(-1);\n\t\t\tif (!owner) {\n\t\t\t\ttarget = this._getObjectsUnderPoint(o.x, o.y, null, true);\n\t\t\t\tthis._dispatchMouseEvent(target, \"dblclick\", true, -1, o, e);\n\t\t\t}\n\t\t\tnextStage&&nextStage._handleDoubleClick(e, owner || target && this);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _dispatchMouseEvent\n\t\t * @protected\n\t\t * @param {DisplayObject} target\n\t\t * @param {String} type\n\t\t * @param {Boolean} bubbles\n\t\t * @param {Number} pointerId\n\t\t * @param {Object} o\n\t\t * @param {MouseEvent} [nativeEvent]\n\t\t * @param {DisplayObject} [relatedTarget]\n\t\t **/\n\t\tp._dispatchMouseEvent = function(target, type, bubbles, pointerId, o, nativeEvent, relatedTarget) {\n\t\t\t// TODO: might be worth either reusing MouseEvent instances, or adding a willTrigger method to avoid GC.\n\t\t\tif (!target || (!bubbles && !target.hasEventListener(type))) { return; }\n\t\t\t/*\n\t\t\t// TODO: account for stage transformations?\n\t\t\tthis._mtx = this.getConcatenatedMatrix(this._mtx).invert();\n\t\t\tvar pt = this._mtx.transformPoint(o.x, o.y);\n\t\t\tvar evt = new createjs.MouseEvent(type, bubbles, false, pt.x, pt.y, nativeEvent, pointerId, pointerId==this._primaryPointerID || pointerId==-1, o.rawX, o.rawY);\n\t\t\t*/\n\t\t\tvar evt = new createjs.MouseEvent(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId === this._primaryPointerID || pointerId === -1, o.rawX, o.rawY, relatedTarget);\n\t\t\ttarget.dispatchEvent(evt);\n\t\t};\n\t\n\t\n\t\tcreatejs.Stage = createjs.promote(Stage, \"Container\");\n\t}());\n\t\n\t//##############################################################################\n\t// Bitmap.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\n\t\t/**\n\t\t * A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\n\t\t * HTML element, or a string.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n\t\t *\n\t\t * <strong>Notes:</strong>\n\t\t * <ol>\n\t\t *     <li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\n\t\t *      will be displayed.</li>\n\t\t *     <li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,\n\t\t *     the Bitmap can be cached.</li>\n\t\t *     <li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This\n\t\t *     happens in all browsers except recent Firefox builds.</li>\n\t\t *     <li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using\n\t\t *     methods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting\n\t\t *     `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`</li>\n\t\t * </ol>\n\t\t *\n\t\t * @class Bitmap\n\t\t * @extends DisplayObject\n\t\t * @constructor\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} imageOrUri The source object or URI to an image to\n\t\t * display. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.\n\t\t * If it is a URI, a new Image object will be constructed and assigned to the .image property.\n\t\t **/\n\t\tfunction Bitmap(imageOrUri) {\n\t\t\tthis.DisplayObject_constructor();\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The image to render. This can be an Image, a Canvas, or a Video. Not all browsers (especially\n\t\t\t * mobile browsers) support drawing video to a canvas.\n\t\t\t * @property image\n\t\t\t * @type HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n\t\t\t **/\n\t\t\tif (typeof imageOrUri == \"string\") {\n\t\t\t\tthis.image = document.createElement(\"img\");\n\t\t\t\tthis.image.src = imageOrUri;\n\t\t\t} else {\n\t\t\t\tthis.image = imageOrUri;\n\t\t\t}\n\t\t\n\t\t\t/**\n\t\t\t * Specifies an area of the source image to draw. If omitted, the whole image will be drawn.\n\t\t\t * Note that video sources must have a width / height set to work correctly with `sourceRect`.\n\t\t\t * @property sourceRect\n\t\t\t * @type Rectangle\n\t\t\t * @default null\n\t\t\t */\n\t\t\tthis.sourceRect = null;\n\t\t}\n\t\tvar p = createjs.extend(Bitmap, createjs.DisplayObject);\n\t\t\n\t\t\n\t// public methods:\n\t\t/**\n\t\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t\t * @method initialize\n\t\t * @deprecated in favour of `createjs.promote()`\n\t\t **/\n\t\tp.initialize = Bitmap; // TODO: deprecated.\n\t\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\tvar image = this.image;\n\t\t\tvar hasContent = this.cacheCanvas || (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns true if the draw was handled (useful for overriding functionality).\n\t\t *\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n\t\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t\t * into itself).\n\t\t * @return {Boolean}\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\tif (this.DisplayObject_draw(ctx, ignoreCache) || !this.image) { return true; }\n\t\t\tvar img = this.image, rect = this.sourceRect;\n\t\t\tif (rect) {\n\t\t\t\t// some browsers choke on out of bound values, so we'll fix them:\n\t\t\t\tvar x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height, x = 0, y = 0, w = img.width, h = img.height;\n\t\t\t\tif (x1 < 0) { x -= x1; x1 = 0; }\n\t\t\t\tif (x2 > w) { x2 = w; }\n\t\t\t\tif (y1 < 0) { y -= y1; y1 = 0; }\n\t\t\t\tif (y2 > h) { y2 = h; }\n\t\t\t\tctx.drawImage(img, x1, y1, x2-x1, y2-y1, x, y, x2-x1, y2-y1);\n\t\t\t} else {\n\t\t\t\tctx.drawImage(img, 0, 0);\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\t//Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n\t\t//Bitmap. This is why they have no method implementations.\n\t\t\n\t\t/**\n\t\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t\t *\n\t\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t\t * method.\n\t\t * @method cache\n\t\t **/\n\t\t\n\t\t/**\n\t\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t\t *\n\t\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t\t * method.\n\t\t * @method updateCache\n\t\t **/\n\t\t\n\t\t/**\n\t\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t\t *\n\t\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t\t * method.\n\t\t * @method uncache\n\t\t **/\n\t\n\t\t/**\n\t\t * Docced in superclass.\n\t\t */\n\t\tp.getBounds = function() {\n\t\t\tvar rect = this.DisplayObject_getBounds();\n\t\t\tif (rect) { return rect; }\n\t\t\tvar image = this.image, o = this.sourceRect || image;\n\t\t\tvar hasContent = (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\t\treturn hasContent ? this._rectangle.setValues(0, 0, o.width, o.height) : null;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a clone of the Bitmap instance.\n\t\t * @method clone\n\t\t * @return {Bitmap} a clone of the Bitmap instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\tvar o = new Bitmap(this.image);\n\t\t\tif (this.sourceRect) { o.sourceRect = this.sourceRect.clone(); }\n\t\t\tthis._cloneProps(o);\n\t\t\treturn o;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Bitmap (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t\t\n\t\tcreatejs.Bitmap = createjs.promote(Bitmap, \"DisplayObject\");\n\t}());\n\t\n\t//##############################################################################\n\t// Sprite.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Displays a frame or sequence of frames (ie. an animation) from a SpriteSheet instance. A sprite sheet is a series of\n\t\t * images (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100\n\t\t * images could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,\n\t\t * play frames as an animation, and even sequence animations together.\n\t\t *\n\t\t * See the {{#crossLink \"SpriteSheet\"}}{{/crossLink}} class for more information on setting up frames and animations.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var instance = new createjs.Sprite(spriteSheet);\n\t\t *      instance.gotoAndStop(\"frameName\");\n\t\t *\n\t\t * Until {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} is called,\n\t\t * only the first defined frame defined in the sprite sheet will be displayed.\n\t\t *\n\t\t * @class Sprite\n\t\t * @extends DisplayObject\n\t\t * @constructor\n\t\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame\n\t\t * dimensions, and frame data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t\t * @param {String|Number} [frameOrAnimation] The frame number or animation to play initially.\n\t\t **/\n\t\tfunction Sprite(spriteSheet, frameOrAnimation) {\n\t\t\tthis.DisplayObject_constructor();\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The frame index that will be drawn when draw is called. Note that with some {{#crossLink \"SpriteSheet\"}}{{/crossLink}}\n\t\t\t * definitions, this will advance non-sequentially. This will always be an integer value.\n\t\t\t * @property currentFrame\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.currentFrame = 0;\n\t\t\n\t\t\t/**\n\t\t\t * Returns the name of the currently playing animation.\n\t\t\t * @property currentAnimation\n\t\t\t * @type {String}\n\t\t\t * @final\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.currentAnimation = null;\n\t\t\n\t\t\t/**\n\t\t\t * Prevents the animation from advancing each tick automatically. For example, you could create a sprite\n\t\t\t * sheet of icons, set paused to true, and display the appropriate icon by setting <code>currentFrame</code>.\n\t\t\t * @property paused\n\t\t\t * @type {Boolean}\n\t\t\t * @default false\n\t\t\t **/\n\t\t\tthis.paused = true;\n\t\t\n\t\t\t/**\n\t\t\t * The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\n\t\t\t * data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t\t\t * @property spriteSheet\n\t\t\t * @type {SpriteSheet}\n\t\t\t * @readonly\n\t\t\t **/\n\t\t\tthis.spriteSheet = spriteSheet;\n\t\t\n\t\t\t/**\n\t\t\t * Specifies the current frame index within the currently playing animation. When playing normally, this will increase\n\t\t\t * from 0 to n-1, where n is the number of frames in the current animation.\n\t\t\t *\n\t\t\t * This could be a non-integer value if\n\t\t\t * using time-based playback (see {{#crossLink \"Sprite/framerate\"}}{{/crossLink}}, or if the animation's speed is\n\t\t\t * not an integer.\n\t\t\t * @property currentAnimationFrame\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.currentAnimationFrame = 0;\n\t\t\n\t\t\t/**\n\t\t\t * By default Sprite instances advance one frame per tick. Specifying a framerate for the Sprite (or its related\n\t\t\t * SpriteSheet) will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n\t\t\t * framerate.\n\t\t\t *\n\t\t\t * For example, if a Sprite with a framerate of 10 is placed on a Stage being updated at 40fps, then the Sprite will\n\t\t\t * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n\t\t\t * vary slightly between frames.\n\t\t\t *\n\t\t\t * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n\t\t\t * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t\t\t * @property framerate\n\t\t\t * @type {Number}\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.framerate = 0;\n\t\t\n\t\t\n\t\t// private properties:\n\t\t\t/**\n\t\t\t * Current animation object.\n\t\t\t * @property _animation\n\t\t\t * @protected\n\t\t\t * @type {Object}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis._animation = null;\n\t\t\n\t\t\t/**\n\t\t\t * Current frame index.\n\t\t\t * @property _currentFrame\n\t\t\t * @protected\n\t\t\t * @type {Number}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis._currentFrame = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * Skips the next auto advance. Used by gotoAndPlay to avoid immediately jumping to the next frame\n\t\t\t * @property _skipAdvance\n\t\t\t * @protected\n\t\t\t * @type {Boolean}\n\t\t\t * @default false\n\t\t\t **/\n\t\t\tthis._skipAdvance = false;\n\t\t\t\n\t\t\t\n\t\t\tif (frameOrAnimation != null) { this.gotoAndPlay(frameOrAnimation); }\n\t\t}\n\t\tvar p = createjs.extend(Sprite, createjs.DisplayObject);\n\t\n\t\t/**\n\t\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t\t * @method initialize\n\t\t * @deprecated in favour of `createjs.promote()`\n\t\t **/\n\t\tp.initialize = Sprite; // TODO: Deprecated. This is for backwards support of FlashCC spritesheet export.\n\t\n\t\n\t// events:\n\t\t/**\n\t\t * Dispatched when an animation reaches its ends.\n\t\t * @event animationend\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @param {String} name The name of the animation that just ended.\n\t\t * @param {String} next The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.\n\t\t * @since 0.6.0\n\t\t */\n\t\t \n\t\t/**\n\t\t * Dispatched any time the current frame changes. For example, this could be due to automatic advancement on a tick,\n\t\t * or calling gotoAndPlay() or gotoAndStop().\n\t\t * @event change\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t */\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\tvar hasContent = this.cacheCanvas || this.spriteSheet.complete;\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns true if the draw was handled (useful for overriding functionality).\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t\t * into itself).\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\t\tthis._normalizeFrame();\n\t\t\tvar o = this.spriteSheet.getFrame(this._currentFrame|0);\n\t\t\tif (!o) { return false; }\n\t\t\tvar rect = o.rect;\n\t\t\tif (rect.width && rect.height) { ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height); }\n\t\t\treturn true;\n\t\t};\n\t\n\t\t//Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n\t\t//Bitmap. This is why they have no method implementations.\n\t\n\t\t/**\n\t\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t\t * You should not cache Sprite instances as it can degrade performance.\n\t\t * @method cache\n\t\t **/\n\t\n\t\t/**\n\t\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t\t * You should not cache Sprite instances as it can degrade performance.\n\t\t * @method updateCache\n\t\t **/\n\t\n\t\t/**\n\t\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t\t * You should not cache Sprite instances as it can degrade performance.\n\t\t * @method uncache\n\t\t **/\n\t\n\t\t/**\n\t\t * Play (unpause) the current animation. The Sprite will be paused if either {{#crossLink \"Sprite/stop\"}}{{/crossLink}}\n\t\t * or {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} is called. Single frame animations will remain\n\t\t * unchanged.\n\t\t * @method play\n\t\t **/\n\t\tp.play = function() {\n\t\t\tthis.paused = false;\n\t\t};\n\t\n\t\t/**\n\t\t * Stop playing a running animation. The Sprite will be playing if {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}\n\t\t * is called. Note that calling {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} or {{#crossLink \"Sprite/play\"}}{{/crossLink}}\n\t\t * will resume playback.\n\t\t * @method stop\n\t\t **/\n\t\tp.stop = function() {\n\t\t\tthis.paused = true;\n\t\t};\n\t\n\t\t/**\n\t\t * Sets paused to false and plays the specified animation name, named frame, or frame number.\n\t\t * @method gotoAndPlay\n\t\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t\t * and begin playing.\n\t\t **/\n\t\tp.gotoAndPlay = function(frameOrAnimation) {\n\t\t\tthis.paused = false;\n\t\t\tthis._skipAdvance = true;\n\t\t\tthis._goto(frameOrAnimation);\n\t\t};\n\t\n\t\t/**\n\t\t * Sets paused to true and seeks to the specified animation name, named frame, or frame number.\n\t\t * @method gotoAndStop\n\t\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t\t * and stop.\n\t\t **/\n\t\tp.gotoAndStop = function(frameOrAnimation) {\n\t\t\tthis.paused = true;\n\t\t\tthis._goto(frameOrAnimation);\n\t\t};\n\t\n\t\t/**\n\t\t * Advances the playhead. This occurs automatically each tick by default.\n\t\t * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite\n\t\t * or its SpriteSheet.\n\t\t * @method advance\n\t\t*/\n\t\tp.advance = function(time) {\n\t\t\tvar fps = this.framerate || this.spriteSheet.framerate;\n\t\t\tvar t = (fps && time != null) ? time/(1000/fps) : 1;\n\t\t\tthis._normalizeFrame(t);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the current frame relative to\n\t\t * the origin. For example, a 90 x 70 frame with <code>regX=50</code> and <code>regY=40</code> would return a\n\t\t * rectangle with [x=-50, y=-40, width=90, height=70]. This ignores transformations on the display object.\n\t\t *\n\t\t * Also see the SpriteSheet {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}} method.\n\t\t * @method getBounds\n\t\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully\n\t\t * loaded.\n\t\t **/\n\t\tp.getBounds = function() {\n\t\t\t// TODO: should this normalizeFrame?\n\t\t\treturn this.DisplayObject_getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned\n\t\t * instances.\n\t\t * @method clone\n\t\t * @return {Sprite} a clone of the Sprite instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn this._cloneProps(new Sprite(this.spriteSheet));\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Sprite (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _cloneProps\n\t\t * @param {Sprite} o\n\t\t * @return {Sprite} o\n\t\t * @protected\n\t\t **/\n\t\tp._cloneProps = function(o) {\n\t\t\tthis.DisplayObject__cloneProps(o);\n\t\t\to.currentFrame = this.currentFrame;\n\t\t\to.currentAnimation = this.currentAnimation;\n\t\t\to.paused = this.paused;\n\t\t\to.currentAnimationFrame = this.currentAnimationFrame;\n\t\t\to.framerate = this.framerate;\n\t\t\t\n\t\t\to._animation = this._animation;\n\t\t\to._currentFrame = this._currentFrame;\n\t\t\to._skipAdvance = this._skipAdvance;\n\t\t\treturn o;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Advances the <code>currentFrame</code> if paused is not true. This is called automatically when the {{#crossLink \"Stage\"}}{{/crossLink}}\n\t\t * ticks.\n\t\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t\t * @protected\n\t\t * @method _tick\n\t\t **/\n\t\tp._tick = function(evtObj) {\n\t\t\tif (!this.paused) {\n\t\t\t\tif (!this._skipAdvance) { this.advance(evtObj&&evtObj.delta); }\n\t\t\t\tthis._skipAdvance = false;\n\t\t\t}\n\t\t\tthis.DisplayObject__tick(evtObj);\n\t\t};\n\t\n\t\n\t\t/**\n\t\t * Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.\n\t\t * @protected\n\t\t * @method _normalizeFrame\n\t\t **/\n\t\tp._normalizeFrame = function(frameDelta) {\n\t\t\tframeDelta = frameDelta || 0;\n\t\t\tvar animation = this._animation;\n\t\t\tvar paused = this.paused;\n\t\t\tvar frame = this._currentFrame;\n\t\t\tvar l;\n\t\t\t\n\t\t\tif (animation) {\n\t\t\t\tvar speed = animation.speed || 1;\n\t\t\t\tvar animFrame = this.currentAnimationFrame;\n\t\t\t\tl = animation.frames.length;\n\t\t\t\tif (animFrame + frameDelta * speed >= l) {\n\t\t\t\t\tvar next = animation.next;\n\t\t\t\t\tif (this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {\n\t\t\t\t\t\t// something changed in the event stack, so we shouldn't make any more changes here.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (next) {\n\t\t\t\t\t\t// sequence. Automatically calls _normalizeFrame again with the remaining frames.\n\t\t\t\t\t\treturn this._goto(next, frameDelta - (l - animFrame) / speed);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// end.\n\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\tanimFrame = animation.frames.length - 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tanimFrame += frameDelta * speed;\n\t\t\t\t}\n\t\t\t\tthis.currentAnimationFrame = animFrame;\n\t\t\t\tthis._currentFrame = animation.frames[animFrame | 0]\n\t\t\t} else {\n\t\t\t\tframe = (this._currentFrame += frameDelta);\n\t\t\t\tl = this.spriteSheet.getNumFrames();\n\t\t\t\tif (frame >= l && l > 0) {\n\t\t\t\t\tif (!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {\n\t\t\t\t\t\t// looped.\n\t\t\t\t\t\tif ((this._currentFrame -= l) >= l) { return this._normalizeFrame(); }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tframe = this._currentFrame | 0;\n\t\t\tif (this.currentFrame != frame) {\n\t\t\t\tthis.currentFrame = frame;\n\t\t\t\tthis.dispatchEvent(\"change\");\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Dispatches the \"animationend\" event. Returns true if a handler changed the animation (ex. calling {{#crossLink \"Sprite/stop\"}}{{/crossLink}},\n\t\t * {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}, etc.)\n\t\t * @property _dispatchAnimationEnd\n\t\t * @private\n\t\t * @type {Function}\n\t\t **/\n\t\tp._dispatchAnimationEnd = function(animation, frame, paused, next, end) {\n\t\t\tvar name = animation ? animation.name : null;\n\t\t\tif (this.hasEventListener(\"animationend\")) {\n\t\t\t\tvar evt = new createjs.Event(\"animationend\");\n\t\t\t\tevt.name = name;\n\t\t\t\tevt.next = next;\n\t\t\t\tthis.dispatchEvent(evt);\n\t\t\t}\n\t\t\t// did the animation get changed in the event stack?:\n\t\t\tvar changed = (this._animation != animation || this._currentFrame != frame);\n\t\t\t// if the animation hasn't changed, but the sprite was paused, then we want to stick to the last frame:\n\t\t\tif (!changed && !paused && this.paused) { this.currentAnimationFrame = end; changed = true; }\n\t\t\treturn changed;\n\t\t};\n\t\n\t\t/**\n\t\t * Moves the playhead to the specified frame number or animation.\n\t\t * @method _goto\n\t\t * @param {String|Number} frameOrAnimation The frame number or animation that the playhead should move to.\n\t\t * @param {Boolean} [frame] The frame of the animation to go to. Defaults to 0.\n\t\t * @protected\n\t\t **/\n\t\tp._goto = function(frameOrAnimation, frame) {\n\t\t\tthis.currentAnimationFrame = 0;\n\t\t\tif (isNaN(frameOrAnimation)) {\n\t\t\t\tvar data = this.spriteSheet.getAnimation(frameOrAnimation);\n\t\t\t\tif (data) {\n\t\t\t\t\tthis._animation = data;\n\t\t\t\t\tthis.currentAnimation = frameOrAnimation;\n\t\t\t\t\tthis._normalizeFrame(frame);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.currentAnimation = this._animation = null;\n\t\t\t\tthis._currentFrame = frameOrAnimation;\n\t\t\t\tthis._normalizeFrame();\n\t\t\t}\n\t\t};\n\t\n\t\n\t\tcreatejs.Sprite = createjs.promote(Sprite, \"DisplayObject\");\n\t}());\n\t\n\t//##############################################################################\n\t// Shape.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * A Shape allows you to display vector art in the display list. It composites a {{#crossLink \"Graphics\"}}{{/crossLink}}\n\t\t * instance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape\n\t\t * instances to display the same vector graphics with different positions or transforms.\n\t\t *\n\t\t * If the vector art will not\n\t\t * change between draws, you may want to use the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method to reduce the\n\t\t * rendering cost.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var graphics = new createjs.Graphics().beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n\t\t *      var shape = new createjs.Shape(graphics);\n\t\t *\n\t\t *      //Alternatively use can also use the graphics property of the Shape class to renderer the same as above.\n\t\t *      var shape = new createjs.Shape();\n\t\t *      shape.graphics.beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n\t\t *\n\t\t * @class Shape\n\t\t * @extends DisplayObject\n\t\t * @constructor\n\t\t * @param {Graphics} graphics Optional. The graphics instance to display. If null, a new Graphics instance will be created.\n\t\t **/\n\t\tfunction Shape(graphics) {\n\t\t\tthis.DisplayObject_constructor();\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The graphics instance to display.\n\t\t\t * @property graphics\n\t\t\t * @type Graphics\n\t\t\t **/\n\t\t\tthis.graphics = graphics ? graphics : new createjs.Graphics();\n\t\t}\n\t\tvar p = createjs.extend(Shape, createjs.DisplayObject);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the Shape would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\tvar hasContent = this.cacheCanvas || (this.graphics && !this.graphics.isEmpty());\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the Shape into the specified context ignoring its visible, alpha, shadow, and transform. Returns true if\n\t\t * the draw was handled (useful for overriding functionality).\n\t\t *\n\t\t * <i>NOTE: This method is mainly for internal use, though it may be useful for advanced uses.</i>\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t\t * @return {Boolean}\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\t\tthis.graphics.draw(ctx, this);\n\t\t\treturn true;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to\n\t\t * their defaults (for example .parent).\n\t\t * @method clone\n\t\t * @param {Boolean} recursive If true, this Shape's {{#crossLink \"Graphics\"}}{{/crossLink}} instance will also be\n\t\t * cloned. If false, the Graphics instance will be shared with the new Shape.\n\t\t **/\n\t\tp.clone = function(recursive) {\n\t\t\tvar g = (recursive && this.graphics) ? this.graphics.clone() : this.graphics;\n\t\t\treturn  this._cloneProps(new Shape(g));\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Shape (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t\n\t\tcreatejs.Shape = createjs.promote(Shape, \"DisplayObject\");\n\t}());\n\t\n\t//##############################################################################\n\t// Text.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the\n\t\t * lineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML\n\t\t * text above or below the canvas relative to items in the display list using the {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n\t\t * method, or using {{#crossLink \"DOMElement\"}}{{/crossLink}}.\n\t\t *\n\t\t * <b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use\n\t\t * multiple font styles, you will need to create multiple text instances, and position them manually.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var text = new createjs.Text(\"Hello World\", \"20px Arial\", \"#ff7700\");\n\t\t *      text.x = 100;\n\t\t *      text.textBaseline = \"alphabetic\";\n\t\t *\n\t\t * CreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser\n\t\t * before it can be displayed.\n\t\t *\n\t\t * <strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all\n\t\t * browsers will render Text exactly the same.\n\t\t * @class Text\n\t\t * @extends DisplayObject\n\t\t * @constructor\n\t\t * @param {String} [text] The text to display.\n\t\t * @param {String} [font] The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold\n\t\t * 36px Arial\").\n\t\t * @param {String} [color] The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.\n\t\t * \"#F00\", \"red\", or \"#FF0000\").\n\t\t **/\n\t\tfunction Text(text, font, color) {\n\t\t\tthis.DisplayObject_constructor();\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The text to display.\n\t\t\t * @property text\n\t\t\t * @type String\n\t\t\t **/\n\t\t\tthis.text = text;\n\t\t\n\t\t\t/**\n\t\t\t * The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").\n\t\t\t * @property font\n\t\t\t * @type String\n\t\t\t **/\n\t\t\tthis.font = font;\n\t\t\n\t\t\t/**\n\t\t\t * The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\"). Default is \"#000\".\n\t\t\t * It will also accept valid canvas fillStyle values.\n\t\t\t * @property color\n\t\t\t * @type String\n\t\t\t **/\n\t\t\tthis.color = color;\n\t\t\n\t\t\t/**\n\t\t\t * The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed\n\t\t\t * information view the\n\t\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t\t * whatwg spec</a>. Default is \"left\".\n\t\t\t * @property textAlign\n\t\t\t * @type String\n\t\t\t **/\n\t\t\tthis.textAlign = \"left\";\n\t\t\n\t\t\t/**\n\t\t\t * The vertical alignment point on the font. Any of \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", or\n\t\t\t * \"bottom\". For detailed information view the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t\t * whatwg spec</a>. Default is \"top\".\n\t\t\t * @property textBaseline\n\t\t\t * @type String\n\t\t\t*/\n\t\t\tthis.textBaseline = \"top\";\n\t\t\n\t\t\t/**\n\t\t\t * The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or\n\t\t\t * shrunk to make it fit in this width. For detailed information view the\n\t\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t\t * whatwg spec</a>.\n\t\t\t * @property maxWidth\n\t\t\t * @type Number\n\t\t\t*/\n\t\t\tthis.maxWidth = null;\n\t\t\n\t\t\t/**\n\t\t\t * If greater than 0, the text will be drawn as a stroke (outline) of the specified width.\n\t\t\t * @property outline\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.outline = 0;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0,\n\t\t\t * the value of getMeasuredLineHeight is used.\n\t\t\t * @property lineHeight\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.lineHeight = 0;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null,\n\t\t\t * the text will not be wrapped.\n\t\t\t * @property lineWidth\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.lineWidth = null;\n\t\t}\n\t\tvar p = createjs.extend(Text, createjs.DisplayObject);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\t\n\t// static properties:\n\t\t/**\n\t\t * @property _workingContext\n\t\t * @type CanvasRenderingContext2D\n\t\t * @private\n\t\t **/\n\t\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\t\tif (canvas.getContext) { Text._workingContext = canvas.getContext(\"2d\"); canvas.width = canvas.height = 1; }\n\t\t\n\t\t\n\t// constants:\n\t\t/**\n\t\t * Lookup table for the ratio to offset bounds x calculations based on the textAlign property.\n\t\t * @property H_OFFSETS\n\t\t * @type Object\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tText.H_OFFSETS = {start: 0, left: 0, center: -0.5, end: -1, right: -1};\n\t\t\n\t\t/**\n\t\t * Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.\n\t\t * @property H_OFFSETS\n\t\t * @type Object\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tText.V_OFFSETS = {top: 0, hanging: -0.01, middle: -0.4, alphabetic: -0.8, ideographic: -0.85, bottom: -1};\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Whether the display object would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\tvar hasContent = this.cacheCanvas || (this.text != null && this.text !== \"\");\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the Text into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns true if the draw was handled (useful for overriding functionality).\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t\t * into itself).\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\n\t\t\tvar col = this.color || \"#000\";\n\t\t\tif (this.outline) { ctx.strokeStyle = col; ctx.lineWidth = this.outline*1; }\n\t\t\telse { ctx.fillStyle = col; }\n\t\t\t\n\t\t\tthis._drawText(this._prepContext(ctx));\n\t\t\treturn true;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the measured, untransformed width of the text without wrapping. Use getBounds for a more robust value.\n\t\t * @method getMeasuredWidth\n\t\t * @return {Number} The measured, untransformed width of the text.\n\t\t **/\n\t\tp.getMeasuredWidth = function() {\n\t\t\treturn this._getMeasuredWidth(this.text);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured\n\t\t * width of a \"M\" character multiplied by 1.2, which provides an approximate line height for most fonts.\n\t\t * @method getMeasuredLineHeight\n\t\t * @return {Number} an approximate line height of the text, ignoring the lineHeight property. This is\n\t\t * based on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.\n\t\t **/\n\t\tp.getMeasuredLineHeight = function() {\n\t\t\treturn this._getMeasuredWidth(\"M\")*1.2;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns the approximate height of multi-line text by multiplying the number of lines against either the\n\t\t * <code>lineHeight</code> (if specified) or {{#crossLink \"Text/getMeasuredLineHeight\"}}{{/crossLink}}. Note that\n\t\t * this operation requires the text flowing logic to run, which has an associated CPU cost.\n\t\t * @method getMeasuredHeight\n\t\t * @return {Number} The approximate height of the untransformed multi-line text.\n\t\t **/\n\t\tp.getMeasuredHeight = function() {\n\t\t\treturn this._drawText(null,{}).height;\n\t\t};\n\t\n\t\t/**\n\t\t * Docced in superclass.\n\t\t */\n\t\tp.getBounds = function() {\n\t\t\tvar rect = this.DisplayObject_getBounds();\n\t\t\tif (rect) { return rect; }\n\t\t\tif (this.text == null || this.text === \"\") { return null; }\n\t\t\tvar o = this._drawText(null, {});\n\t\t\tvar w = (this.maxWidth && this.maxWidth < o.width) ? this.maxWidth : o.width;\n\t\t\tvar x = w * Text.H_OFFSETS[this.textAlign||\"left\"];\n\t\t\tvar lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n\t\t\tvar y = lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n\t\t\treturn this._rectangle.setValues(x, y, w, o.height);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns an object with width, height, and lines properties. The width and height are the visual width and height\n\t\t * of the drawn text. The lines property contains an array of strings, one for\n\t\t * each line of text that will be drawn, accounting for line breaks and wrapping. These strings have trailing\n\t\t * whitespace removed.\n\t\t * @method getMetrics\n\t\t * @return {Object} An object with width, height, and lines properties.\n\t\t **/\n\t\tp.getMetrics = function() {\n\t\t\tvar o = {lines:[]};\n\t\t\to.lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n\t\t\to.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n\t\t\treturn this._drawText(null, o, o.lines);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of the Text instance.\n\t\t * @method clone\n\t\t * @return {Text} a clone of the Text instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn this._cloneProps(new Text(this.text, this.font, this.color));\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Text (text=\"+  (this.text.length > 20 ? this.text.substr(0, 17)+\"...\" : this.text) +\")]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _cloneProps\n\t\t * @param {Text} o\n\t\t * @protected\n\t\t * @return {Text} o\n\t\t **/\n\t\tp._cloneProps = function(o) {\n\t\t\tthis.DisplayObject__cloneProps(o);\n\t\t\to.textAlign = this.textAlign;\n\t\t\to.textBaseline = this.textBaseline;\n\t\t\to.maxWidth = this.maxWidth;\n\t\t\to.outline = this.outline;\n\t\t\to.lineHeight = this.lineHeight;\n\t\t\to.lineWidth = this.lineWidth;\n\t\t\treturn o;\n\t\t};\n\t\n\t\t/**\n\t\t * @method _getWorkingContext\n\t\t * @param {CanvasRenderingContext2D} ctx\n\t\t * @return {CanvasRenderingContext2D}\n\t\t * @protected\n\t\t **/\n\t\tp._prepContext = function(ctx) {\n\t\t\tctx.font = this.font||\"10px sans-serif\";\n\t\t\tctx.textAlign = this.textAlign||\"left\";\n\t\t\tctx.textBaseline = this.textBaseline||\"top\";\n\t\t\treturn ctx;\n\t\t};\n\t\n\t\t/**\n\t\t * Draws multiline text.\n\t\t * @method _drawText\n\t\t * @param {CanvasRenderingContext2D} ctx\n\t\t * @param {Object} o\n\t\t * @param {Array} lines\n\t\t * @return {Object}\n\t\t * @protected\n\t\t **/\n\t\tp._drawText = function(ctx, o, lines) {\n\t\t\tvar paint = !!ctx;\n\t\t\tif (!paint) {\n\t\t\t\tctx = Text._workingContext;\n\t\t\t\tctx.save();\n\t\t\t\tthis._prepContext(ctx);\n\t\t\t}\n\t\t\tvar lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n\t\t\t\n\t\t\tvar maxW = 0, count = 0;\n\t\t\tvar hardLines = String(this.text).split(/(?:\\r\\n|\\r|\\n)/);\n\t\t\tfor (var i=0, l=hardLines.length; i<l; i++) {\n\t\t\t\tvar str = hardLines[i];\n\t\t\t\tvar w = null;\n\t\t\t\t\n\t\t\t\tif (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {\n\t\t\t\t\t// text wrapping:\n\t\t\t\t\tvar words = str.split(/(\\s)/);\n\t\t\t\t\tstr = words[0];\n\t\t\t\t\tw = ctx.measureText(str).width;\n\t\t\t\t\t\n\t\t\t\t\tfor (var j=1, jl=words.length; j<jl; j+=2) {\n\t\t\t\t\t\t// Line needs to wrap:\n\t\t\t\t\t\tvar wordW = ctx.measureText(words[j] + words[j+1]).width;\n\t\t\t\t\t\tif (w + wordW > this.lineWidth) {\n\t\t\t\t\t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n\t\t\t\t\t\t\tif (lines) { lines.push(str); }\n\t\t\t\t\t\t\tif (w > maxW) { maxW = w; }\n\t\t\t\t\t\t\tstr = words[j+1];\n\t\t\t\t\t\t\tw = ctx.measureText(str).width;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr += words[j] + words[j+1];\n\t\t\t\t\t\t\tw += wordW;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n\t\t\t\tif (lines) { lines.push(str); }\n\t\t\t\tif (o && w == null) { w = ctx.measureText(str).width; }\n\t\t\t\tif (w > maxW) { maxW = w; }\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tif (o) {\n\t\t\t\to.width = maxW;\n\t\t\t\to.height = count*lineHeight;\n\t\t\t}\n\t\t\tif (!paint) { ctx.restore(); }\n\t\t\treturn o;\n\t\t};\n\t\n\t\t/**\n\t\t * @method _drawTextLine\n\t\t * @param {CanvasRenderingContext2D} ctx\n\t\t * @param {String} text\n\t\t * @param {Number} y\n\t\t * @protected\n\t\t **/\n\t\tp._drawTextLine = function(ctx, text, y) {\n\t\t\t// Chrome 17 will fail to draw the text if the last param is included but null, so we feed it a large value instead:\n\t\t\tif (this.outline) { ctx.strokeText(text, 0, y, this.maxWidth||0xFFFF); }\n\t\t\telse { ctx.fillText(text, 0, y, this.maxWidth||0xFFFF); }\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * @method _getMeasuredWidth\n\t\t * @param {String} text\n\t\t * @protected\n\t\t **/\n\t\tp._getMeasuredWidth = function(text) {\n\t\t\tvar ctx = Text._workingContext;\n\t\t\tctx.save();\n\t\t\tvar w = this._prepContext(ctx).measureText(text).width;\n\t\t\tctx.restore();\n\t\t\treturn w;\n\t\t};\n\t\n\t\n\t\tcreatejs.Text = createjs.promote(Text, \"DisplayObject\");\n\t}());\n\t\n\t//##############################################################################\n\t// BitmapText.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs || {};\n\t\n\t(function () {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Displays text using bitmap glyphs defined in a sprite sheet. Multi-line text is supported\n\t\t * using new line characters, but automatic wrapping is not supported. See the \n\t\t * {{#crossLink \"BitmapText/spriteSheet:property\"}}{{/crossLink}}\n\t\t * property for more information on defining glyphs.\n\t\t * \n\t\t * <strong>Important:</strong> BitmapText extends Container, but is not designed to be used as one.\n\t\t * As such, methods like addChild and removeChild are disabled.\n\t\t * @class BitmapText\n\t\t * @extends DisplayObject\n\t\t * @param {String} [text=\"\"] The text to display.\n\t\t * @param {SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.\n\t\t * @constructor\n\t\t **/\n\t\tfunction BitmapText(text, spriteSheet) {\n\t\t\tthis.Container_constructor();\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The text to display.\n\t\t\t * @property text\n\t\t\t * @type String\n\t\t\t * @default \"\"\n\t\t\t **/\n\t\t\tthis.text = text||\"\";\n\t\t\t\n\t\t\t/**\n\t\t\t * A SpriteSheet instance that defines the glyphs for this bitmap text. Each glyph/character\n\t\t\t * should have a single frame animation defined in the sprite sheet named the same as\n\t\t\t * corresponding character. For example, the following animation definition:\n\t\t\t *\n\t\t\t * \t\t\"A\": {frames: [0]}\n\t\t\t *\n\t\t\t * would indicate that the frame at index 0 of the spritesheet should be drawn for the \"A\" character. The short form\n\t\t\t * is also acceptable:\n\t\t\t * \n\t\t\t * \t\t\"A\": 0\n\t\t\t *\n\t\t\t * Note that if a character in the text is not found in the sprite sheet, it will also\n\t\t\t * try to use the alternate case (upper or lower).\n\t\t\t *\n\t\t\t * See SpriteSheet for more information on defining sprite sheet data.\n\t\t\t * @property spriteSheet\n\t\t\t * @type SpriteSheet\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.spriteSheet = spriteSheet;\n\t\t\n\t\t\t/**\n\t\t\t * The height of each line of text. If 0, then it will use a line height calculated\n\t\t\t * by checking for the height of the \"1\", \"T\", or \"L\" character (in that order). If\n\t\t\t * those characters are not defined, it will use the height of the first frame of the\n\t\t\t * sprite sheet.\n\t\t\t * @property lineHeight\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.lineHeight = 0;\n\t\t\n\t\t\t/**\n\t\t\t * This spacing (in pixels) will be added after each character in the output.\n\t\t\t * @property letterSpacing\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.letterSpacing = 0;\n\t\t\n\t\t\t/**\n\t\t\t * If a space character is not defined in the sprite sheet, then empty pixels equal to\n\t\t\t * spaceWidth will be inserted instead. If 0, then it will use a value calculated\n\t\t\t * by checking for the width of the \"1\", \"l\", \"E\", or \"A\" character (in that order). If\n\t\t\t * those characters are not defined, it will use the width of the first frame of the\n\t\t\t * sprite sheet.\n\t\t\t * @property spaceWidth\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t **/\n\t\t\tthis.spaceWidth = 0;\n\t\t\t\n\t\t\t\n\t\t// private properties:\n\t\t \t/**\n\t\t\t * @property _oldProps\n\t\t\t * @type Object\n\t\t\t * @protected\n\t\t\t **/\n\t\t\tthis._oldProps = {text:0,spriteSheet:0,lineHeight:0,letterSpacing:0,spaceWidth:0};\n\t\t}\n\t\tvar p = createjs.extend(BitmapText, createjs.Container);\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t// static properties:\n\t\t/**\n\t\t * BitmapText uses Sprite instances to draw text. To reduce the creation and destruction of instances (and thus garbage collection), it maintains\n\t\t * an internal object pool of sprite instances to reuse. Increasing this value can cause more sprites to be\n\t\t * retained, slightly increasing memory use, but reducing instantiation.\n\t\t * @property maxPoolSize\n\t\t * @type Number\n\t\t * @static\n\t\t * @default 100\n\t\t **/\n\t\tBitmapText.maxPoolSize = 100;\n\t\t\n\t\t/**\n\t\t * Sprite object pool.\n\t\t * @type {Array}\n\t\t * @static\n\t\t * @private\n\t\t */\n\t\tBitmapText._spritePool = [];\n\t\n\t\t\n\t// public methods:\n\t\t/**\n\t\t * Docced in superclass.\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return; }\n\t\t\tthis._updateText();\n\t\t\tthis.Container_draw(ctx, ignoreCache);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Docced in superclass.\n\t\t **/\n\t\tp.getBounds = function() {\n\t\t\tthis._updateText();\n\t\t\treturn this.Container_getBounds();\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\tvar hasContent = this.cacheCanvas || (this.spriteSheet && this.spriteSheet.complete && this.text);\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);\n\t\t};\n\t\t\n\t\tp.clone = function() {\n\t\t\treturn this._cloneProps(new BitmapText(this.text, this.spriteSheet));\n\t\t};\n\t\t\n\t\t/**\n\t\t * <strong>Disabled in BitmapText.</strong>\n\t\t * @method addChild\n\t\t **/\n\t\t/**\n\t\t * <strong>Disabled in BitmapText.</strong>\n\t\t * @method addChildAt\n\t\t **/\n\t\t/**\n\t\t * <strong>Disabled in BitmapText.</strong>\n\t\t * @method removeChild\n\t\t **/\n\t\t/**\n\t\t * <strong>Disabled in BitmapText.</strong>\n\t\t * @method removeChildAt\n\t\t **/\n\t\t/**\n\t\t * <strong>Disabled in BitmapText.</strong>\n\t\t * @method removeAllChildren\n\t\t **/\n\t\tp.addChild = p.addChildAt = p.removeChild = p.removeChildAt = p.removeAllChildren = function() {};\n\t\n\t\n\t// private methods:\n\t \t/**\n\t\t * @method _cloneProps\n\t\t * @param {BitmapText} o\n\t\t * @return {BitmapText} o\n\t\t * @protected\n\t\t **/\n\t\tp._cloneProps = function(o) {\n\t\t\tthis.Container__cloneProps(o);\n\t\t\to.lineHeight = this.lineHeight;\n\t\t\to.letterSpacing = this.letterSpacing;\n\t\t\to.spaceWidth = this.spaceWidth;\n\t\t\treturn o;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _getFrameIndex\n\t\t * @param {String} character\n\t\t * @param {SpriteSheet} spriteSheet\n\t\t * @return {Number}\n\t\t * @protected\n\t\t **/\n\t\tp._getFrameIndex = function(character, spriteSheet) {\n\t\t\tvar c, o = spriteSheet.getAnimation(character);\n\t\t\tif (!o) {\n\t\t\t\t(character != (c = character.toUpperCase())) || (character != (c = character.toLowerCase())) || (c=null);\n\t\t\t\tif (c) { o = spriteSheet.getAnimation(c); }\n\t\t\t}\n\t\t\treturn o && o.frames[0];\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _getFrame\n\t\t * @param {String} character\n\t\t * @param {SpriteSheet} spriteSheet\n\t\t * @return {Object}\n\t\t * @protected\n\t\t **/\n\t\tp._getFrame = function(character, spriteSheet) {\n\t\t\tvar index = this._getFrameIndex(character, spriteSheet);\n\t\t\treturn index == null ? index : spriteSheet.getFrame(index);\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _getLineHeight\n\t\t * @param {SpriteSheet} ss\n\t\t * @return {Number}\n\t\t * @protected\n\t\t **/\n\t\tp._getLineHeight = function(ss) {\n\t\t\tvar frame = this._getFrame(\"1\",ss) || this._getFrame(\"T\",ss) || this._getFrame(\"L\",ss) || ss.getFrame(0);\n\t\t\treturn frame ? frame.rect.height : 1;\n\t\t};\n\t\t/**\n\t\t * @method _getSpaceWidth\n\t\t * @param {SpriteSheet} ss\n\t\t * @return {Number}\n\t\t * @protected\n\t\t **/\n\t\tp._getSpaceWidth = function(ss) {\n\t\t\tvar frame = this._getFrame(\"1\",ss) || this._getFrame(\"l\",ss) || this._getFrame(\"e\",ss) || this._getFrame(\"a\",ss) || ss.getFrame(0);\n\t\t\treturn frame ? frame.rect.width : 1;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _drawText\n\t\t * @protected\n\t\t **/\n\t\tp._updateText = function() {\n\t\t\tvar x=0, y=0, o=this._oldProps, change=false, spaceW=this.spaceWidth, lineH=this.lineHeight, ss=this.spriteSheet;\n\t\t\tvar pool=BitmapText._spritePool, kids=this.children, childIndex=0, numKids=kids.length, sprite;\n\t\t\t\n\t\t\tfor (var n in o) {\n\t\t\t\tif (o[n] != this[n]) {\n\t\t\t\t\to[n] = this[n];\n\t\t\t\t\tchange = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!change) { return; }\n\t\t\t\n\t\t\tvar hasSpace = !!this._getFrame(\" \", ss);\n\t\t\tif (!hasSpace && !spaceW) { spaceW = this._getSpaceWidth(ss); }\n\t\t\tif (!lineH) { lineH = this._getLineHeight(ss); }\n\t\t\t\n\t\t\tfor(var i=0, l=this.text.length; i<l; i++) {\n\t\t\t\tvar character = this.text.charAt(i);\n\t\t\t\tif (character == \" \" && !hasSpace) {\n\t\t\t\t\tx += spaceW;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (character==\"\\n\" || character==\"\\r\") {\n\t\t\t\t\tif (character==\"\\r\" && this.text.charAt(i+1) == \"\\n\") { i++; } // crlf\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty += lineH;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\tvar index = this._getFrameIndex(character, ss);\n\t\t\t\tif (index == null) { continue; }\n\t\t\t\t\n\t\t\t\tif (childIndex < numKids) {\n\t\t\t\t\tsprite = kids[childIndex];\n\t\t\t\t} else {\n\t\t\t\t\tkids.push(sprite = pool.length ? pool.pop() : new createjs.Sprite());\n\t\t\t\t\tsprite.parent = this;\n\t\t\t\t\tnumKids++;\n\t\t\t\t}\n\t\t\t\tsprite.spriteSheet = ss;\n\t\t\t\tsprite.gotoAndStop(index);\n\t\t\t\tsprite.x = x;\n\t\t\t\tsprite.y = y;\n\t\t\t\tchildIndex++;\n\t\t\t\t\n\t\t\t\tx += sprite.getBounds().width + this.letterSpacing;\n\t\t\t}\n\t\t\twhile (numKids > childIndex) {\n\t\t\t\t // faster than removeChild.\n\t\t\t\tpool.push(sprite = kids.pop());\n\t\t\t\tsprite.parent = null;\n\t\t\t\tnumKids--;\n\t\t\t}\n\t\t\tif (pool.length > BitmapText.maxPoolSize) { pool.length = BitmapText.maxPoolSize; }\n\t\t};\n\t\n\t\n\t\tcreatejs.BitmapText = createjs.promote(BitmapText, \"Container\");\n\t}());\n\t\n\t//##############################################################################\n\t// MovieClip.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * The MovieClip class associates a TweenJS Timeline with an EaselJS {{#crossLink \"Container\"}}{{/crossLink}}. It allows\n\t\t * you to create objects which encapsulate timeline animations, state changes, and synched actions. Due to the\n\t\t * complexities inherent in correctly setting up a MovieClip, it is largely intended for tool output and is not included\n\t\t * in the main EaselJS library.\n\t\t *\n\t\t * Currently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have\n\t\t * been made to support time-based timelines in the future.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * This example animates two shapes back and forth. The grey shape starts on the left, but we jump to a mid-point in\n\t\t * the animation using {{#crossLink \"MovieClip/gotoAndPlay\"}}{{/crossLink}}.\n\t\t *\n\t\t *      var stage = new createjs.Stage(\"canvas\");\n\t\t *      createjs.Ticker.addEventListener(\"tick\", stage);\n\t\t *\n\t\t *      var mc = new createjs.MovieClip(null, 0, true, {start:20});\n\t\t *      stage.addChild(mc);\n\t\t *\n\t\t *      var child1 = new createjs.Shape(\n\t\t *          new createjs.Graphics().beginFill(\"#999999\")\n\t\t *              .drawCircle(30,30,30));\n\t\t *      var child2 = new createjs.Shape(\n\t\t *          new createjs.Graphics().beginFill(\"#5a9cfb\")\n\t\t *              .drawCircle(30,30,30));\n\t\t *\n\t\t *      mc.timeline.addTween(\n\t\t *          createjs.Tween.get(child1)\n\t\t *              .to({x:0}).to({x:60}, 50).to({x:0}, 50));\n\t\t *      mc.timeline.addTween(\n\t\t *          createjs.Tween.get(child2)\n\t\t *              .to({x:60}).to({x:0}, 50).to({x:60}, 50));\n\t\t *\n\t\t *      mc.gotoAndPlay(\"start\");\n\t\t *\n\t\t * It is recommended to use <code>tween.to()</code> to animate and set properties (use no duration to have it set\n\t\t * immediately), and the <code>tween.wait()</code> method to create delays between animations. Note that using the\n\t\t * <code>tween.set()</code> method to affect properties will likely not provide the desired result.\n\t\t *\n\t\t * @class MovieClip\n\t\t * @main MovieClip\n\t\t * @extends Container\n\t\t * @constructor\n\t\t * @param {String} [mode=independent] Initial value for the mode property. One of {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}},\n\t\t * {{#crossLink \"MovieClip/SINGLE_FRAME:property\"}}{{/crossLink}}, or {{#crossLink \"MovieClip/SYNCHED:property\"}}{{/crossLink}}.\n\t\t * The default is {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}}.\n\t\t * @param {Number} [startPosition=0] Initial value for the {{#crossLink \"MovieClip/startPosition:property\"}}{{/crossLink}}\n\t\t * property.\n\t\t * @param {Boolean} [loop=true] Initial value for the {{#crossLink \"MovieClip/loop:property\"}}{{/crossLink}}\n\t\t * property. The default is `true`.\n\t\t * @param {Object} [labels=null] A hash of labels to pass to the {{#crossLink \"MovieClip/timeline:property\"}}{{/crossLink}}\n\t\t * instance associated with this MovieClip. Labels only need to be passed if they need to be used.\n\t\t **/\n\t\tfunction MovieClip(mode, startPosition, loop, labels) {\n\t\t\tthis.Container_constructor();\n\t\t\t!MovieClip.inited&&MovieClip.init(); // static init\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED).\n\t\t\t * See each constant for a description of the behaviour.\n\t\t\t * @property mode\n\t\t\t * @type String\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.mode = mode||MovieClip.INDEPENDENT;\n\t\t\n\t\t\t/**\n\t\t\t * Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.\n\t\t\t * @property startPosition\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t */\n\t\t\tthis.startPosition = startPosition || 0;\n\t\t\n\t\t\t/**\n\t\t\t * Indicates whether this MovieClip should loop when it reaches the end of its timeline.\n\t\t\t * @property loop\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tthis.loop = loop;\n\t\t\n\t\t\t/**\n\t\t\t * The current frame of the movieclip.\n\t\t\t * @property currentFrame\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t * @readonly\n\t\t\t */\n\t\t\tthis.currentFrame = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip\n\t\t\t * instance is initialized. Animations are created by adding <a href=\"http://tweenjs.com\">TweenJS</a> Tween\n\t\t\t * instances to the timeline.\n\t\t\t *\n\t\t\t * <h4>Example</h4>\n\t\t\t *\n\t\t\t *      var tween = createjs.Tween.get(target).to({x:0}).to({x:100}, 30);\n\t\t\t *      var mc = new createjs.MovieClip();\n\t\t\t *      mc.timeline.addTween(tween);\n\t\t\t *\n\t\t\t * Elements can be added and removed from the timeline by toggling an \"_off\" property\n\t\t\t * using the <code>tweenInstance.to()</code> method. Note that using <code>Tween.set</code> is not recommended to\n\t\t\t * create MovieClip animations. The following example will toggle the target off on frame 0, and then back on for\n\t\t\t * frame 1. You can use the \"visible\" property to achieve the same effect.\n\t\t\t *\n\t\t\t *      var tween = createjs.Tween.get(target).to({_off:false})\n\t\t\t *          .wait(1).to({_off:true})\n\t\t\t *          .wait(1).to({_off:false});\n\t\t\t *\n\t\t\t * @property timeline\n\t\t\t * @type Timeline\n\t\t\t * @default null\n\t\t\t */\n\t\t\tthis.timeline = new createjs.Timeline(null, labels, {paused:true, position:startPosition, useTicks:true});\n\t\t\n\t\t\t/**\n\t\t\t * If true, the MovieClip's position will not advance when ticked.\n\t\t\t * @property paused\n\t\t\t * @type Boolean\n\t\t\t * @default false\n\t\t\t */\n\t\t\tthis.paused = false;\n\t\t\n\t\t\t/**\n\t\t\t * If true, actions in this MovieClip's tweens will be run when the playhead advances.\n\t\t\t * @property actionsEnabled\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tthis.actionsEnabled = true;\n\t\t\n\t\t\t/**\n\t\t\t * If true, the MovieClip will automatically be reset to its first frame whenever the timeline adds\n\t\t\t * it back onto the display list. This only applies to MovieClip instances with mode=INDEPENDENT.\n\t\t\t * <br><br>\n\t\t\t * For example, if you had a character animation with a \"body\" child MovieClip instance\n\t\t\t * with different costumes on each frame, you could set body.autoReset = false, so that\n\t\t\t * you can manually change the frame it is on, without worrying that it will be reset\n\t\t\t * automatically.\n\t\t\t * @property autoReset\n\t\t\t * @type Boolean\n\t\t\t * @default true\n\t\t\t */\n\t\t\tthis.autoReset = true;\n\t\t\t\n\t\t\t/**\n\t\t\t * An array of bounds for each frame in the MovieClip. This is mainly intended for tool output.\n\t\t\t * @property frameBounds\n\t\t\t * @type Array\n\t\t\t * @default null\n\t\t\t */\n\t\t\tthis.frameBounds = this.frameBounds||null; // TODO: Deprecated. This is for backwards support of FlashCC\n\t\t\t\n\t\t\t/**\n\t\t\t * By default MovieClip instances advance one frame per tick. Specifying a framerate for the MovieClip\n\t\t\t * will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n\t\t\t * framerate.\n\t\t\t *\n\t\t\t * For example, if a MovieClip with a framerate of 10 is placed on a Stage being updated at 40fps, then the MovieClip will\n\t\t\t * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n\t\t\t * vary slightly between frames.\n\t\t\t *\n\t\t\t * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n\t\t\t * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t\t\t * @property framerate\n\t\t\t * @type {Number}\n\t\t\t * @default null\n\t\t\t **/\n\t\t\tthis.framerate = null;\n\t\t\t\n\t\t\t\n\t\t// private properties:\n\t\t\t/**\n\t\t\t * @property _synchOffset\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._synchOffset = 0;\n\t\t\n\t\t\t/**\n\t\t\t * @property _prevPos\n\t\t\t * @type Number\n\t\t\t * @default -1\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._prevPos = -1; // TODO: evaluate using a ._reset Boolean prop instead of -1.\n\t\t\n\t\t\t/**\n\t\t\t * @property _prevPosition\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._prevPosition = 0;\n\t\t\n\t\t\t/**\n\t\t\t * The time remaining from the previous tick, only applicable when .framerate is set.\n\t\t\t * @property _t\n\t\t\t * @type Number\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._t = 0;\n\t\t\n\t\t\t/**\n\t\t\t * List of display objects that are actively being managed by the MovieClip.\n\t\t\t * @property _managed\n\t\t\t * @type Object\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._managed = {};\n\t\t}\n\t\tvar p = createjs.extend(MovieClip, createjs.Container);\n\t\n\t\n\t// constants:\n\t\t/**\n\t\t * The MovieClip will advance independently of its parent, even if its parent is paused.\n\t\t * This is the default mode.\n\t\t * @property INDEPENDENT\n\t\t * @static\n\t\t * @type String\n\t\t * @default \"independent\"\n\t\t * @readonly\n\t\t **/\n\t\tMovieClip.INDEPENDENT = \"independent\";\n\t\n\t\t/**\n\t\t * The MovieClip will only display a single frame (as determined by the startPosition property).\n\t\t * @property SINGLE_FRAME\n\t\t * @static\n\t\t * @type String\n\t\t * @default \"single\"\n\t\t * @readonly\n\t\t **/\n\t\tMovieClip.SINGLE_FRAME = \"single\";\n\t\n\t\t/**\n\t\t * The MovieClip will be advanced only when its parent advances and will be synched to the position of\n\t\t * the parent MovieClip.\n\t\t * @property SYNCHED\n\t\t * @static\n\t\t * @type String\n\t\t * @default \"synched\"\n\t\t * @readonly\n\t\t **/\n\t\tMovieClip.SYNCHED = \"synched\";\n\t\t\n\t\t\n\t// static properties:\n\t\tMovieClip.inited = false;\n\t\t\n\t\t\n\t// static methods:\n\t\tMovieClip.init = function() {\n\t\t\tif (MovieClip.inited) { return; }\n\t\t\t// plugins introduce some overhead to Tween, so we only install this if an MC is instantiated.\n\t\t\tMovieClipPlugin.install();\n\t\t\tMovieClip.inited = true;\n\t\t};\n\t\t\n\t\t\n\t// getter / setters:\n\t\t/**\n\t\t * Use the {{#crossLink \"MovieClip/labels:property\"}}{{/crossLink}} property instead.\n\t\t * @method getLabels\n\t\t * @return {Array}\n\t\t * @deprecated\n\t\t **/\n\t\tp.getLabels = function() {\n\t\t\treturn this.timeline.getLabels();\n\t\t};\n\t\t\n\t\t/**\n\t\t * Use the {{#crossLink \"MovieClip/currentLabel:property\"}}{{/crossLink}} property instead.\n\t\t * @method getCurrentLabel\n\t\t * @return {String}\n\t\t * @deprecated\n\t\t **/\n\t\tp.getCurrentLabel = function() {\n\t\t\tthis._updateTimeline();\n\t\t\treturn this.timeline.getCurrentLabel();\n\t\t};\n\t\t\n\t\t/**\n\t\t * Use the {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}} property instead.\n\t\t * @method getDuration\n\t\t * @return {Number}\n\t\t * @protected\n\t\t **/\n\t\tp.getDuration = function() {\n\t\t\treturn this.timeline.duration;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns an array of objects with label and position (aka frame) properties, sorted by position.\n\t\t * Shortcut to TweenJS: Timeline.getLabels();\n\t\t * @property labels\n\t\t * @type {Array}\n\t\t * @readonly\n\t\t **/\n\t\t\n\t\t/**\n\t\t * Returns the name of the label on or immediately before the current frame. See TweenJS: Timeline.getCurrentLabel()\n\t\t * for more information.\n\t\t * @property currentLabel\n\t\t * @type {String}\n\t\t * @readonly\n\t\t **/\n\t\t\n\t\t/**\n\t\t * Returns the duration of this MovieClip in seconds or ticks. Identical to {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}}\n\t\t * and provided for Flash API compatibility.\n\t\t * @property totalFrames\n\t\t * @type {Number}\n\t\t * @readonly\n\t\t **/\n\t\t\n\t\t/**\n\t\t * Returns the duration of this MovieClip in seconds or ticks.\n\t\t * @property duration\n\t\t * @type {Number}\n\t\t * @readonly\n\t\t **/\n\t\ttry {\n\t\t\tObject.defineProperties(p, {\n\t\t\t\tlabels: { get: p.getLabels },\n\t\t\t\tcurrentLabel: { get: p.getCurrentLabel },\n\t\t\t\ttotalFrames: { get: p.getDuration },\n\t\t\t\tduration: { get: p.getDuration }\n\t\t\t});\n\t\t} catch (e) {}\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t\t * @method initialize\n\t\t * @deprecated in favour of `createjs.promote()`\n\t\t **/\n\t\tp.initialize = MovieClip; // TODO: Deprecated. This is for backwards support of FlashCC\n\t\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t\t **/\n\t\tp.isVisible = function() {\n\t\t\t// children are placed in draw, so we can't determine if we have content.\n\t\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns true if the draw was handled (useful for overriding functionality).\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t\t * into itself).\n\t\t **/\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\t// draw to cache first:\n\t\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\t\tthis._updateTimeline();\n\t\t\tthis.Container_draw(ctx, ignoreCache);\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Sets paused to false.\n\t\t * @method play\n\t\t **/\n\t\tp.play = function() {\n\t\t\tthis.paused = false;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Sets paused to true.\n\t\t * @method stop\n\t\t **/\n\t\tp.stop = function() {\n\t\t\tthis.paused = true;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Advances this movie clip to the specified position or label and sets paused to false.\n\t\t * @method gotoAndPlay\n\t\t * @param {String|Number} positionOrLabel The animation name or frame number to go to.\n\t\t **/\n\t\tp.gotoAndPlay = function(positionOrLabel) {\n\t\t\tthis.paused = false;\n\t\t\tthis._goto(positionOrLabel);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Advances this movie clip to the specified position or label and sets paused to true.\n\t\t * @method gotoAndStop\n\t\t * @param {String|Number} positionOrLabel The animation or frame name to go to.\n\t\t **/\n\t\tp.gotoAndStop = function(positionOrLabel) {\n\t\t\tthis.paused = true;\n\t\t\tthis._goto(positionOrLabel);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Advances the playhead. This occurs automatically each tick by default.\n\t\t * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set.\n\t\t * @method advance\n\t\t*/\n\t\tp.advance = function(time) {\n\t\t\t// TODO: should we worry at all about clips who change their own modes via frame scripts?\n\t\t\tvar independent = MovieClip.INDEPENDENT;\n\t\t\tif (this.mode != independent) { return; }\n\t\t\t\n\t\t\tvar o=this, fps = o.framerate;\n\t\t\twhile ((o = o.parent) && fps == null) {\n\t\t\t\tif (o.mode == independent) { fps = o._framerate; }\n\t\t\t}\n\t\t\tthis._framerate = fps;\n\t\t\t\n\t\t\tvar t = (fps != null && fps != -1 && time != null) ? time/(1000/fps) + this._t : 1;\n\t\t\tvar frames = t|0;\n\t\t\tthis._t = t-frames; // leftover time\n\t\t\t\n\t\t\twhile (!this.paused && frames--) {\n\t\t\t\tthis._prevPosition = (this._prevPos < 0) ? 0 : this._prevPosition+1;\n\t\t\t\tthis._updateTimeline();\n\t\t\t}\n\t\t};\n\t\t\n\t\t/**\n\t\t * MovieClip instances cannot be cloned.\n\t\t * @method clone\n\t\t **/\n\t\tp.clone = function() {\n\t\t\t// TODO: add support for this? Need to clone the Timeline & retarget tweens - pretty complex.\n\t\t\tthrow(\"MovieClip cannot be cloned.\")\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[MovieClip (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _tick\n\t\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t\t * function.\n\t\t * @protected\n\t\t **/\n\t\tp._tick = function(evtObj) {\n\t\t\tthis.advance(evtObj&&evtObj.delta);\n\t\t\tthis.Container__tick(evtObj);\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _goto\n\t\t * @param {String|Number} positionOrLabel The animation name or frame number to go to.\n\t\t * @protected\n\t\t **/\n\t\tp._goto = function(positionOrLabel) {\n\t\t\tvar pos = this.timeline.resolve(positionOrLabel);\n\t\t\tif (pos == null) { return; }\n\t\t\t// prevent _updateTimeline from overwriting the new position because of a reset:\n\t\t\tif (this._prevPos == -1) { this._prevPos = NaN; }\n\t\t\tthis._prevPosition = pos;\n\t\t\tthis._t = 0;\n\t\t\tthis._updateTimeline();\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _reset\n\t\t * @private\n\t\t **/\n\t\tp._reset = function() {\n\t\t\tthis._prevPos = -1;\n\t\t\tthis._t = this.currentFrame = 0;\n\t\t\tthis.paused = false;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _updateTimeline\n\t\t * @protected\n\t\t **/\n\t\tp._updateTimeline = function() {\n\t\t\tvar tl = this.timeline;\n\t\t\tvar synched = this.mode != MovieClip.INDEPENDENT;\n\t\t\ttl.loop = (this.loop==null) ? true : this.loop;\n\t\t\t\n\t\t\tvar pos = synched ? this.startPosition + (this.mode==MovieClip.SINGLE_FRAME?0:this._synchOffset) : (this._prevPos < 0 ? 0 : this._prevPosition);\n\t\t\tvar mode = synched || !this.actionsEnabled ? createjs.Tween.NONE : null;\n\t\t\t\n\t\t\t// pre-assign currentFrame so it is available to frame scripts:\n\t\t\tthis.currentFrame = tl._calcPosition(pos);\n\t\t\t\n\t\t\t// update timeline position, ignoring actions if this is a graphic.\n\t\t\ttl.setPosition(pos, mode);\n\t\n\t\t\tthis._prevPosition = tl._prevPosition;\n\t\t\tif (this._prevPos == tl._prevPos) { return; }\n\t\t\tthis.currentFrame = this._prevPos = tl._prevPos;\n\t\n\t\t\tfor (var n in this._managed) { this._managed[n] = 1; }\n\t\n\t\t\tvar tweens = tl._tweens;\n\t\t\tfor (var i=0, l=tweens.length; i<l; i++) {\n\t\t\t\tvar tween = tweens[i];\n\t\t\t\tvar target = tween._target;\n\t\t\t\tif (target == this || tween.passive) { continue; } // TODO: this assumes actions tween has this as the target. Valid?\n\t\t\t\tvar offset = tween._stepPosition;\n\t\n\t\t\t\tif (target instanceof createjs.DisplayObject) {\n\t\t\t\t\t// motion tween.\n\t\t\t\t\tthis._addManagedChild(target, offset);\n\t\t\t\t} else {\n\t\t\t\t\t// state tween.\n\t\t\t\t\tthis._setState(target.state, offset);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvar kids = this.children;\n\t\t\tfor (i=kids.length-1; i>=0; i--) {\n\t\t\t\tvar id = kids[i].id;\n\t\t\t\tif (this._managed[id] == 1) {\n\t\t\t\t\tthis.removeChildAt(i);\n\t\t\t\t\tdelete(this._managed[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _setState\n\t\t * @param {Array} state\n\t\t * @param {Number} offset\n\t\t * @protected\n\t\t **/\n\t\tp._setState = function(state, offset) {\n\t\t\tif (!state) { return; }\n\t\t\tfor (var i=state.length-1;i>=0;i--) {\n\t\t\t\tvar o = state[i];\n\t\t\t\tvar target = o.t;\n\t\t\t\tvar props = o.p;\n\t\t\t\tfor (var n in props) { target[n] = props[n]; }\n\t\t\t\tthis._addManagedChild(target, offset);\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Adds a child to the timeline, and sets it up as a managed child.\n\t\t * @method _addManagedChild\n\t\t * @param {MovieClip} child The child MovieClip to manage\n\t\t * @param {Number} offset\n\t\t * @private\n\t\t **/\n\t\tp._addManagedChild = function(child, offset) {\n\t\t\tif (child._off) { return; }\n\t\t\tthis.addChildAt(child,0);\n\t\n\t\t\tif (child instanceof MovieClip) {\n\t\t\t\tchild._synchOffset = offset;\n\t\t\t\t// TODO: this does not precisely match Flash. Flash loses track of the clip if it is renamed or removed from the timeline, which causes it to reset.\n\t\t\t\tif (child.mode == MovieClip.INDEPENDENT && child.autoReset && !this._managed[child.id]) { child._reset(); }\n\t\t\t}\n\t\t\tthis._managed[child.id] = 2;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _getBounds\n\t\t * @param {Matrix2D} matrix\n\t\t * @param {Boolean} ignoreTransform\n\t\t * @return {Rectangle}\n\t\t * @protected\n\t\t **/\n\t\tp._getBounds = function(matrix, ignoreTransform) {\n\t\t\tvar bounds = this.DisplayObject_getBounds();\n\t\t\tif (!bounds) {\n\t\t\t\tthis._updateTimeline();\n\t\t\t\tif (this.frameBounds) { bounds = this._rectangle.copy(this.frameBounds[this.currentFrame]); }\n\t\t\t}\n\t\t\tif (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }\n\t\t\treturn this.Container__getBounds(matrix, ignoreTransform);\n\t\t};\n\t\n\t\n\t\tcreatejs.MovieClip = createjs.promote(MovieClip, \"Container\");\n\t\n\t\n\t\n\t// MovieClipPlugin for TweenJS:\n\t\t/**\n\t\t * This plugin works with <a href=\"http://tweenjs.com\" target=\"_blank\">TweenJS</a> to prevent the startPosition\n\t\t * property from tweening.\n\t\t * @private\n\t\t * @class MovieClipPlugin\n\t\t * @constructor\n\t\t **/\n\t\tfunction MovieClipPlugin() {\n\t\t\tthrow(\"MovieClipPlugin cannot be instantiated.\")\n\t\t}\n\t\t\n\t\t/**\n\t\t * @method priority\n\t\t * @private\n\t\t **/\n\t\tMovieClipPlugin.priority = 100; // very high priority, should run first\n\t\n\t\t/**\n\t\t * @method install\n\t\t * @private\n\t\t **/\n\t\tMovieClipPlugin.install = function() {\n\t\t\tcreatejs.Tween.installPlugin(MovieClipPlugin, [\"startPosition\"]);\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method init\n\t\t * @param {Tween} tween\n\t\t * @param {String} prop\n\t\t * @param {String|Number|Boolean} value\n\t\t * @private\n\t\t **/\n\t\tMovieClipPlugin.init = function(tween, prop, value) {\n\t\t\treturn value;\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method step\n\t\t * @private\n\t\t **/\n\t\tMovieClipPlugin.step = function() {\n\t\t\t// unused.\n\t\t};\n\t\n\t\t/**\n\t\t * @method tween\n\t\t * @param {Tween} tween\n\t\t * @param {String} prop\n\t\t * @param {String | Number | Boolean} value\n\t\t * @param {Array} startValues\n\t\t * @param {Array} endValues\n\t\t * @param {Number} ratio\n\t\t * @param {Object} wait\n\t\t * @param {Object} end\n\t\t * @return {*}\n\t\t */\n\t\tMovieClipPlugin.tween = function(tween, prop, value, startValues, endValues, ratio, wait, end) {\n\t\t\tif (!(tween.target instanceof MovieClip)) { return value; }\n\t\t\treturn (ratio == 1 ? endValues[prop] : startValues[prop]);\n\t\t};\n\t\n\t}());\n\t\n\t//##############################################################################\n\t// SpriteSheetUtils.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\t\n\t\t\n\t// constructor:\n\t\t/**\n\t\t * The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink \"SpriteSheet\"}}{{/crossLink}}s.\n\t\t * A sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For\n\t\t * example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across\n\t\t * by 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.\n\t\t * @class SpriteSheetUtils\n\t\t * @static\n\t\t **/\n\t\tfunction SpriteSheetUtils() {\n\t\t\tthrow \"SpriteSheetUtils cannot be instantiated\";\n\t\t}\n\t\n\t\n\t// private static properties:\n\t\t/**\n\t\t * @property _workingCanvas\n\t\t * @static\n\t\t * @type HTMLCanvasElement | Object\n\t\t * @protected\n\t\t*/\n\t\t/**\n\t\t * @property _workingContext\n\t\t * @static\n\t\t * @type CanvasRenderingContext2D\n\t\t * @protected\n\t\t*/\n\t\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\t\tif (canvas.getContext) {\n\t\t\tSpriteSheetUtils._workingCanvas = canvas;\n\t\t\tSpriteSheetUtils._workingContext = canvas.getContext(\"2d\");\n\t\t\tcanvas.width = canvas.height = 1;\n\t\t}\n\t\n\t\n\t// public static methods:\n\t\t/**\n\t\t * <b>This is an experimental method, and may be buggy. Please report issues.</b><br/><br/>\n\t\t * Extends the existing sprite sheet by flipping the original frames horizontally, vertically, or both,\n\t\t * and adding appropriate animation & frame data. The flipped animations will have a suffix added to their names\n\t\t * (_h, _v, _hv as appropriate). Make sure the sprite sheet images are fully loaded before using this method.\n\t\t * <br/><br/>\n\t\t * For example:<br/>\n\t\t * SpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);\n\t\t * The above would add frames that are flipped horizontally AND frames that are flipped vertically.\n\t\t * <br/><br/>\n\t\t * Note that you can also flip any display object by setting its scaleX or scaleY to a negative value. On some\n\t\t * browsers (especially those without hardware accelerated canvas) this can result in slightly degraded performance,\n\t\t * which is why addFlippedFrames is available.\n\t\t * @method addFlippedFrames\n\t\t * @static\n\t\t * @param {SpriteSheet} spriteSheet\n\t\t * @param {Boolean} horizontal If true, horizontally flipped frames will be added.\n\t\t * @param {Boolean} vertical If true, vertically flipped frames will be added.\n\t\t * @param {Boolean} both If true, frames that are flipped both horizontally and vertically will be added.\n\t\t * @deprecated Modern browsers perform better when flipping via a transform (ex. scaleX=-1) rendering this obsolete.\n\t\t **/\n\t\tSpriteSheetUtils.addFlippedFrames = function(spriteSheet, horizontal, vertical, both) {\n\t\t\tif (!horizontal && !vertical && !both) { return; }\n\t\n\t\t\tvar count = 0;\n\t\t\tif (horizontal) { SpriteSheetUtils._flip(spriteSheet,++count,true,false); }\n\t\t\tif (vertical) { SpriteSheetUtils._flip(spriteSheet,++count,false,true); }\n\t\t\tif (both) { SpriteSheetUtils._flip(spriteSheet,++count,true,true); }\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a single frame of the specified sprite sheet as a new PNG image. An example of when this may be useful is\n\t\t * to use a spritesheet frame as the source for a bitmap fill.\n\t\t *\n\t\t * <strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {{#crossLink \"Sprite\"}}{{/crossLink}}\n\t\t * with a {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} call than it is to slice out a frame using this\n\t\t * method and display it with a Bitmap instance. You can also crop an image using the {{#crossLink \"Bitmap/sourceRect\"}}{{/crossLink}}\n\t\t * property of {{#crossLink \"Bitmap\"}}{{/crossLink}}.\n\t\t *\n\t\t * The extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.\n\t\t * @method extractFrame\n\t\t * @static\n\t\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to extract a frame from.\n\t\t * @param {Number|String} frameOrAnimation The frame number or animation name to extract. If an animation\n\t\t * name is specified, only the first frame of the animation will be extracted.\n\t\t * @return {HTMLImageElement} a single frame of the specified sprite sheet as a new PNG image.\n\t\t*/\n\t\tSpriteSheetUtils.extractFrame = function(spriteSheet, frameOrAnimation) {\n\t\t\tif (isNaN(frameOrAnimation)) {\n\t\t\t\tframeOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];\n\t\t\t}\n\t\t\tvar data = spriteSheet.getFrame(frameOrAnimation);\n\t\t\tif (!data) { return null; }\n\t\t\tvar r = data.rect;\n\t\t\tvar canvas = SpriteSheetUtils._workingCanvas;\n\t\t\tcanvas.width = r.width;\n\t\t\tcanvas.height = r.height;\n\t\t\tSpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);\n\t\t\tvar img = document.createElement(\"img\");\n\t\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\t\treturn img;\n\t\t};\n\t\n\t\t/**\n\t\t * Merges the rgb channels of one image with the alpha channel of another. This can be used to combine a compressed\n\t\t * JPEG image containing color data with a PNG32 monochromatic image containing alpha data. With certain types of\n\t\t * images (those with detail that lend itself to JPEG compression) this can provide significant file size savings\n\t\t * versus a single RGBA PNG32. This method is very fast (generally on the order of 1-2 ms to run).\n\t\t * @method mergeAlpha\n\t\t * @static\n\t\t * @param {HTMLImageElement} rbgImage The image (or canvas) containing the RGB channels to use.\n\t\t * @param {HTMLImageElement} alphaImage The image (or canvas) containing the alpha channel to use.\n\t\t * @param {HTMLCanvasElement} canvas Optional. If specified, this canvas will be used and returned. If not, a new canvas will be created.\n\t\t * @return {HTMLCanvasElement} A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.\n\t\t * @deprecated Tools such as ImageAlpha generally provide better results. This will be moved to sandbox in the future.\n\t\t*/\n\t\tSpriteSheetUtils.mergeAlpha = function(rgbImage, alphaImage, canvas) {\n\t\t\tif (!canvas) { canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); }\n\t\t\tcanvas.width = Math.max(alphaImage.width, rgbImage.width);\n\t\t\tcanvas.height = Math.max(alphaImage.height, rgbImage.height);\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tctx.save();\n\t\t\tctx.drawImage(rgbImage,0,0);\n\t\t\tctx.globalCompositeOperation = \"destination-in\";\n\t\t\tctx.drawImage(alphaImage,0,0);\n\t\t\tctx.restore();\n\t\t\treturn canvas;\n\t\t};\n\t\n\t\n\t// private static methods:\n\t\tSpriteSheetUtils._flip = function(spriteSheet, count, h, v) {\n\t\t\tvar imgs = spriteSheet._images;\n\t\t\tvar canvas = SpriteSheetUtils._workingCanvas;\n\t\t\tvar ctx = SpriteSheetUtils._workingContext;\n\t\t\tvar il = imgs.length/count;\n\t\t\tfor (var i=0;i<il;i++) {\n\t\t\t\tvar src = imgs[i];\n\t\t\t\tsrc.__tmp = i; // a bit hacky, but faster than doing indexOf below.\n\t\t\t\tctx.setTransform(1,0,0,1,0,0);\n\t\t\t\tctx.clearRect(0,0,canvas.width+1,canvas.height+1);\n\t\t\t\tcanvas.width = src.width;\n\t\t\t\tcanvas.height = src.height;\n\t\t\t\tctx.setTransform(h?-1:1, 0, 0, v?-1:1, h?src.width:0, v?src.height:0);\n\t\t\t\tctx.drawImage(src,0,0);\n\t\t\t\tvar img = document.createElement(\"img\");\n\t\t\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\t\t\t// work around a strange bug in Safari:\n\t\t\t\timg.width = src.width;\n\t\t\t\timg.height = src.height;\n\t\t\t\timgs.push(img);\n\t\t\t}\n\t\n\t\t\tvar frames = spriteSheet._frames;\n\t\t\tvar fl = frames.length/count;\n\t\t\tfor (i=0;i<fl;i++) {\n\t\t\t\tsrc = frames[i];\n\t\t\t\tvar rect = src.rect.clone();\n\t\t\t\timg = imgs[src.image.__tmp+il*count];\n\t\n\t\t\t\tvar frame = {image:img,rect:rect,regX:src.regX,regY:src.regY};\n\t\t\t\tif (h) {\n\t\t\t\t\trect.x = img.width-rect.x-rect.width; // update rect\n\t\t\t\t\tframe.regX = rect.width-src.regX; // update registration point\n\t\t\t\t}\n\t\t\t\tif (v) {\n\t\t\t\t\trect.y = img.height-rect.y-rect.height;  // update rect\n\t\t\t\t\tframe.regY = rect.height-src.regY; // update registration point\n\t\t\t\t}\n\t\t\t\tframes.push(frame);\n\t\t\t}\n\t\n\t\t\tvar sfx = \"_\"+(h?\"h\":\"\")+(v?\"v\":\"\");\n\t\t\tvar names = spriteSheet._animations;\n\t\t\tvar data = spriteSheet._data;\n\t\t\tvar al = names.length/count;\n\t\t\tfor (i=0;i<al;i++) {\n\t\t\t\tvar name = names[i];\n\t\t\t\tsrc = data[name];\n\t\t\t\tvar anim = {name:name+sfx,speed:src.speed,next:src.next,frames:[]};\n\t\t\t\tif (src.next) { anim.next += sfx; }\n\t\t\t\tframes = src.frames;\n\t\t\t\tfor (var j=0,l=frames.length;j<l;j++) {\n\t\t\t\t\tanim.frames.push(frames[j]+fl*count);\n\t\t\t\t}\n\t\t\t\tdata[anim.name] = anim;\n\t\t\t\tnames.push(anim.name);\n\t\t\t}\n\t\t};\n\t\n\t\n\t\tcreatejs.SpriteSheetUtils = SpriteSheetUtils;\n\t}());\n\t\n\t//##############################################################################\n\t// SpriteSheetBuilder.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * The SpriteSheetBuilder allows you to generate {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances at run time\n\t\t * from any display object. This can allow you to maintain your assets as vector graphics (for low file size), and\n\t\t * render them at run time as SpriteSheets for better performance.\n\t\t *\n\t\t * SpriteSheets can be built either synchronously, or asynchronously, so that large SpriteSheets can be generated\n\t\t * without locking the UI.\n\t\t *\n\t\t * Note that the \"images\" used in the generated SpriteSheet are actually canvas elements, and that they will be\n\t\t * sized to the nearest power of 2 up to the value of {{#crossLink \"SpriteSheetBuilder/maxWidth:property\"}}{{/crossLink}}\n\t\t * or {{#crossLink \"SpriteSheetBuilder/maxHeight:property\"}}{{/crossLink}}.\n\t\t * @class SpriteSheetBuilder\n\t\t * @param {Number} [framerate=0] The {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} of\n\t\t * {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are created.\n\t\t * @extends EventDispatcher\n\t\t * @constructor\n\t\t **/\n\t\tfunction SpriteSheetBuilder(framerate) {\n\t\t\tthis.EventDispatcher_constructor();\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The maximum width for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n\t\t\t * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n\t\t\t * dimensions, then additional images will be created as needed.\n\t\t\t * @property maxWidth\n\t\t\t * @type Number\n\t\t\t * @default 2048\n\t\t\t*/\n\t\t\tthis.maxWidth = 2048;\n\t\t\n\t\t\t/**\n\t\t\t * The maximum height for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n\t\t\t * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n\t\t\t * dimensions, then additional images will be created as needed.\n\t\t\t * @property maxHeight\n\t\t\t * @type Number\n\t\t\t * @default 2048\n\t\t\t **/\n\t\t\tthis.maxHeight = 2048;\n\t\t\n\t\t\t/**\n\t\t\t * The SpriteSheet that was generated. This will be null before a build is completed successfully.\n\t\t\t * @property spriteSheet\n\t\t\t * @type SpriteSheet\n\t\t\t **/\n\t\t\tthis.spriteSheet = null;\n\t\t\n\t\t\t/**\n\t\t\t * The scale to apply when drawing all frames to the SpriteSheet. This is multiplied against any scale specified\n\t\t\t * in the addFrame call. This can be used, for example, to generate a SpriteSheet at run time that is tailored\n\t\t\t * to the a specific device resolution (ex. tablet vs mobile).\n\t\t\t * @property scale\n\t\t\t * @type Number\n\t\t\t * @default 1\n\t\t\t **/\n\t\t\tthis.scale = 1;\n\t\t\n\t\t\t/**\n\t\t\t* The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.\n\t\t\t* @property padding\n\t\t\t* @type Number\n\t\t\t* @default 1\n\t\t\t**/\n\t\t\tthis.padding = 1;\n\t\t\n\t\t\t/**\n\t\t\t * A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be\n\t\t\t * thought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\n\t\t\t * the builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\n\t\t\t * Defaults to 0.3.\n\t\t\t * @property timeSlice\n\t\t\t * @type Number\n\t\t\t * @default 0.3\n\t\t\t **/\n\t\t\tthis.timeSlice = 0.3;\n\t\t\n\t\t\t/**\n\t\t\t * A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not\n\t\t\t * been initiated.\n\t\t\t * @property progress\n\t\t\t * @type Number\n\t\t\t * @default -1\n\t\t\t * @readonly\n\t\t\t */\n\t\t\tthis.progress = -1;\n\t\n\t\t\t/**\n\t\t\t * A {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} value that will be passed to new {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are\n\t\t\t * created. If no framerate is specified (or it is 0), then SpriteSheets will use the {{#crossLink \"Ticker\"}}{{/crossLink}}\n\t\t\t * framerate.\n\t\t\t * @property framerate\n\t\t\t * @type Number\n\t\t\t * @default 0\n\t\t\t */\n\t\t\tthis.framerate = framerate || 0;\n\t\t\n\t\t\n\t\t// private properties:\n\t\t\t/**\n\t\t\t * @property _frames\n\t\t\t * @protected\n\t\t\t * @type Array\n\t\t\t **/\n\t\t\tthis._frames = [];\n\t\t\n\t\t\t/**\n\t\t\t * @property _animations\n\t\t\t * @protected\n\t\t\t * @type Array\n\t\t\t **/\n\t\t\tthis._animations = {};\n\t\t\n\t\t\t/**\n\t\t\t * @property _data\n\t\t\t * @protected\n\t\t\t * @type Array\n\t\t\t **/\n\t\t\tthis._data = null;\n\t\t\n\t\t\t/**\n\t\t\t * @property _nextFrameIndex\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._nextFrameIndex = 0;\n\t\t\n\t\t\t/**\n\t\t\t * @property _index\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._index = 0;\n\t\t\n\t\t\t/**\n\t\t\t * @property _timerID\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._timerID = null;\n\t\t\n\t\t\t/**\n\t\t\t * @property _scale\n\t\t\t * @protected\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis._scale = 1;\n\t\t}\n\t\tvar p = createjs.extend(SpriteSheetBuilder, createjs.EventDispatcher);\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// constants:\n\t\tSpriteSheetBuilder.ERR_DIMENSIONS = \"frame dimensions exceed max spritesheet dimensions\";\n\t\tSpriteSheetBuilder.ERR_RUNNING = \"a build is already running\";\n\t\n\t// events:\n\t\t/**\n\t\t * Dispatched when a build completes.\n\t\t * @event complete\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\t/**\n\t\t * Dispatched when an asynchronous build has progress.\n\t\t * @event progress\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @param {Number} progress The current progress value (0-1).\n\t\t * @since 0.6.0\n\t\t */\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Adds a frame to the {{#crossLink \"SpriteSheet\"}}{{/crossLink}}. Note that the frame will not be drawn until you\n\t\t * call {{#crossLink \"SpriteSheetBuilder/build\"}}{{/crossLink}} method. The optional setup params allow you to have\n\t\t * a function run immediately before the draw occurs. For example, this allows you to add a single source multiple\n\t\t * times, but manipulate it or its children to change it to generate different frames.\n\t\t *\n\t\t * Note that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply\n\t\t * transforms to a source object and have them captured in the SpriteSheet, simply place it into a {{#crossLink \"Container\"}}{{/crossLink}}\n\t\t * and pass in the Container as the source.\n\t\t * @method addFrame\n\t\t * @param {DisplayObject} source The source {{#crossLink \"DisplayObject\"}}{{/crossLink}}  to draw as the frame.\n\t\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the\n\t\t * source to draw to the frame. If not specified, it will look for a `getBounds` method, bounds property, or\n\t\t * `nominalBounds` property on the source to use. If one is not found, the frame will be skipped.\n\t\t * @param {Number} [scale=1] Optional. The scale to draw this frame at. Default is 1.\n\t\t * @param {Function} [setupFunction] A function to call immediately before drawing this frame. It will be called with two parameters: the source, and setupData.\n\t\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t\t * @return {Number} The index of the frame that was just added, or null if a sourceRect could not be determined.\n\t\t **/\n\t\tp.addFrame = function(source, sourceRect, scale, setupFunction, setupData) {\n\t\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\t\tvar rect = sourceRect||source.bounds||source.nominalBounds;\n\t\t\tif (!rect&&source.getBounds) { rect = source.getBounds(); }\n\t\t\tif (!rect) { return null; }\n\t\t\tscale = scale||1;\n\t\t\treturn this._frames.push({source:source, sourceRect:rect, scale:scale, funct:setupFunction, data:setupData, index:this._frames.length, height:rect.height*scale})-1;\n\t\t};\n\t\n\t\t/**\n\t\t * Adds an animation that will be included in the created {{#crossLink \"SpriteSheet\"}}{{/crossLink}}.\n\t\t * @method addAnimation\n\t\t * @param {String} name The name for the animation.\n\t\t * @param {Array} frames An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\n\t\t * that played frame indexes 3, 6, and 5 in that order.\n\t\t * @param {String} [next] Specifies the name of the animation to continue to after this animation ends. You can\n\t\t * also pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.\n\t\t * @param {Number} [speed] Specifies a frame advance speed for this animation. For example, a value of 0.5 would\n\t\t * cause the animation to advance every second tick. Note that earlier versions used `frequency` instead, which had\n\t\t * the opposite effect.\n\t\t **/\n\t\tp.addAnimation = function(name, frames, next, speed) {\n\t\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\t\tthis._animations[name] = {frames:frames, next:next, speed:speed};\n\t\t};\n\t\n\t\t/**\n\t\t * This will take a {{#crossLink \"MovieClip\"}}{{/crossLink}} instance, and add its frames and labels to this\n\t\t * builder. Labels will be added as an animation running from the label index to the next label. For example, if\n\t\t * there is a label named \"foo\" at frame 0 and a label named \"bar\" at frame 10, in a MovieClip with 15 frames, it\n\t\t * will add an animation named \"foo\" that runs from frame index 0 to 9, and an animation named \"bar\" that runs from\n\t\t * frame index 10 to 14.\n\t\t *\n\t\t * Note that this will iterate through the full MovieClip with {{#crossLink \"MovieClip/actionsEnabled:property\"}}{{/crossLink}}\n\t\t * set to `false`, ending on the last frame.\n\t\t * @method addMovieClip\n\t\t * @param {MovieClip} source The source MovieClip instance to add to the SpriteSheet.\n\t\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the source to\n\t\t * draw to the frame. If not specified, it will look for a {{#crossLink \"DisplayObject/getBounds\"}}{{/crossLink}}\n\t\t * method, `frameBounds` Array, `bounds` property, or `nominalBounds` property on the source to use. If one is not\n\t\t * found, the MovieClip will be skipped.\n\t\t * @param {Number} [scale=1] The scale to draw the movie clip at.\n\t\t * @param {Function} [setupFunction] A function to call immediately before drawing each frame. It will be called\n\t\t * with three parameters: the source, setupData, and the frame index.\n\t\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t\t * @param {Function} [labelFunction] This method will be called for each MovieClip label that is added with four\n\t\t * parameters: the label name, the source MovieClip instance, the starting frame index (in the movieclip timeline)\n\t\t * and the end index. It must return a new name for the label/animation, or `false` to exclude the label.\n\t\t **/\n\t\tp.addMovieClip = function(source, sourceRect, scale, setupFunction, setupData, labelFunction) {\n\t\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\t\tvar rects = source.frameBounds;\n\t\t\tvar rect = sourceRect||source.bounds||source.nominalBounds;\n\t\t\tif (!rect&&source.getBounds) { rect = source.getBounds(); }\n\t\t\tif (!rect && !rects) { return; }\n\t\n\t\t\tvar i, l, baseFrameIndex = this._frames.length;\n\t\t\tvar duration = source.timeline.duration;\n\t\t\tfor (i=0; i<duration; i++) {\n\t\t\t\tvar r = (rects&&rects[i]) ? rects[i] : rect;\n\t\t\t\tthis.addFrame(source, r, scale, this._setupMovieClipFrame, {i:i, f:setupFunction, d:setupData});\n\t\t\t}\n\t\t\tvar labels = source.timeline._labels;\n\t\t\tvar lbls = [];\n\t\t\tfor (var n in labels) {\n\t\t\t\tlbls.push({index:labels[n], label:n});\n\t\t\t}\n\t\t\tif (lbls.length) {\n\t\t\t\tlbls.sort(function(a,b){ return a.index-b.index; });\n\t\t\t\tfor (i=0,l=lbls.length; i<l; i++) {\n\t\t\t\t\tvar label = lbls[i].label;\n\t\t\t\t\tvar start = baseFrameIndex+lbls[i].index;\n\t\t\t\t\tvar end = baseFrameIndex+((i == l-1) ? duration : lbls[i+1].index);\n\t\t\t\t\tvar frames = [];\n\t\t\t\t\tfor (var j=start; j<end; j++) { frames.push(j); }\n\t\t\t\t\tif (labelFunction) {\n\t\t\t\t\t\tlabel = labelFunction(label, source, start, end);\n\t\t\t\t\t\tif (!label) { continue; }\n\t\t\t\t\t}\n\t\t\t\t\tthis.addAnimation(label, frames, true); // for now, this loops all animations.\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames.\n\t\t * @method build\n\t\t * @return {SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error\n\t\t * occurred.\n\t\t **/\n\t\tp.build = function() {\n\t\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\t\tthis._startBuild();\n\t\t\twhile (this._drawNext()) {}\n\t\t\tthis._endBuild();\n\t\t\treturn this.spriteSheet;\n\t\t};\n\t\n\t\t/**\n\t\t * Asynchronously builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames. It will\n\t\t * run 20 times per second, using an amount of time defined by `timeSlice`. When it is complete it will call the\n\t\t * specified callback.\n\t\t * @method buildAsync\n\t\t * @param {Number} [timeSlice] Sets the timeSlice property on this instance.\n\t\t **/\n\t\tp.buildAsync = function(timeSlice) {\n\t\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\t\tthis.timeSlice = timeSlice;\n\t\t\tthis._startBuild();\n\t\t\tvar _this = this;\n\t\t\tthis._timerID = setTimeout(function() { _this._run(); }, 50-Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50);\n\t\t};\n\t\n\t\t/**\n\t\t * Stops the current asynchronous build.\n\t\t * @method stopAsync\n\t\t **/\n\t\tp.stopAsync = function() {\n\t\t\tclearTimeout(this._timerID);\n\t\t\tthis._data = null;\n\t\t};\n\t\n\t\t/**\n\t\t * SpriteSheetBuilder instances cannot be cloned.\n\t\t * @method clone\n\t\t **/\n\t\tp.clone = function() {\n\t\t\tthrow(\"SpriteSheetBuilder cannot be cloned.\");\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[SpriteSheetBuilder]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _startBuild\n\t\t * @protected\n\t\t **/\n\t\tp._startBuild = function() {\n\t\t\tvar pad = this.padding||0;\n\t\t\tthis.progress = 0;\n\t\t\tthis.spriteSheet = null;\n\t\t\tthis._index = 0;\n\t\t\tthis._scale = this.scale;\n\t\t\tvar dataFrames = [];\n\t\t\tthis._data = {\n\t\t\t\timages: [],\n\t\t\t\tframes: dataFrames,\n\t\t\t\tframerate: this.framerate,\n\t\t\t\tanimations: this._animations // TODO: should we \"clone\" _animations in case someone adds more animations after a build?\n\t\t\t};\n\t\n\t\t\tvar frames = this._frames.slice();\n\t\t\tframes.sort(function(a,b) { return (a.height<=b.height) ? -1 : 1; });\n\t\n\t\t\tif (frames[frames.length-1].height+pad*2 > this.maxHeight) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\t\tvar y=0, x=0;\n\t\t\tvar img = 0;\n\t\t\twhile (frames.length) {\n\t\t\t\tvar o = this._fillRow(frames, y, img, dataFrames, pad);\n\t\t\t\tif (o.w > x) { x = o.w; }\n\t\t\t\ty += o.h;\n\t\t\t\tif (!o.h || !frames.length) {\n\t\t\t\t\tvar canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\");\n\t\t\t\t\tcanvas.width = this._getSize(x,this.maxWidth);\n\t\t\t\t\tcanvas.height = this._getSize(y,this.maxHeight);\n\t\t\t\t\tthis._data.images[img] = canvas;\n\t\t\t\t\tif (!o.h) {\n\t\t\t\t\t\tx=y=0;\n\t\t\t\t\t\timg++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _setupMovieClipFrame\n\t\t * @protected\n\t\t * @return {Number} The width & height of the row.\n\t\t **/\n\t\tp._setupMovieClipFrame = function(source, data) {\n\t\t\tvar ae = source.actionsEnabled;\n\t\t\tsource.actionsEnabled = false;\n\t\t\tsource.gotoAndStop(data.i);\n\t\t\tsource.actionsEnabled = ae;\n\t\t\tdata.f&&data.f(source, data.d, data.i);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _getSize\n\t\t * @protected\n\t\t * @return {Number} The width & height of the row.\n\t\t **/\n\t\tp._getSize = function(size,max) {\n\t\t\tvar pow = 4;\n\t\t\twhile (Math.pow(2,++pow) < size){}\n\t\t\treturn Math.min(max,Math.pow(2,pow));\n\t\t};\n\t\n\t\t/**\n\t\t * @method _fillRow\n\t\t * @param {Array} frames\n\t\t * @param {Number} y\n\t\t * @param {HTMLImageElement} img\n\t\t * @param {Object} dataFrames\n\t\t * @param {Number} pad\n\t\t * @protected\n\t\t * @return {Number} The width & height of the row.\n\t\t **/\n\t\tp._fillRow = function(frames, y, img, dataFrames, pad) {\n\t\t\tvar w = this.maxWidth;\n\t\t\tvar maxH = this.maxHeight;\n\t\t\ty += pad;\n\t\t\tvar h = maxH-y;\n\t\t\tvar x = pad;\n\t\t\tvar height = 0;\n\t\t\tfor (var i=frames.length-1; i>=0; i--) {\n\t\t\t\tvar frame = frames[i];\n\t\t\t\tvar sc = this._scale*frame.scale;\n\t\t\t\tvar rect = frame.sourceRect;\n\t\t\t\tvar source = frame.source;\n\t\t\t\tvar rx = Math.floor(sc*rect.x-pad);\n\t\t\t\tvar ry = Math.floor(sc*rect.y-pad);\n\t\t\t\tvar rh = Math.ceil(sc*rect.height+pad*2);\n\t\t\t\tvar rw = Math.ceil(sc*rect.width+pad*2);\n\t\t\t\tif (rw > w) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\t\t\tif (rh > h || x+rw > w) { continue; }\n\t\t\t\tframe.img = img;\n\t\t\t\tframe.rect = new createjs.Rectangle(x,y,rw,rh);\n\t\t\t\theight = height || rh;\n\t\t\t\tframes.splice(i,1);\n\t\t\t\tdataFrames[frame.index] = [x,y,rw,rh,img,Math.round(-rx+sc*source.regX-pad),Math.round(-ry+sc*source.regY-pad)];\n\t\t\t\tx += rw;\n\t\t\t}\n\t\t\treturn {w:x, h:height};\n\t\t};\n\t\n\t\t/**\n\t\t * @method _endBuild\n\t\t * @protected\n\t\t **/\n\t\tp._endBuild = function() {\n\t\t\tthis.spriteSheet = new createjs.SpriteSheet(this._data);\n\t\t\tthis._data = null;\n\t\t\tthis.progress = 1;\n\t\t\tthis.dispatchEvent(\"complete\");\n\t\t};\n\t\n\t\t/**\n\t\t * @method _run\n\t\t * @protected\n\t\t **/\n\t\tp._run = function() {\n\t\t\tvar ts = Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50;\n\t\t\tvar t = (new Date()).getTime()+ts;\n\t\t\tvar complete = false;\n\t\t\twhile (t > (new Date()).getTime()) {\n\t\t\t\tif (!this._drawNext()) { complete = true; break; }\n\t\t\t}\n\t\t\tif (complete) {\n\t\t\t\tthis._endBuild();\n\t\t\t} else {\n\t\t\t\tvar _this = this;\n\t\t\t\tthis._timerID = setTimeout(function() { _this._run(); }, 50-ts);\n\t\t\t}\n\t\t\tvar p = this.progress = this._index/this._frames.length;\n\t\t\tif (this.hasEventListener(\"progress\")) {\n\t\t\t\tvar evt = new createjs.Event(\"progress\");\n\t\t\t\tevt.progress = p;\n\t\t\t\tthis.dispatchEvent(evt);\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _drawNext\n\t\t * @protected\n\t\t * @return Boolean Returns false if this is the last draw.\n\t\t **/\n\t\tp._drawNext = function() {\n\t\t\tvar frame = this._frames[this._index];\n\t\t\tvar sc = frame.scale*this._scale;\n\t\t\tvar rect = frame.rect;\n\t\t\tvar sourceRect = frame.sourceRect;\n\t\t\tvar canvas = this._data.images[frame.img];\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t\t\tframe.funct&&frame.funct(frame.source, frame.data);\n\t\t\tctx.save();\n\t\t\tctx.beginPath();\n\t\t\tctx.rect(rect.x, rect.y, rect.width, rect.height);\n\t\t\tctx.clip();\n\t\t\tctx.translate(Math.ceil(rect.x-sourceRect.x*sc), Math.ceil(rect.y-sourceRect.y*sc));\n\t\t\tctx.scale(sc,sc);\n\t\t\tframe.source.draw(ctx); // display object will draw itself.\n\t\t\tctx.restore();\n\t\t\treturn (++this._index) < this._frames.length;\n\t\t};\n\t\n\t\n\t\tcreatejs.SpriteSheetBuilder = createjs.promote(SpriteSheetBuilder, \"EventDispatcher\");\n\t}());\n\t\n\t//##############################################################################\n\t// DOMElement.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * <b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>\n\t\t *\n\t\t * A DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\n\t\t * within the DOM as though it is child of the {{#crossLink \"Container\"}}{{/crossLink}} it is added to. However, it is\n\t\t * not rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\n\t\t * drawn in front of or behind the canvas).\n\t\t *\n\t\t * The position of a DOMElement is relative to their parent node in the DOM. It is recommended that\n\t\t * the DOM Object be added to a div that also contains the canvas so that they share the same position\n\t\t * on the page.\n\t\t *\n\t\t * DOMElement is useful for positioning HTML elements over top of canvas content, and for elements\n\t\t * that you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\n\t\t * content.\n\t\t *\n\t\t * <h4>Mouse Interaction</h4>\n\t\t *\n\t\t * DOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\n\t\t * events or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to\n\t\t * the htmlElement (note, this does not support EventDispatcher)\n\t\t *\n\t\t *      var domElement = new createjs.DOMElement(htmlElement);\n\t\t *      domElement.htmlElement.onclick = function() {\n\t\t *          console.log(\"clicked\");\n\t\t *      }\n\t\t *\n\t\t * @class DOMElement\n\t\t * @extends DisplayObject\n\t\t * @constructor\n\t\t * @param {HTMLElement} htmlElement A reference or id for the DOM element to manage.\n\t\t */\n\t\tfunction DOMElement(htmlElement) {\n\t\t\tthis.DisplayObject_constructor();\n\t\t\t\n\t\t\tif (typeof(htmlElement)==\"string\") { htmlElement = document.getElementById(htmlElement); }\n\t\t\tthis.mouseEnabled = false;\n\t\t\t\n\t\t\tvar style = htmlElement.style;\n\t\t\tstyle.position = \"absolute\";\n\t\t\tstyle.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = \"0% 0%\";\n\t\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The DOM object to manage.\n\t\t\t * @property htmlElement\n\t\t\t * @type HTMLElement\n\t\t\t */\n\t\t\tthis.htmlElement = htmlElement;\n\t\t\n\t\t\n\t\t// private properties:\n\t\t\t/**\n\t\t\t * @property _oldMtx\n\t\t\t * @type Matrix2D\n\t\t\t * @protected\n\t\t\t */\n\t\t\tthis._oldProps = null;\n\t\t}\n\t\tvar p = createjs.extend(DOMElement, createjs.DisplayObject);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method isVisible\n\t\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t\t */\n\t\tp.isVisible = function() {\n\t\t\treturn this.htmlElement != null;\n\t\t};\n\t\n\t\t/**\n\t\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t\t * Returns true if the draw was handled (useful for overriding functionality).\n\t\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t\t * @method draw\n\t\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t\t * into itself).\n\t\t * @return {Boolean}\n\t\t */\n\t\tp.draw = function(ctx, ignoreCache) {\n\t\t\t// this relies on the _tick method because draw isn't called if the parent is not visible.\n\t\t\t// the actual update happens in _handleDrawEnd\n\t\t\treturn true;\n\t\t};\n\t\n\t\t/**\n\t\t * Not applicable to DOMElement.\n\t\t * @method cache\n\t\t */\n\t\tp.cache = function() {};\n\t\n\t\t/**\n\t\t * Not applicable to DOMElement.\n\t\t * @method uncache\n\t\t */\n\t\tp.uncache = function() {};\n\t\n\t\t/**\n\t\t * Not applicable to DOMElement.\n\t\t * @method updateCache\n\t\t */\n\t\tp.updateCache = function() {};\n\t\n\t\t/**\n\t\t * Not applicable to DOMElement.\n\t\t * @method hitTest\n\t\t */\n\t\tp.hitTest = function() {};\n\t\n\t\t/**\n\t\t * Not applicable to DOMElement.\n\t\t * @method localToGlobal\n\t\t */\n\t\tp.localToGlobal = function() {};\n\t\n\t\t/**\n\t\t * Not applicable to DOMElement.\n\t\t * @method globalToLocal\n\t\t */\n\t\tp.globalToLocal = function() {};\n\t\n\t\t/**\n\t\t * Not applicable to DOMElement.\n\t\t * @method localToLocal\n\t\t */\n\t\tp.localToLocal = function() {};\n\t\n\t\t/**\n\t\t * DOMElement cannot be cloned. Throws an error.\n\t\t * @method clone\n\t\t */\n\t\tp.clone = function() {\n\t\t\tthrow(\"DOMElement cannot be cloned.\")\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t */\n\t\tp.toString = function() {\n\t\t\treturn \"[DOMElement (name=\"+  this.name +\")]\";\n\t\t};\n\t\n\t\t/**\n\t     * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n\t\t * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t\t * @event click\n\t\t */\n\t\n\t     /**\n\t     * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n\t \t * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t\t * @event dblClick\n\t\t */\n\t\n\t     /**\n\t      * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n\t \t  * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t\t  * @event mousedown\n\t\t  */\n\t\n\t     /**\n\t      * The HTMLElement can listen for the mouseover event, not the DOMElement instance.\n\t      * Since DOMElement instances are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t      * @event mouseover\n\t\t  */\n\t\n\t     /**\n\t      * Not applicable to DOMElement.\n\t\t  * @event tick\n\t\t  */\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _tick\n\t\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t\t * function.\n\t\t * @protected\n\t\t */\n\t\tp._tick = function(evtObj) {\n\t\t\tvar stage = this.getStage();\n\t\t\tstage&&stage.on(\"drawend\", this._handleDrawEnd, this, true);\n\t\t\tthis.DisplayObject__tick(evtObj);\n\t\t};\n\t\t\n\t\t/**\n\t\t * @method _handleDrawEnd\n\t\t * @param {Event} evt\n\t\t * @protected\n\t\t */\n\t\tp._handleDrawEnd = function(evt) {\n\t\t\tvar o = this.htmlElement;\n\t\t\tif (!o) { return; }\n\t\t\tvar style = o.style;\n\t\t\t\n\t\t\tvar props = this.getConcatenatedDisplayProps(this._props), mtx = props.matrix;\n\t\t\t\n\t\t\tvar visibility = props.visible ? \"visible\" : \"hidden\";\n\t\t\tif (visibility != style.visibility) { style.visibility = visibility; }\n\t\t\tif (!props.visible) { return; }\n\t\t\t\n\t\t\tvar oldProps = this._oldProps, oldMtx = oldProps&&oldProps.matrix;\n\t\t\tvar n = 10000; // precision\n\t\t\t\n\t\t\tif (!oldMtx || !oldMtx.equals(mtx)) {\n\t\t\t\tvar str = \"matrix(\" + (mtx.a*n|0)/n +\",\"+ (mtx.b*n|0)/n +\",\"+ (mtx.c*n|0)/n +\",\"+ (mtx.d*n|0)/n +\",\"+ (mtx.tx+0.5|0);\n\t\t\t\tstyle.transform = style.WebkitTransform = style.OTransform = style.msTransform = str +\",\"+ (mtx.ty+0.5|0) +\")\";\n\t\t\t\tstyle.MozTransform = str +\"px,\"+ (mtx.ty+0.5|0) +\"px)\";\n\t\t\t\tif (!oldProps) { oldProps = this._oldProps = new createjs.DisplayProps(true, NaN); }\n\t\t\t\toldProps.matrix.copy(mtx);\n\t\t\t}\n\t\t\t\n\t\t\tif (oldProps.alpha != props.alpha) {\n\t\t\t\tstyle.opacity = \"\"+(props.alpha*n|0)/n;\n\t\t\t\toldProps.alpha = props.alpha;\n\t\t\t}\n\t\t};\n\t\n\t\n\t\tcreatejs.DOMElement = createjs.promote(DOMElement, \"DisplayObject\");\n\t}());\n\t\n\t//##############################################################################\n\t// Filter.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using\n\t\t * the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method. If an object changes, please cache it again, or use\n\t\t * {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}}. Note that the filters must be applied before caching.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      myInstance.filters = [\n\t\t *          new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),\n\t\t *          new createjs.BlurFilter(5, 5, 10)\n\t\t *      ];\n\t\t *      myInstance.cache(0,0, 100, 100);\n\t\t *\n\t\t * Note that each filter can implement a {{#crossLink \"Filter/getBounds\"}}{{/crossLink}} method, which returns the\n\t\t * margins that need to be applied in order to fully display the filter. For example, the {{#crossLink \"BlurFilter\"}}{{/crossLink}}\n\t\t * will cause an object to feather outwards, resulting in a margin around the shape.\n\t\t *\n\t\t * <h4>EaselJS Filters</h4>\n\t\t * EaselJS comes with a number of pre-built filters:\n\t\t * <ul><li>{{#crossLink \"AlphaMapFilter\"}}{{/crossLink}} : Map a greyscale image to the alpha channel of a display object</li>\n\t\t *      <li>{{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}: Map an image's alpha channel to the alpha channel of a display object</li>\n\t\t *      <li>{{#crossLink \"BlurFilter\"}}{{/crossLink}}: Apply vertical and horizontal blur to a display object</li>\n\t\t *      <li>{{#crossLink \"ColorFilter\"}}{{/crossLink}}: Color transform a display object</li>\n\t\t *      <li>{{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}: Transform an image using a {{#crossLink \"ColorMatrix\"}}{{/crossLink}}</li>\n\t\t * </ul>\n\t\t *\n\t\t * @class Filter\n\t\t * @constructor\n\t\t **/\n\t\tfunction Filter() {}\n\t\tvar p = Filter.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.\n\t\t * @method getBounds\n\t\t * @param {Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.\n\t\t * @return {Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.\n\t\t **/\n\t\tp.getBounds = function(rect) {\n\t\t\treturn rect;\n\t\t};\n\t\n\t\t/**\n\t\t * Applies the filter to the specified context.\n\t\t * @method applyFilter\n\t\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t\t * @param {Number} x The x position to use for the source rect.\n\t\t * @param {Number} y The y position to use for the source rect.\n\t\t * @param {Number} width The width to use for the source rect.\n\t\t * @param {Number} height The height to use for the source rect.\n\t\t * @param {CanvasRenderingContext2D} [targetCtx] The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t\t * @param {Number} [targetX] The x position to draw the result to. Defaults to the value passed to x.\n\t\t * @param {Number} [targetY] The y position to draw the result to. Defaults to the value passed to y.\n\t\t * @return {Boolean} If the filter was applied successfully.\n\t\t **/\n\t\tp.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\t\t// this is the default behaviour because most filters access pixel data. It is overridden when not needed.\n\t\t\ttargetCtx = targetCtx || ctx;\n\t\t\tif (targetX == null) { targetX = x; }\n\t\t\tif (targetY == null) { targetY = y; }\n\t\t\ttry {\n\t\t\t\tvar imageData = ctx.getImageData(x, y, width, height);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this._applyFilter(imageData)) {\n\t\t\t\ttargetCtx.putImageData(imageData, targetX, targetY);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[Filter]\";\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of this Filter instance.\n\t\t * @method clone\n\t\t * @return {Filter} A clone of the current Filter instance.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn new Filter();\n\t\t};\n\t\t\n\t// private methods:\n\t\t/**\n\t\t * @method _applyFilter\n\t\t * @param {ImageData} imageData Target ImageData instance.\n\t\t * @return {Boolean}\n\t\t **/\n\t\tp._applyFilter = function(imageData) { return true; };\n\t\n\t\n\t\tcreatejs.Filter = Filter;\n\t}());\n\t\n\t//##############################################################################\n\t// BlurFilter.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is\n\t\t * set higher than 1.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * This example creates a red circle, and then applies a 5 pixel blur to it. It uses the {{#crossLink \"Filter/getBounds\"}}{{/crossLink}}\n\t\t * method to account for the spread that the blur causes.\n\t\t *\n\t\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t\t *\n\t\t *      var blurFilter = new createjs.BlurFilter(5, 5, 1);\n\t\t *      shape.filters = [blurFilter];\n\t\t *      var bounds = blurFilter.getBounds();\n\t\t *\n\t\t *      shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);\n\t\t *\n\t\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t\t * @class BlurFilter\n\t\t * @extends Filter\n\t\t * @constructor\n\t\t * @param {Number} [blurX=0] The horizontal blur radius in pixels.\n\t\t * @param {Number} [blurY=0] The vertical blur radius in pixels.\n\t\t * @param {Number} [quality=1] The number of blur iterations.\n\t\t **/\n\t\tfunction BlurFilter( blurX, blurY, quality) {\n\t\t\tif ( isNaN(blurX) || blurX < 0 ) blurX = 0;\n\t\t\tif ( isNaN(blurY) || blurY < 0 ) blurY = 0;\n\t\t\tif ( isNaN(quality) || quality < 1  ) quality = 1;\n\t\n\t\n\t\t\t// public properties:\n\t\t\t/**\n\t\t\t * Horizontal blur radius in pixels\n\t\t\t * @property blurX\n\t\t\t * @default 0\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.blurX = blurX | 0;\n\t\n\t\t\t/**\n\t\t\t * Vertical blur radius in pixels\n\t\t\t * @property blurY\n\t\t\t * @default 0\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.blurY = blurY | 0;\n\t\n\t\t\t/**\n\t\t\t * Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a\n\t\t\t * smoother blur, but take twice as long to run.\n\t\t\t * @property quality\n\t\t\t * @default 1\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.quality = quality | 0;\n\t\t}\n\t\tvar p = createjs.extend(BlurFilter, createjs.Filter);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n\t// constants:\n\t\t/**\n\t\t * Array of multiply values for blur calculations.\n\t\t * @property MUL_TABLE\n\t\t * @type Array\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tBlurFilter.MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];\n\t\n\t\t/**\n\t\t * Array of shift values for blur calculations.\n\t\t * @property SHG_TABLE\n\t\t * @type Array\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tBlurFilter.SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9];\n\t\n\t// public methods:\n\t\t/** docced in super class **/\n\t\tp.getBounds = function (rect) {\n\t\t\tvar x = this.blurX|0, y = this.blurY| 0;\n\t\t\tif (x <= 0 && y <= 0) { return rect; }\n\t\t\tvar q = Math.pow(this.quality, 0.2);\n\t\t\treturn (rect || new createjs.Rectangle()).pad(x*q+1,y*q+1,x*q+1,y*q+1);\n\t\t};\n\t\n\t\t/** docced in super class **/\n\t\tp.clone = function() {\n\t\t\treturn new BlurFilter(this.blurX, this.blurY, this.quality);\n\t\t};\n\t\n\t\t/** docced in super class **/\n\t\tp.toString = function() {\n\t\t\treturn \"[BlurFilter]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\n\t\t/** docced in super class **/\n\t\tp._applyFilter = function (imageData) {\n\t\n\t\t\tvar radiusX = this.blurX >> 1;\n\t\t\tif (isNaN(radiusX) || radiusX < 0) return false;\n\t\t\tvar radiusY = this.blurY >> 1;\n\t\t\tif (isNaN(radiusY) || radiusY < 0) return false;\n\t\t\tif (radiusX == 0 && radiusY == 0) return false;\n\t\n\t\t\tvar iterations = this.quality;\n\t\t\tif (isNaN(iterations) || iterations < 1) iterations = 1;\n\t\t\titerations |= 0;\n\t\t\tif (iterations > 3) iterations = 3;\n\t\t\tif (iterations < 1) iterations = 1;\n\t\n\t\t\tvar px = imageData.data;\n\t\t\tvar x=0, y=0, i=0, p=0, yp=0, yi=0, yw=0, r=0, g=0, b=0, a=0, pr=0, pg=0, pb=0, pa=0;\n\t\n\t\t\tvar divx = (radiusX + radiusX + 1) | 0;\n\t\t\tvar divy = (radiusY + radiusY + 1) | 0;\n\t\t\tvar w = imageData.width | 0;\n\t\t\tvar h = imageData.height | 0;\n\t\n\t\t\tvar w1 = (w - 1) | 0;\n\t\t\tvar h1 = (h - 1) | 0;\n\t\t\tvar rxp1 = (radiusX + 1) | 0;\n\t\t\tvar ryp1 = (radiusY + 1) | 0;\n\t\n\t\t\tvar ssx = {r:0,b:0,g:0,a:0};\n\t\t\tvar sx = ssx;\n\t\t\tfor ( i = 1; i < divx; i++ )\n\t\t\t{\n\t\t\t\tsx = sx.n = {r:0,b:0,g:0,a:0};\n\t\t\t}\n\t\t\tsx.n = ssx;\n\t\n\t\t\tvar ssy = {r:0,b:0,g:0,a:0};\n\t\t\tvar sy = ssy;\n\t\t\tfor ( i = 1; i < divy; i++ )\n\t\t\t{\n\t\t\t\tsy = sy.n = {r:0,b:0,g:0,a:0};\n\t\t\t}\n\t\t\tsy.n = ssy;\n\t\n\t\t\tvar si = null;\n\t\n\t\n\t\t\tvar mtx = BlurFilter.MUL_TABLE[radiusX] | 0;\n\t\t\tvar stx = BlurFilter.SHG_TABLE[radiusX] | 0;\n\t\t\tvar mty = BlurFilter.MUL_TABLE[radiusY] | 0;\n\t\t\tvar sty = BlurFilter.SHG_TABLE[radiusY] | 0;\n\t\n\t\t\twhile (iterations-- > 0) {\n\t\n\t\t\t\tyw = yi = 0;\n\t\t\t\tvar ms = mtx;\n\t\t\t\tvar ss = stx;\n\t\t\t\tfor (y = h; --y > -1;) {\n\t\t\t\t\tr = rxp1 * (pr = px[(yi) | 0]);\n\t\t\t\t\tg = rxp1 * (pg = px[(yi + 1) | 0]);\n\t\t\t\t\tb = rxp1 * (pb = px[(yi + 2) | 0]);\n\t\t\t\t\ta = rxp1 * (pa = px[(yi + 3) | 0]);\n\t\n\t\t\t\t\tsx = ssx;\n\t\n\t\t\t\t\tfor( i = rxp1; --i > -1; )\n\t\t\t\t\t{\n\t\t\t\t\t\tsx.r = pr;\n\t\t\t\t\t\tsx.g = pg;\n\t\t\t\t\t\tsx.b = pb;\n\t\t\t\t\t\tsx.a = pa;\n\t\t\t\t\t\tsx = sx.n;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor( i = 1; i < rxp1; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tp = (yi + ((w1 < i ? w1 : i) << 2)) | 0;\n\t\t\t\t\t\tr += ( sx.r = px[p]);\n\t\t\t\t\t\tg += ( sx.g = px[p+1]);\n\t\t\t\t\t\tb += ( sx.b = px[p+2]);\n\t\t\t\t\t\ta += ( sx.a = px[p+3]);\n\t\n\t\t\t\t\t\tsx = sx.n;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tsi = ssx;\n\t\t\t\t\tfor ( x = 0; x < w; x++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tpx[yi++] = (r * ms) >>> ss;\n\t\t\t\t\t\tpx[yi++] = (g * ms) >>> ss;\n\t\t\t\t\t\tpx[yi++] = (b * ms) >>> ss;\n\t\t\t\t\t\tpx[yi++] = (a * ms) >>> ss;\n\t\n\t\t\t\t\t\tp = ((yw + ((p = x + radiusX + 1) < w1 ? p : w1)) << 2);\n\t\n\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\t\n\t\t\t\t\t\tsi = si.n;\n\t\n\t\t\t\t\t}\n\t\t\t\t\tyw += w;\n\t\t\t\t}\n\t\n\t\t\t\tms = mty;\n\t\t\t\tss = sty;\n\t\t\t\tfor (x = 0; x < w; x++) {\n\t\t\t\t\tyi = (x << 2) | 0;\n\t\n\t\t\t\t\tr = (ryp1 * (pr = px[yi])) | 0;\n\t\t\t\t\tg = (ryp1 * (pg = px[(yi + 1) | 0])) | 0;\n\t\t\t\t\tb = (ryp1 * (pb = px[(yi + 2) | 0])) | 0;\n\t\t\t\t\ta = (ryp1 * (pa = px[(yi + 3) | 0])) | 0;\n\t\n\t\t\t\t\tsy = ssy;\n\t\t\t\t\tfor( i = 0; i < ryp1; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tsy.r = pr;\n\t\t\t\t\t\tsy.g = pg;\n\t\t\t\t\t\tsy.b = pb;\n\t\t\t\t\t\tsy.a = pa;\n\t\t\t\t\t\tsy = sy.n;\n\t\t\t\t\t}\n\t\n\t\t\t\t\typ = w;\n\t\n\t\t\t\t\tfor( i = 1; i <= radiusY; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tyi = ( yp + x ) << 2;\n\t\n\t\t\t\t\t\tr += ( sy.r = px[yi]);\n\t\t\t\t\t\tg += ( sy.g = px[yi+1]);\n\t\t\t\t\t\tb += ( sy.b = px[yi+2]);\n\t\t\t\t\t\ta += ( sy.a = px[yi+3]);\n\t\n\t\t\t\t\t\tsy = sy.n;\n\t\n\t\t\t\t\t\tif( i < h1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\typ += w;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tyi = x;\n\t\t\t\t\tsi = ssy;\n\t\t\t\t\tif ( iterations > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss );\n\t\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss );\n\t\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\t\n\t\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\t\n\t\t\t\t\t\t\tsi = si.n;\n\t\n\t\t\t\t\t\t\tyi += w;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpa = 255 / pa;\n\t\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\t\n\t\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\t\n\t\t\t\t\t\t\tsi = si.n;\n\t\n\t\t\t\t\t\t\tyi += w;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\n\t\tcreatejs.BlurFilter = createjs.promote(BlurFilter, \"Filter\");\n\t}());\n\t\n\t//##############################################################################\n\t// AlphaMapFilter.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs || {};\n\t\n\t(function () {\n\t\t\"use strict\";\n\t\t\n\t\t\n\t// constructor:\n\t\t/**\n\t\t * Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will\n\t\t * be copied from the red channel of the map, and the RGB channels will be copied from the target.\n\t\t *\n\t\t * Generally, it is recommended that you use {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}, because it has much\n\t\t * better performance.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * This example draws a red->blue box, caches it, and then uses the cache canvas as an alpha map on a 100x100 image.\n\t\t *\n\t\t *       var box = new createjs.Shape();\n\t\t *       box.graphics.beginLinearGradientFill([\"#ff0000\", \"#0000ff\"], [0, 1], 0, 0, 0, 100)\n\t\t *       box.graphics.drawRect(0, 0, 100, 100);\n\t\t *       box.cache(0, 0, 100, 100);\n\t\t *\n\t\t *       var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n\t\t *       bmp.filters = [\n\t\t *           new createjs.AlphaMapFilter(box.cacheCanvas)\n\t\t *       ];\n\t\t *       bmp.cache(0, 0, 100, 100);\n\t\t *       stage.addChild(bmp);\n\t\t *\n\t\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n\t\t * @class AlphaMapFilter\n\t\t * @extends Filter\n\t\t * @constructor\n\t\t * @param {HTMLImageElement|HTMLCanvasElement} alphaMap The greyscale image (or canvas) to use as the alpha value for the\n\t\t * result. This should be exactly the same dimensions as the target.\n\t\t **/\n\t\tfunction AlphaMapFilter(alphaMap) {\n\t\t\n\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same\n\t\t\t * dimensions as the target.\n\t\t\t * @property alphaMap\n\t\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t\t **/\n\t\t\tthis.alphaMap = alphaMap;\n\t\t\t\n\t\t\t\n\t\t// private properties:\n\t\t\t/**\n\t\t\t * @property _alphaMap\n\t\t\t * @protected\n\t\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t\t **/\n\t\t\tthis._alphaMap = null;\n\t\t\t\n\t\t\t/**\n\t\t\t * @property _mapData\n\t\t\t * @protected\n\t\t\t * @type Uint8ClampedArray\n\t\t\t **/\n\t\t\tthis._mapData = null;\n\t\t}\n\t\tvar p = createjs.extend(AlphaMapFilter, createjs.Filter);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n\t// public methods:\n\t\t/** docced in super class **/\n\t\tp.clone = function () {\n\t\t\tvar o = new AlphaMapFilter(this.alphaMap);\n\t\t\to._alphaMap = this._alphaMap;\n\t\t\to._mapData = this._mapData;\n\t\t\treturn o;\n\t\t};\n\t\n\t\t/** docced in super class **/\n\t\tp.toString = function () {\n\t\t\treturn \"[AlphaMapFilter]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/** docced in super class **/\n\t\tp._applyFilter = function (imageData) {\n\t\t\tif (!this.alphaMap) { return true; }\n\t\t\tif (!this._prepAlphaMap()) { return false; }\n\t\t\t\n\t\t\t// TODO: update to support scenarios where the target has different dimensions.\n\t\t\tvar data = imageData.data;\n\t\t\tvar map = this._mapData;\n\t\t\tfor(var i=0, l=data.length; i<l; i += 4) { data[i + 3] = map[i] || 0; }\n\t\t\t\n\t\t\treturn true;\n\t\t};\n\t\n\t\t/**\n\t\t * @method _prepAlphaMap\n\t\t * @protected\n\t\t **/\n\t\tp._prepAlphaMap = function () {\n\t\t\tif (!this.alphaMap) { return false; }\n\t\t\tif (this.alphaMap == this._alphaMap && this._mapData) { return true; }\n\t\n\t\t\tthis._mapData = null;\n\t\t\tvar map = this._alphaMap = this.alphaMap;\n\t\t\tvar canvas = map;\n\t\t\tvar ctx;\n\t\t\tif (map instanceof HTMLCanvasElement) {\n\t\t\t\tctx = canvas.getContext(\"2d\");\n\t\t\t} else {\n\t\t\t\tcanvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n\t\t\t\tcanvas.width = map.width;\n\t\t\t\tcanvas.height = map.height;\n\t\t\t\tctx = canvas.getContext(\"2d\");\n\t\t\t\tctx.drawImage(map, 0, 0);\n\t\t\t}\n\t\n\t\t\ttry {\n\t\t\t\tvar imgData = ctx.getImageData(0, 0, map.width, map.height);\n\t\t\t} catch (e) {\n\t\t\t\t//if (!this.suppressCrossDomainErrors) throw new Error(\"unable to access local image data: \" + e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tthis._mapData = imgData.data;\n\t\t\treturn true;\n\t\t};\n\t\n\t\n\t\tcreatejs.AlphaMapFilter = createjs.promote(AlphaMapFilter, \"Filter\");\n\t}());\n\t\n\t//##############################################################################\n\t// AlphaMaskFilter.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs || {};\n\t\n\t(function () {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will\n\t\t * be derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to\n\t\t * apply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32\n\t\t * alpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.\n\t\t *\n\t\t * <b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * This example draws a gradient box, then caches it and uses the \"cacheCanvas\" as the alpha mask on a 100x100 image.\n\t\t *\n\t\t *      var box = new createjs.Shape();\n\t\t *      box.graphics.beginLinearGradientFill([\"#000000\", \"rgba(0, 0, 0, 0)\"], [0, 1], 0, 0, 100, 100)\n\t\t *      box.graphics.drawRect(0, 0, 100, 100);\n\t\t *      box.cache(0, 0, 100, 100);\n\t\t *\n\t\t *      var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n\t\t *      bmp.filters = [\n\t\t *          new createjs.AlphaMaskFilter(box.cacheCanvas)\n\t\t *      ];\n\t\t *      bmp.cache(0, 0, 100, 100);\n\t\t *\n\t\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n\t\t * @class AlphaMaskFilter\n\t\t * @extends Filter\n\t\t * @constructor\n\t\t * @param {HTMLImageElement|HTMLCanvasElement} mask\n\t\t **/\n\t\tfunction AlphaMaskFilter(mask) {\n\t\t\n\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * The image (or canvas) to use as the mask.\n\t\t\t * @property mask\n\t\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t\t **/\n\t\t\tthis.mask = mask;\n\t\t}\n\t\tvar p = createjs.extend(AlphaMaskFilter, createjs.Filter);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Applies the filter to the specified context.\n\t\t *\n\t\t * <strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters\n\t\t * correctly.</strong>\n\t\t * @method applyFilter\n\t\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t\t * @param {Number} x The x position to use for the source rect.\n\t\t * @param {Number} y The y position to use for the source rect.\n\t\t * @param {Number} width The width to use for the source rect.\n\t\t * @param {Number} height The height to use for the source rect.\n\t\t * @param {CanvasRenderingContext2D} [targetCtx] NOT SUPPORTED IN THIS FILTER. The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t\t * @param {Number} [targetX] NOT SUPPORTED IN THIS FILTER. The x position to draw the result to. Defaults to the value passed to x.\n\t\t * @param {Number} [targetY] NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.\n\t\t * @return {Boolean} If the filter was applied successfully.\n\t\t **/\n\t\tp.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\t\tif (!this.mask) { return true; }\n\t\t\ttargetCtx = targetCtx || ctx;\n\t\t\tif (targetX == null) { targetX = x; }\n\t\t\tif (targetY == null) { targetY = y; }\n\t\n\t\t\ttargetCtx.save();\n\t\t\tif (ctx != targetCtx) {\n\t\t\t\t// TODO: support targetCtx and targetX/Y\n\t\t\t\t// clearRect, then draw the ctx in?\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\ttargetCtx.globalCompositeOperation = \"destination-in\";\n\t\t\ttargetCtx.drawImage(this.mask, targetX, targetY);\n\t\t\ttargetCtx.restore();\n\t\t\treturn true;\n\t\t};\n\t\n\t\t/** docced in super class **/\n\t\tp.clone = function () {\n\t\t\treturn new AlphaMaskFilter(this.mask);\n\t\t};\n\t\n\t\t/** docced in super class **/\n\t\tp.toString = function () {\n\t\t\treturn \"[AlphaMaskFilter]\";\n\t\t};\n\t\n\t\n\t\tcreatejs.AlphaMaskFilter = createjs.promote(AlphaMaskFilter, \"Filter\");\n\t}());\n\t\n\t//##############################################################################\n\t// ColorFilter.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Applies a color transform to DisplayObjects.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * This example draws a red circle, and then transforms it to Blue. This is accomplished by multiplying all the channels\n\t\t * to 0 (except alpha, which is set to 1), and then adding 255 to the blue channel.\n\t\t *\n\t\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t\t *\n\t\t *      shape.filters = [\n\t\t *          new createjs.ColorFilter(0,0,0,1, 0,0,255,0)\n\t\t *      ];\n\t\t *      shape.cache(-50, -50, 100, 100);\n\t\t *\n\t\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t\t * @class ColorFilter\n\t\t * @param {Number} [redMultiplier=1] The amount to multiply against the red channel. This is a range between 0 and 1.\n\t\t * @param {Number} [greenMultiplier=1] The amount to multiply against the green channel. This is a range between 0 and 1.\n\t\t * @param {Number} [blueMultiplier=1] The amount to multiply against the blue channel. This is a range between 0 and 1.\n\t\t * @param {Number} [alphaMultiplier=1] The amount to multiply against the alpha channel. This is a range between 0 and 1.\n\t\t * @param {Number} [redOffset=0] The amount to add to the red channel after it has been multiplied. This is a range\n\t\t * between -255 and 255.\n\t\t * @param {Number} [greenOffset=0] The amount to add to the green channel after it has been multiplied. This is a range\n\t\t  * between -255 and 255.\n\t\t * @param {Number} [blueOffset=0] The amount to add to the blue channel after it has been multiplied. This is a range\n\t\t  * between -255 and 255.\n\t\t * @param {Number} [alphaOffset=0] The amount to add to the alpha channel after it has been multiplied. This is a range\n\t\t  * between -255 and 255.\n\t\t * @constructor\n\t\t * @extends Filter\n\t\t **/\n\t\tfunction ColorFilter(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {\n\t\t\t\n\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * Red channel multiplier.\n\t\t\t * @property redMultiplier\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.redMultiplier = redMultiplier != null ? redMultiplier : 1;\n\t\t\n\t\t\t/**\n\t\t\t * Green channel multiplier.\n\t\t\t * @property greenMultiplier\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.greenMultiplier = greenMultiplier != null ? greenMultiplier : 1;\n\t\t\n\t\t\t/**\n\t\t\t * Blue channel multiplier.\n\t\t\t * @property blueMultiplier\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.blueMultiplier = blueMultiplier != null ? blueMultiplier : 1;\n\t\t\n\t\t\t/**\n\t\t\t * Alpha channel multiplier.\n\t\t\t * @property alphaMultiplier\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.alphaMultiplier = alphaMultiplier != null ? alphaMultiplier : 1;\n\t\t\n\t\t\t/**\n\t\t\t * Red channel offset (added to value).\n\t\t\t * @property redOffset\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.redOffset = redOffset || 0;\n\t\t\n\t\t\t/**\n\t\t\t * Green channel offset (added to value).\n\t\t\t * @property greenOffset\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.greenOffset = greenOffset || 0;\n\t\t\n\t\t\t/**\n\t\t\t * Blue channel offset (added to value).\n\t\t\t * @property blueOffset\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.blueOffset = blueOffset || 0;\n\t\t\n\t\t\t/**\n\t\t\t * Alpha channel offset (added to value).\n\t\t\t * @property alphaOffset\n\t\t\t * @type Number\n\t\t\t **/\n\t\t\tthis.alphaOffset = alphaOffset || 0;\n\t\t}\n\t\tvar p = createjs.extend(ColorFilter, createjs.Filter);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n\t// public methods:\n\t\t/** docced in super class **/\n\t\tp.toString = function() {\n\t\t\treturn \"[ColorFilter]\";\n\t\t};\n\t\n\t\t/** docced in super class **/\n\t\tp.clone = function() {\n\t\t\treturn new ColorFilter(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);\n\t\t};\n\t\t\n\t\n\t// private methods:\n\t\t/** docced in super class **/\n\t\tp._applyFilter = function(imageData) {\n\t\t\tvar data = imageData.data;\n\t\t\tvar l = data.length;\n\t\t\tfor (var i=0; i<l; i+=4) {\n\t\t\t\tdata[i] = data[i]*this.redMultiplier+this.redOffset;\n\t\t\t\tdata[i+1] = data[i+1]*this.greenMultiplier+this.greenOffset;\n\t\t\t\tdata[i+2] = data[i+2]*this.blueMultiplier+this.blueOffset;\n\t\t\t\tdata[i+3] = data[i+3]*this.alphaMultiplier+this.alphaOffset;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\n\t\n\t\tcreatejs.ColorFilter = createjs.promote(ColorFilter, \"Filter\");\n\t}());\n\t\n\t//##############################################################################\n\t// ColorMatrix.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Provides helper functions for assembling a matrix for use with the {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}.\n\t\t * Most methods return the instance to facilitate chained calls.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      myColorMatrix.adjustHue(20).adjustBrightness(50);\n\t\t *\n\t\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}\n\t\t * for an example of how to use ColorMatrix to change a DisplayObject's color.\n\t\t * @class ColorMatrix\n\t\t * @param {Number} brightness\n\t\t * @param {Number} contrast\n\t\t * @param {Number} saturation\n\t\t * @param {Number} hue\n\t\t * @constructor\n\t\t **/\n\t\tfunction ColorMatrix(brightness, contrast, saturation, hue) {\n\t\t\tthis.setColor(brightness, contrast, saturation, hue);\n\t\t}\n\t\tvar p = ColorMatrix.prototype;\n\t\n\t\t/**\n\t\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t\t * for details.\n\t\t *\n\t\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t\t *\n\t\t * @method initialize\n\t\t * @protected\n\t\t * @deprecated\n\t\t */\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\t\n\t// constants:\n\t\t/**\n\t\t * Array of delta values for contrast calculations.\n\t\t * @property DELTA_INDEX\n\t\t * @type Array\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tColorMatrix.DELTA_INDEX = [\n\t\t\t0,    0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1,  0.11,\n\t\t\t0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24,\n\t\t\t0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42,\n\t\t\t0.44, 0.46, 0.48, 0.5,  0.53, 0.56, 0.59, 0.62, 0.65, 0.68,\n\t\t\t0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98,\n\t\t\t1.0,  1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54,\n\t\t\t1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0,  2.12, 2.25,\n\t\t\t2.37, 2.50, 2.62, 2.75, 2.87, 3.0,  3.2,  3.4,  3.6,  3.8,\n\t\t\t4.0,  4.3,  4.7,  4.9,  5.0,  5.5,  6.0,  6.5,  6.8,  7.0,\n\t\t\t7.3,  7.5,  7.8,  8.0,  8.4,  8.7,  9.0,  9.4,  9.6,  9.8,\n\t\t\t10.0\n\t\t];\n\t\n\t\t/**\n\t\t * Identity matrix values.\n\t\t * @property IDENTITY_MATRIX\n\t\t * @type Array\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tColorMatrix.IDENTITY_MATRIX = [\n\t\t\t1,0,0,0,0,\n\t\t\t0,1,0,0,0,\n\t\t\t0,0,1,0,0,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t];\n\t\n\t\t/**\n\t\t * The constant length of a color matrix.\n\t\t * @property LENGTH\n\t\t * @type Number\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tColorMatrix.LENGTH = ColorMatrix.IDENTITY_MATRIX.length;\n\t\n\t\n\t// public methods:\n\t\t/**\n\t\t * Resets the instance with the specified values.\n\t\t * @method setColor\n\t\t * @param {Number} brightness\n\t\t * @param {Number} contrast\n\t\t * @param {Number} saturation\n\t\t * @param {Number} hue\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t */\n\t\tp.setColor = function(brightness,contrast,saturation,hue) {\n\t\t\treturn this.reset().adjustColor(brightness,contrast,saturation,hue);\n\t\t};\n\t\n\t\t/**\n\t\t * Resets the matrix to identity values.\n\t\t * @method reset\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t */\n\t\tp.reset = function() {\n\t\t\treturn this.copy(ColorMatrix.IDENTITY_MATRIX);\n\t\t};\n\t\n\t\t/**\n\t\t * Shortcut method to adjust brightness, contrast, saturation and hue.\n\t\t * Equivalent to calling adjustHue(hue), adjustContrast(contrast),\n\t\t * adjustBrightness(brightness), adjustSaturation(saturation), in that order.\n\t\t * @method adjustColor\n\t\t * @param {Number} brightness\n\t\t * @param {Number} contrast\n\t\t * @param {Number} saturation\n\t\t * @param {Number} hue\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.adjustColor = function(brightness,contrast,saturation,hue) {\n\t\t\tthis.adjustHue(hue);\n\t\t\tthis.adjustContrast(contrast);\n\t\t\tthis.adjustBrightness(brightness);\n\t\t\treturn this.adjustSaturation(saturation);\n\t\t};\n\t\n\t\t/**\n\t\t * Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\n\t\t * Positive values will make the image brighter, negative values will make it darker.\n\t\t * @method adjustBrightness\n\t\t * @param {Number} value A value between -255 & 255 that will be added to the RGB channels.\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.adjustBrightness = function(value) {\n\t\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\t\tvalue = this._cleanValue(value,255);\n\t\t\tthis._multiplyMatrix([\n\t\t\t\t1,0,0,0,value,\n\t\t\t\t0,1,0,0,value,\n\t\t\t\t0,0,1,0,value,\n\t\t\t\t0,0,0,1,0,\n\t\t\t\t0,0,0,0,1\n\t\t\t]);\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Adjusts the contrast of pixel color.\n\t\t * Positive values will increase contrast, negative values will decrease contrast.\n\t\t * @method adjustContrast\n\t\t * @param {Number} value A value between -100 & 100.\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.adjustContrast = function(value) {\n\t\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\t\tvalue = this._cleanValue(value,100);\n\t\t\tvar x;\n\t\t\tif (value<0) {\n\t\t\t\tx = 127+value/100*127;\n\t\t\t} else {\n\t\t\t\tx = value%1;\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tx = ColorMatrix.DELTA_INDEX[value];\n\t\t\t\t} else {\n\t\t\t\t\tx = ColorMatrix.DELTA_INDEX[(value<<0)]*(1-x)+ColorMatrix.DELTA_INDEX[(value<<0)+1]*x; // use linear interpolation for more granularity.\n\t\t\t\t}\n\t\t\t\tx = x*127+127;\n\t\t\t}\n\t\t\tthis._multiplyMatrix([\n\t\t\t\tx/127,0,0,0,0.5*(127-x),\n\t\t\t\t0,x/127,0,0,0.5*(127-x),\n\t\t\t\t0,0,x/127,0,0.5*(127-x),\n\t\t\t\t0,0,0,1,0,\n\t\t\t\t0,0,0,0,1\n\t\t\t]);\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Adjusts the color saturation of the pixel.\n\t\t * Positive values will increase saturation, negative values will decrease saturation (trend towards greyscale).\n\t\t * @method adjustSaturation\n\t\t * @param {Number} value A value between -100 & 100.\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.adjustSaturation = function(value) {\n\t\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\t\tvalue = this._cleanValue(value,100);\n\t\t\tvar x = 1+((value > 0) ? 3*value/100 : value/100);\n\t\t\tvar lumR = 0.3086;\n\t\t\tvar lumG = 0.6094;\n\t\t\tvar lumB = 0.0820;\n\t\t\tthis._multiplyMatrix([\n\t\t\t\tlumR*(1-x)+x,lumG*(1-x),lumB*(1-x),0,0,\n\t\t\t\tlumR*(1-x),lumG*(1-x)+x,lumB*(1-x),0,0,\n\t\t\t\tlumR*(1-x),lumG*(1-x),lumB*(1-x)+x,0,0,\n\t\t\t\t0,0,0,1,0,\n\t\t\t\t0,0,0,0,1\n\t\t\t]);\n\t\t\treturn this;\n\t\t};\n\t\n\t\n\t\t/**\n\t\t * Adjusts the hue of the pixel color.\n\t\t * @method adjustHue\n\t\t * @param {Number} value A value between -180 & 180.\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.adjustHue = function(value) {\n\t\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\t\tvalue = this._cleanValue(value,180)/180*Math.PI;\n\t\t\tvar cosVal = Math.cos(value);\n\t\t\tvar sinVal = Math.sin(value);\n\t\t\tvar lumR = 0.213;\n\t\t\tvar lumG = 0.715;\n\t\t\tvar lumB = 0.072;\n\t\t\tthis._multiplyMatrix([\n\t\t\t\tlumR+cosVal*(1-lumR)+sinVal*(-lumR),lumG+cosVal*(-lumG)+sinVal*(-lumG),lumB+cosVal*(-lumB)+sinVal*(1-lumB),0,0,\n\t\t\t\tlumR+cosVal*(-lumR)+sinVal*(0.143),lumG+cosVal*(1-lumG)+sinVal*(0.140),lumB+cosVal*(-lumB)+sinVal*(-0.283),0,0,\n\t\t\t\tlumR+cosVal*(-lumR)+sinVal*(-(1-lumR)),lumG+cosVal*(-lumG)+sinVal*(lumG),lumB+cosVal*(1-lumB)+sinVal*(lumB),0,0,\n\t\t\t\t0,0,0,1,0,\n\t\t\t\t0,0,0,0,1\n\t\t\t]);\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Concatenates (multiplies) the specified matrix with this one.\n\t\t * @method concat\n\t\t * @param {Array} matrix An array or ColorMatrix instance.\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.concat = function(matrix) {\n\t\t\tmatrix = this._fixMatrix(matrix);\n\t\t\tif (matrix.length != ColorMatrix.LENGTH) { return this; }\n\t\t\tthis._multiplyMatrix(matrix);\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a clone of this ColorMatrix.\n\t\t * @method clone\n\t\t * @return {ColorMatrix} A clone of this ColorMatrix.\n\t\t **/\n\t\tp.clone = function() {\n\t\t\treturn (new ColorMatrix()).copy(this);\n\t\t};\n\t\n\t\t/**\n\t\t * Return a length 25 (5x5) array instance containing this matrix's values.\n\t\t * @method toArray\n\t\t * @return {Array} An array holding this matrix's values.\n\t\t **/\n\t\tp.toArray = function() {\n\t\t\tvar arr = [];\n\t\t\tfor (var i= 0, l=ColorMatrix.LENGTH; i<l; i++) {\n\t\t\t\tarr[i] = this[i];\n\t\t\t}\n\t\t\treturn arr;\n\t\t};\n\t\n\t\t/**\n\t\t * Copy the specified matrix's values to this matrix.\n\t\t * @method copy\n\t\t * @param {Array} matrix An array or ColorMatrix instance.\n\t\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t **/\n\t\tp.copy = function(matrix) {\n\t\t\tvar l = ColorMatrix.LENGTH;\n\t\t\tfor (var i=0;i<l;i++) {\n\t\t\t\tthis[i] = matrix[i];\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Returns a string representation of this object.\n\t\t * @method toString\n\t\t * @return {String} a string representation of the instance.\n\t\t **/\n\t\tp.toString = function() {\n\t\t\treturn \"[ColorMatrix]\";\n\t\t};\n\t\n\t\n\t// private methods:\n\t\t/**\n\t\t * @method _multiplyMatrix\n\t\t * @param {Array} matrix\n\t\t * @protected\n\t\t **/\n\t\tp._multiplyMatrix = function(matrix) {\n\t\t\tvar i, j, k, col = [];\n\t\n\t\t\tfor (i=0;i<5;i++) {\n\t\t\t\tfor (j=0;j<5;j++) {\n\t\t\t\t\tcol[j] = this[j+i*5];\n\t\t\t\t}\n\t\t\t\tfor (j=0;j<5;j++) {\n\t\t\t\t\tvar val=0;\n\t\t\t\t\tfor (k=0;k<5;k++) {\n\t\t\t\t\t\tval += matrix[j+k*5]*col[k];\n\t\t\t\t\t}\n\t\t\t\t\tthis[j+i*5] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.\n\t\t * @method _cleanValue\n\t\t * @param {Number} value The raw number\n\t\t * @param {Number} limit The maximum that the number can be. The minimum is the limit * -1.\n\t\t * @protected\n\t\t **/\n\t\tp._cleanValue = function(value, limit) {\n\t\t\treturn Math.min(limit,Math.max(-limit,value));\n\t\t};\n\t\n\t\t/**\n\t\t * Makes sure matrixes are 5x5 (25 long).\n\t\t * @method _fixMatrix\n\t\t * @param {Array} matrix\n\t\t * @protected\n\t\t **/\n\t\tp._fixMatrix = function(matrix) {\n\t\t\tif (matrix instanceof ColorMatrix) { matrix = matrix.toArray(); }\n\t\t\tif (matrix.length < ColorMatrix.LENGTH) {\n\t\t\t\tmatrix = matrix.slice(0,matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length,ColorMatrix.LENGTH));\n\t\t\t} else if (matrix.length > ColorMatrix.LENGTH) {\n\t\t\t\tmatrix = matrix.slice(0,ColorMatrix.LENGTH);\n\t\t\t}\n\t\t\treturn matrix;\n\t\t};\n\t\n\t\n\t\tcreatejs.ColorMatrix = ColorMatrix;\n\t}());\n\t\n\t//##############################################################################\n\t// ColorMatrixFilter.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t\t * Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the\n\t\t * {{#crossLink \"ColorMatrix\"}}{{/crossLink}} for more information on changing colors. For an easier color transform,\n\t\t * consider the {{#crossLink \"ColorFilter\"}}{{/crossLink}}.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t * This example creates a red circle, inverts its hue, and then saturates it to brighten it up.\n\t\t *\n\t\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t\t *\n\t\t *      var matrix = new createjs.ColorMatrix().adjustHue(180).adjustSaturation(100);\n\t\t *      shape.filters = [\n\t\t *          new createjs.ColorMatrixFilter(matrix)\n\t\t *      ];\n\t\t *\n\t\t *      shape.cache(-50, -50, 100, 100);\n\t\t *\n\t\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t\t * @class ColorMatrixFilter\n\t\t * @constructor\n\t\t * @extends Filter\n\t\t * @param {Array | ColorMatrix} matrix A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t\t * class.\n\t\t **/\n\t\tfunction ColorMatrixFilter(matrix) {\n\t\t\n\t\t\t\n\t\t// public properties:\n\t\t\t/**\n\t\t\t * A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t\t\t * @property matrix\n\t\t\t * @type Array | ColorMatrix\n\t\t\t **/\n\t\t\tthis.matrix = matrix;\n\t\t}\n\t\tvar p = createjs.extend(ColorMatrixFilter, createjs.Filter);\n\t\n\t\t// TODO: deprecated\n\t\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\t\n\t\n\t// public methods:\n\t\t/** docced in super class **/\n\t\tp.toString = function() {\n\t\t\treturn \"[ColorMatrixFilter]\";\n\t\t};\n\t\n\t\t/** docced in super class **/\n\t\tp.clone = function() {\n\t\t\treturn new ColorMatrixFilter(this.matrix);\n\t\t};\n\t\n\t// private methods:\n\t\t/** docced in super class **/\n\t\tp._applyFilter = function(imageData) { \n\t\t\tvar data = imageData.data;\n\t\t\tvar l = data.length;\n\t\t\tvar r,g,b,a;\n\t\t\tvar mtx = this.matrix;\n\t\t\tvar m0 =  mtx[0],  m1 =  mtx[1],  m2 =  mtx[2],  m3 =  mtx[3],  m4 =  mtx[4];\n\t\t\tvar m5 =  mtx[5],  m6 =  mtx[6],  m7 =  mtx[7],  m8 =  mtx[8],  m9 =  mtx[9];\n\t\t\tvar m10 = mtx[10], m11 = mtx[11], m12 = mtx[12], m13 = mtx[13], m14 = mtx[14];\n\t\t\tvar m15 = mtx[15], m16 = mtx[16], m17 = mtx[17], m18 = mtx[18], m19 = mtx[19];\n\t\n\t\t\tfor (var i=0; i<l; i+=4) {\n\t\t\t\tr = data[i];\n\t\t\t\tg = data[i+1];\n\t\t\t\tb = data[i+2];\n\t\t\t\ta = data[i+3];\n\t\t\t\tdata[i] = r*m0+g*m1+b*m2+a*m3+m4; // red\n\t\t\t\tdata[i+1] = r*m5+g*m6+b*m7+a*m8+m9; // green\n\t\t\t\tdata[i+2] = r*m10+g*m11+b*m12+a*m13+m14; // blue\n\t\t\t\tdata[i+3] = r*m15+g*m16+b*m17+a*m18+m19; // alpha\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\n\t\n\t\tcreatejs.ColorMatrixFilter = createjs.promote(ColorMatrixFilter, \"Filter\");\n\t}());\n\t\n\t//##############################################################################\n\t// Touch.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs||{};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\n\t// constructor:\n\t\t/**\n\t * Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and\n\t * modern Android browser) and the Pointer API (IE), including ms-prefixed events in IE10, and unprefixed in IE11.\n\t *\n\t * Ensure that you {{#crossLink \"Touch/disable\"}}{{/crossLink}} touch when cleaning up your application. You do not have\n\t * to check if touch is supported to enable it, as it will fail gracefully if it is not supported.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var stage = new createjs.Stage(\"canvasId\");\n\t *      createjs.Touch.enable(stage);\n\t *\n\t * <strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:\n\t *\n\t *      createjs.Touch.disable(stage);\n\t *\n\t * @class Touch\n\t * @static\n\t **/\n\t\tfunction Touch() {\n\t\t\tthrow \"Touch cannot be instantiated\";\n\t\t}\n\t\n\t\n\t// public static methods:\n\t\t/**\n\t\t * Returns `true` if touch is supported in the current browser.\n\t\t * @method isSupported\n\t\t * @return {Boolean} Indicates whether touch is supported in the current browser.\n\t\t * @static\n\t\t **/\n\t\tTouch.isSupported = function() {\n\t\t\treturn\t!!(('ontouchstart' in window) // iOS & Android\n\t\t\t\t|| (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) // IE10\n\t\t\t\t|| (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0)); // IE11+\n\t\t};\n\t\n\t\t/**\n\t\t * Enables touch interaction for the specified EaselJS {{#crossLink \"Stage\"}}{{/crossLink}}. Currently supports iOS\n\t\t * (and compatible browsers, such as modern Android browsers), and IE10/11. Supports both single touch and\n\t\t * multi-touch modes. Extends the EaselJS {{#crossLink \"MouseEvent\"}}{{/crossLink}} model, but without support for\n\t\t * double click or over/out events. See the MouseEvent {{#crossLink \"MouseEvent/pointerId:property\"}}{{/crossLink}}\n\t\t * for more information.\n\t\t * @method enable\n\t\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to enable touch on.\n\t\t * @param {Boolean} [singleTouch=false] If `true`, only a single touch will be active at a time.\n\t\t * @param {Boolean} [allowDefault=false] If `true`, then default gesture actions (ex. scrolling, zooming) will be\n\t\t * allowed when the user is interacting with the target canvas.\n\t\t * @return {Boolean} Returns `true` if touch was successfully enabled on the target stage.\n\t\t * @static\n\t\t **/\n\t\tTouch.enable = function(stage, singleTouch, allowDefault) {\n\t\t\tif (!stage || !stage.canvas || !Touch.isSupported()) { return false; }\n\t\t\tif (stage.__touch) { return true; }\n\t\n\t\t\t// inject required properties on stage:\n\t\t\tstage.__touch = {pointers:{}, multitouch:!singleTouch, preventDefault:!allowDefault, count:0};\n\t\n\t\t\t// note that in the future we may need to disable the standard mouse event model before adding\n\t\t\t// these to prevent duplicate calls. It doesn't seem to be an issue with iOS devices though.\n\t\t\tif ('ontouchstart' in window) { Touch._IOS_enable(stage); }\n\t\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_enable(stage); }\n\t\t\treturn true;\n\t\t};\n\t\n\t\t/**\n\t\t * Removes all listeners that were set up when calling `Touch.enable()` on a stage.\n\t\t * @method disable\n\t\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to disable touch on.\n\t\t * @static\n\t\t **/\n\t\tTouch.disable = function(stage) {\n\t\t\tif (!stage) { return; }\n\t\t\tif ('ontouchstart' in window) { Touch._IOS_disable(stage); }\n\t\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_disable(stage); }\n\t\t\t\n\t\t\tdelete stage.__touch;\n\t\t};\n\t\n\t\n\t// Private static methods:\n\t\t/**\n\t\t * @method _IOS_enable\n\t\t * @protected\n\t\t * @param {Stage} stage\n\t\t * @static\n\t\t **/\n\t\tTouch._IOS_enable = function(stage) {\n\t\t\tvar canvas = stage.canvas;\n\t\t\tvar f = stage.__touch.f = function(e) { Touch._IOS_handleEvent(stage,e); };\n\t\t\tcanvas.addEventListener(\"touchstart\", f, false);\n\t\t\tcanvas.addEventListener(\"touchmove\", f, false);\n\t\t\tcanvas.addEventListener(\"touchend\", f, false);\n\t\t\tcanvas.addEventListener(\"touchcancel\", f, false);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _IOS_disable\n\t\t * @protected\n\t\t * @param {Stage} stage\n\t\t * @static\n\t\t **/\n\t\tTouch._IOS_disable = function(stage) {\n\t\t\tvar canvas = stage.canvas;\n\t\t\tif (!canvas) { return; }\n\t\t\tvar f = stage.__touch.f;\n\t\t\tcanvas.removeEventListener(\"touchstart\", f, false);\n\t\t\tcanvas.removeEventListener(\"touchmove\", f, false);\n\t\t\tcanvas.removeEventListener(\"touchend\", f, false);\n\t\t\tcanvas.removeEventListener(\"touchcancel\", f, false);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _IOS_handleEvent\n\t\t * @param {Stage} stage\n\t\t * @param {Object} e The event to handle\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tTouch._IOS_handleEvent = function(stage, e) {\n\t\t\tif (!stage) { return; }\n\t\t\tif (stage.__touch.preventDefault) { e.preventDefault&&e.preventDefault(); }\n\t\t\tvar touches = e.changedTouches;\n\t\t\tvar type = e.type;\n\t\t\tfor (var i= 0,l=touches.length; i<l; i++) {\n\t\t\t\tvar touch = touches[i];\n\t\t\t\tvar id = touch.identifier;\n\t\t\t\tif (touch.target != stage.canvas) { continue; }\n\t\n\t\t\t\tif (type == \"touchstart\") {\n\t\t\t\t\tthis._handleStart(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t\t} else if (type == \"touchmove\") {\n\t\t\t\t\tthis._handleMove(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t\t} else if (type == \"touchend\" || type == \"touchcancel\") {\n\t\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _IE_enable\n\t\t * @protected\n\t\t * @param {Stage} stage\n\t\t * @static\n\t\t **/\n\t\tTouch._IE_enable = function(stage) {\n\t\t\tvar canvas = stage.canvas;\n\t\t\tvar f = stage.__touch.f = function(e) { Touch._IE_handleEvent(stage,e); };\n\t\n\t\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\t\tcanvas.addEventListener(\"MSPointerDown\", f, false);\n\t\t\t\twindow.addEventListener(\"MSPointerMove\", f, false);\n\t\t\t\twindow.addEventListener(\"MSPointerUp\", f, false);\n\t\t\t\twindow.addEventListener(\"MSPointerCancel\", f, false);\n\t\t\t\tif (stage.__touch.preventDefault) { canvas.style.msTouchAction = \"none\"; }\n\t\t\t} else {\n\t\t\t\tcanvas.addEventListener(\"pointerdown\", f, false);\n\t\t\t\twindow.addEventListener(\"pointermove\", f, false);\n\t\t\t\twindow.addEventListener(\"pointerup\", f, false);\n\t\t\t\twindow.addEventListener(\"pointercancel\", f, false);\n\t\t\t\tif (stage.__touch.preventDefault) { canvas.style.touchAction = \"none\"; }\n\t\n\t\t\t}\n\t\t\tstage.__touch.activeIDs = {};\n\t\t};\n\t\n\t\t/**\n\t\t * @method _IE_disable\n\t\t * @protected\n\t\t * @param {Stage} stage\n\t\t * @static\n\t\t **/\n\t\tTouch._IE_disable = function(stage) {\n\t\t\tvar f = stage.__touch.f;\n\t\n\t\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\t\twindow.removeEventListener(\"MSPointerMove\", f, false);\n\t\t\t\twindow.removeEventListener(\"MSPointerUp\", f, false);\n\t\t\t\twindow.removeEventListener(\"MSPointerCancel\", f, false);\n\t\t\t\tif (stage.canvas) {\n\t\t\t\t\tstage.canvas.removeEventListener(\"MSPointerDown\", f, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twindow.removeEventListener(\"pointermove\", f, false);\n\t\t\t\twindow.removeEventListener(\"pointerup\", f, false);\n\t\t\t\twindow.removeEventListener(\"pointercancel\", f, false);\n\t\t\t\tif (stage.canvas) {\n\t\t\t\t\tstage.canvas.removeEventListener(\"pointerdown\", f, false);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _IE_handleEvent\n\t\t * @param {Stage} stage\n\t\t * @param {Object} e The event to handle.\n\t\t * @protected\n\t\t * @static\n\t\t **/\n\t\tTouch._IE_handleEvent = function(stage, e) {\n\t\t\tif (!stage) { return; }\n\t\t\tif (stage.__touch.preventDefault) { e.preventDefault && e.preventDefault(); }\n\t\t\tvar type = e.type;\n\t\t\tvar id = e.pointerId;\n\t\t\tvar ids = stage.__touch.activeIDs;\n\t\n\t\t\tif (type == \"MSPointerDown\" || type == \"pointerdown\") {\n\t\t\t\tif (e.srcElement != stage.canvas) { return; }\n\t\t\t\tids[id] = true;\n\t\t\t\tthis._handleStart(stage, id, e, e.pageX, e.pageY);\n\t\t\t} else if (ids[id]) { // it's an id we're watching\n\t\t\t\tif (type == \"MSPointerMove\" || type == \"pointermove\") {\n\t\t\t\t\tthis._handleMove(stage, id, e, e.pageX, e.pageY);\n\t\t\t\t} else if (type == \"MSPointerUp\" || type == \"MSPointerCancel\"\n\t\t\t\t\t\t|| type == \"pointerup\" || type == \"pointercancel\") {\n\t\t\t\t\tdelete(ids[id]);\n\t\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleStart\n\t\t * @param {Stage} stage\n\t\t * @param {String|Number} id\n\t\t * @param {Object} e\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @protected\n\t\t **/\n\t\tTouch._handleStart = function(stage, id, e, x, y) {\n\t\t\tvar props = stage.__touch;\n\t\t\tif (!props.multitouch && props.count) { return; }\n\t\t\tvar ids = props.pointers;\n\t\t\tif (ids[id]) { return; }\n\t\t\tids[id] = true;\n\t\t\tprops.count++;\n\t\t\tstage._handlePointerDown(id, e, x, y);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleMove\n\t\t * @param {Stage} stage\n\t\t * @param {String|Number} id\n\t\t * @param {Object} e\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @protected\n\t\t **/\n\t\tTouch._handleMove = function(stage, id, e, x, y) {\n\t\t\tif (!stage.__touch.pointers[id]) { return; }\n\t\t\tstage._handlePointerMove(id, e, x, y);\n\t\t};\n\t\n\t\t/**\n\t\t * @method _handleEnd\n\t\t * @param {Stage} stage\n\t\t * @param {String|Number} id\n\t\t * @param {Object} e\n\t\t * @protected\n\t\t **/\n\t\tTouch._handleEnd = function(stage, id, e) {\n\t\t\t// TODO: cancel should be handled differently for proper UI (ex. an up would trigger a click, a cancel would more closely resemble an out).\n\t\t\tvar props = stage.__touch;\n\t\t\tvar ids = props.pointers;\n\t\t\tif (!ids[id]) { return; }\n\t\t\tprops.count--;\n\t\t\tstage._handlePointerUp(id, e, true);\n\t\t\tdelete(ids[id]);\n\t\t};\n\t\n\t\n\t\tcreatejs.Touch = Touch;\n\t}());\n\t\n\t//##############################################################################\n\t// version.js\n\t//##############################################################################\n\t\n\tthis.createjs = this.createjs || {};\n\t\n\t(function() {\n\t\t\"use strict\";\n\t\n\t\t/**\n\t\t * Static class holding library specific information such as the version and buildDate of\n\t\t * the library.\n\t\t * @class EaselJS\n\t\t **/\n\t\tvar s = createjs.EaselJS = createjs.EaselJS || {};\n\t\n\t\t/**\n\t\t * The version string for this release.\n\t\t * @property version\n\t\t * @type String\n\t\t * @static\n\t\t **/\n\t\ts.version = /*=version*/\"0.8.2\"; // injected by build process\n\t\n\t\t/**\n\t\t * The build date for this release in UTC format.\n\t\t * @property buildDate\n\t\t * @type String\n\t\t * @static\n\t\t **/\n\t\ts.buildDate = /*=date*/\"Thu, 26 Nov 2015 20:44:34 GMT\"; // injected by build process\n\t\n\t})();\n\t\n\t/*** EXPORTS FROM exports-loader ***/\n\tmodule.exports = window.createjs;\n\t}.call(window));\n\n/***/ }),\n/* 27 */,\n/* 28 */,\n/* 29 */,\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* styles */\n\t__webpack_require__(22)\n\t\n\tvar Component = __webpack_require__(1)(\n\t  /* script */\n\t  __webpack_require__(8),\n\t  /* template */\n\t  __webpack_require__(37),\n\t  /* scopeId */\n\t  null,\n\t  /* cssModules */\n\t  null\n\t)\n\t\n\tmodule.exports = Component.exports\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* styles */\n\t__webpack_require__(21)\n\t\n\tvar Component = __webpack_require__(1)(\n\t  /* script */\n\t  __webpack_require__(9),\n\t  /* template */\n\t  __webpack_require__(36),\n\t  /* scopeId */\n\t  null,\n\t  /* cssModules */\n\t  null\n\t)\n\t\n\tmodule.exports = Component.exports\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* styles */\n\t__webpack_require__(24)\n\t\n\tvar Component = __webpack_require__(1)(\n\t  /* script */\n\t  __webpack_require__(10),\n\t  /* template */\n\t  __webpack_require__(40),\n\t  /* scopeId */\n\t  null,\n\t  /* cssModules */\n\t  null\n\t)\n\t\n\tmodule.exports = Component.exports\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Component = __webpack_require__(1)(\n\t  /* script */\n\t  __webpack_require__(11),\n\t  /* template */\n\t  __webpack_require__(39),\n\t  /* scopeId */\n\t  null,\n\t  /* cssModules */\n\t  null\n\t)\n\t\n\tmodule.exports = Component.exports\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* styles */\n\t__webpack_require__(25)\n\t\n\tvar Component = __webpack_require__(1)(\n\t  /* script */\n\t  __webpack_require__(12),\n\t  /* template */\n\t  __webpack_require__(41),\n\t  /* scopeId */\n\t  null,\n\t  /* cssModules */\n\t  null\n\t)\n\t\n\tmodule.exports = Component.exports\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\n\t/* styles */\n\t__webpack_require__(23)\n\t\n\tvar Component = __webpack_require__(1)(\n\t  /* script */\n\t  __webpack_require__(13),\n\t  /* template */\n\t  __webpack_require__(38),\n\t  /* scopeId */\n\t  null,\n\t  /* cssModules */\n\t  null\n\t)\n\t\n\tmodule.exports = Component.exports\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    staticClass: \"container\"\n\t  }, [_c('button-store'), _vm._v(\" \"), _c('div', {\n\t    staticClass: \"flex-box\"\n\t  }, [_c('super-button'), _vm._v(\" \"), _c('super-canvas')], 1)], 1)\n\t},staticRenderFns: []}\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    directives: [{\n\t      name: \"show\",\n\t      rawName: \"v-show\",\n\t      value: (_vm.loading),\n\t      expression: \"loading\"\n\t    }],\n\t    staticClass: \"v-spinner\"\n\t  }, [_c('div', {\n\t    staticClass: \"v-pulse v-pulse1\",\n\t    style: ([_vm.spinnerStyle, _vm.spinnerDelay1])\n\t  }), _c('div', {\n\t    staticClass: \"v-pulse v-pulse2\",\n\t    style: ([_vm.spinnerStyle, _vm.spinnerDelay2])\n\t  }), _c('div', {\n\t    staticClass: \"v-pulse v-pulse3\",\n\t    style: ([_vm.spinnerStyle, _vm.spinnerDelay3])\n\t  })])\n\t},staticRenderFns: []}\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    staticClass: \"canvaswrap\",\n\t    on: {\n\t      \"mousedown\": _vm.mousedown,\n\t      \"mousemove\": _vm.mousemove,\n\t      \"mouseup\": _vm.mouseup\n\t    }\n\t  }, [_c('canvas', {\n\t    attrs: {\n\t      \"width\": \"1050\",\n\t      \"height\": \"1000\",\n\t      \"id\": \"canvas\"\n\t    }\n\t  }), _vm._v(\" \"), _vm._l((_vm.models), function(model) {\n\t    return _c('canvas-model', {\n\t      attrs: {\n\t        \"iscurrent\": model.iscurrent,\n\t        \"x\": model.x,\n\t        \"y\": model.y,\n\t        \"uniqueId\": model.uniqueId,\n\t        \"ctrlline\": model.ctrlline\n\t      }\n\t    })\n\t  })], 2)\n\t},staticRenderFns: []}\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c(\"div\")\n\t},staticRenderFns: []}\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', [_c('button', {\n\t    staticClass: \"btn btn-outline-primary crud\",\n\t    attrs: {\n\t      \"type\": \"button\",\n\t      \"id\": \"fetch\",\n\t      \"blur\": !_vm.fetchable,\n\t      \"disabled\": !_vm.fetchable || !_vm.savable\n\t    },\n\t    on: {\n\t      \"click\": _vm.fetch\n\t    }\n\t  }, [_vm._v(\"\\n    Fetch\\n  \"), _c('pulse-loader', {\n\t    attrs: {\n\t      \"loading\": !_vm.fetchable,\n\t      \"color\": \"#0275d8\",\n\t      \"size\": \"5px\"\n\t    }\n\t  })], 1), _vm._v(\" \"), _c('button', {\n\t    staticClass: \"btn btn-outline-warning crud\",\n\t    attrs: {\n\t      \"type\": \"button\",\n\t      \"id\": \"save\",\n\t      \"blur\": !_vm.savable,\n\t      \"disabled\": !_vm.fetchable || !_vm.savable\n\t    },\n\t    on: {\n\t      \"click\": _vm.save\n\t    }\n\t  }, [_vm._v(\"\\n    Save\\n  \"), _c('pulse-loader', {\n\t    attrs: {\n\t      \"loading\": !_vm.savable,\n\t      \"color\": \"#f0ad4e\",\n\t      \"size\": \"5px\"\n\t    }\n\t  })], 1)])\n\t},staticRenderFns: []}\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    staticClass: \"draw\"\n\t  }, _vm._l((_vm.buttons), function(button) {\n\t    return _c('button', {\n\t      class: button.class,\n\t      attrs: {\n\t        \"type\": \"button\",\n\t        \"id\": button.id\n\t      },\n\t      on: {\n\t        \"click\": function($event) {\n\t          _vm.changeStatus(button.id)\n\t        }\n\t      }\n\t    }, [_vm._v(\"\\n    \" + _vm._s(button.text) + \"\\n  \")])\n\t  }))\n\t},staticRenderFns: []}\n\n/***/ })\n]);\n\n\n// WEBPACK FOOTER //\n// static/js/app.aaa73e5746308d6b7182.js","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '.container',\n  template: '<App/>',\n  components: { App }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","import mitt from \"mitt\"\nexport default new mitt()\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/emitter.js","<template>\n<div class=\"v-spinner\" v-show=\"loading\">\n    <div class=\"v-pulse v-pulse1\" v-bind:style=\"[spinnerStyle,spinnerDelay1]\">\n    </div><div class=\"v-pulse v-pulse2\" v-bind:style=\"[spinnerStyle,spinnerDelay2]\">\n    </div><div class=\"v-pulse v-pulse3\" v-bind:style=\"[spinnerStyle,spinnerDelay3]\">\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  \n  name: 'PulseLoader',\n\n  props: {\n    loading: {\n      type: Boolean,\n      default: true\n    },\n    color: { \n      type: String,\n      default: '#5dc596'\n    },\n    size: {\n      type: String,\n      default: '15px'\n    },\n    margin: {\n      type: String,\n      default: '2px'\n    },\n    radius: {\n      type: String,\n      default: '100%'\n    }\n  },\n  data () {\n    return {\n      spinnerStyle: {\n      \tbackgroundColor: this.color,\n      \twidth: this.size,\n        height: this.size,\n      \tmargin: this.margin,\n      \tborderRadius: this.radius,\n        display: 'inline-block',\n        animationName: 'v-pulseStretchDelay',\n        animationDuration: '0.75s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.2,.68,.18,1.08)',\n        animationFillMode: 'both'\n      },\n      spinnerDelay1: {\n        animationDelay: '0.12s'\n      },\n      spinnerDelay2: {\n        animationDelay: '0.24s'\n      },\n      spinnerDelay3: {\n        animationDelay: '0.36s'\n      }\n    }\n  }\n\n}\n</script>\n\n<style>\n/*.v-spinner\n{\n    margin: 100px auto;\n    text-align: center;\n}\n*/\n\n@-webkit-keyframes v-pulseStretchDelay\n{\n    0%,\n    80%\n    {\n        -webkit-transform: scale(1);\n                transform: scale(1);\n        -webkit-opacity: 1;             \n                opacity: 1;\n    }\n    45%\n    {\n        -webkit-transform: scale(0.1);\n                transform: scale(0.1);\n        -webkit-opacity: 0.7;             \n                opacity: 0.7;\n    }\n}\n\n@keyframes v-pulseStretchDelay\n{\n    0%,\n    80%\n    {\n        -webkit-transform: scale(1);\n                transform: scale(1);\n        -webkit-opacity: 1;             \n                opacity: 1;\n    }\n    45%\n    {\n        -webkit-transform: scale(0.1);\n                transform: scale(0.1);\n        -webkit-opacity: 0.7;             \n                opacity: 0.7;\n    }\n}\n</style>\n\n\n// WEBPACK FOOTER //\n// PulseLoader.vue?520d2886","<template>\n  <div class=\"container\">\n    <button-store></button-store>\n    <div class=\"flex-box\">\n      <super-button></super-button>\n      <super-canvas></super-canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ButtonStore from './components/ButtonStore'\nimport SuperButton from './components/SuperButton'\nimport SuperCanvas from './components/SuperCanvas'\nimport store from './store'\n\nexport default {\n  name: 'app',\n  store,\n  components: {\n    ButtonStore,\n    SuperButton,\n    SuperCanvas,\n  }\n}\n</script>\n\n<style>\n.flex-box{\n\tdisplay: flex;\n}\n\n.container {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 20px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// App.vue?0bc0b7c8","<template>\n  <div>\n    <button type=\"button\"\n            class=\"btn btn-outline-primary crud\"\n            id=\"fetch\"\n            @click=\"fetch\"\n            :blur=\"!fetchable\"\n            :disabled=\"!fetchable|| !savable\">\n      Fetch\n    <pulse-loader :loading=\"!fetchable\" color=\"#0275d8\" size=\"5px\"></pulse-loader>\n    </button>\n    <button type=\"button\"\n            class=\"btn btn-outline-warning crud\"\n            id=\"save\"\n            @click=\"save\"\n            :blur=\"!savable\"\n            :disabled=\"!fetchable|| !savable\">\n      Save\n    <pulse-loader :loading=\"!savable\" color=\"#f0ad4e\" size=\"5px\"></pulse-loader>\n    </button>\n  </div>\n</template>\n\n<script>\nimport PulseLoader from 'vue-spinner/src/PulseLoader.vue'\nimport emitter from '../mixins/emitter.js'\n\nexport default {\n  name: 'ButtonStore',\n  data () {\n    return {\n      fetchable: true,\n      savable: true,\n    }\n  },\n  components:{\n    PulseLoader\n  },\n  methods:{\n    fetch(){\n      this.fetchable = false\n\n      setTimeout(()=>{\n        emitter.emit(\"fromStorage\")\n        this.savable = true\n        this.fetchable = true\n      }, 500)\n    },\n    save(){\n      this.savable = false\n\n      setTimeout(()=>{\n        emitter.emit(\"toStorage\")\n        this.savable = true\n        this.fetchable = true\n      }, 500)\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\nbutton{\n  cursor: pointer;\n}\n\n#save{\n\tfloat: right\n}\n\n#save:focus{\n\toutline:0 !important;\n}\n\n#fetch:focus{\n\toutline:0 !important;\n}\n\n.v-spinner{\n  display: inline-block;\n  margin-left: 5px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ButtonStore.vue?699e700c","<template></template>\n\n<script>\nimport _ from 'underscore'\n\nexport default {\n  name:'canvas-model',\n\n  props:['iscurrent', 'x', 'y', 'uniqueId', 'ctrlline'],\n\n  watch:{\n    iscurrent(){\n      this.$parent.drawCurrent(this.iscurrent, this.uniqueId)\n    },\n\n    ctrlline(newctrl, oldctrl){\n\n      if (!_.isEmpty(oldctrl)){\n\n        this.$parent.changeSquare(this)\n        this.$parent.changeLine(this)\n        this.$parent.changeCtrlline(this)\n      } else {\n        this.$parent.createCtrlline(this)\n      }\n\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// CanvasModel.vue?09dba483","<template>\n  <div class=\"draw\">\n    <button v-for=\"button in buttons\"\n            type=\"button\"\n            :class=\"button.class\"\n            :id=\"button.id\"\n            @click=\"changeStatus(button.id)\">\n      {{ button.text }}\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'super-button',\n  data(){\n    return {\n      buttons: [\n        {\n          text:'画线',\n          id:'line',\n          class:'btn btn-outline-success',\n        },\n        {\n          text:'选点',\n          id:'ctrlline',\n          class:'btn btn-outline-success',\n        },\n        {\n          text:'移动',\n          id:'move',\n          class:'btn btn-outline-success',\n        },\n        {\n          text:'删除',\n          id:'remove',\n          class:'btn btn-outline-danger',\n        }\n      ]\n    }\n  },\n  methods: {\n    changeStatus(status){\n      this.$store.dispatch('changeStatus', status)\n    },\n  }\n}\n</script>\n\n<style>\n.draw{\n\tmargin-top: 30px;\n\tdisplay: inline-block;\n}\n.draw button{\n\tdisplay: block;\n\tmargin-bottom: 20px;\n\tfloat: left;\n\tclear: both;\n}\n\n.draw #remove{\n\tmargin-bottom: 300px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// SuperButton.vue?0ce7adad","<template>\n  <div class=\"canvaswrap\"\n       @mousedown=\"mousedown\"\n       @mousemove=\"mousemove\"\n       @mouseup=\"mouseup\">\n    <canvas width=\"1050\"\n            height=\"1000\"\n            id=\"canvas\">\n    </canvas>\n    <canvas-model v-for=\"model in models\"\n                  :iscurrent=\"model.iscurrent\"\n                  :x=\"model.x\"\n                  :y=\"model.y\"\n                  :uniqueId=\"model.uniqueId\"\n                  :ctrlline=\"model.ctrlline\">\n    </canvas-model>\n  </div>\n</template>\n\n<script>\nimport $ from 'jquery'\nimport _ from 'underscore'\nimport createjs from 'EaselJS'\nimport CanvasModel from './CanvasModel'\nimport operateModels from '../mixins/operateModels.js'\nimport draw from '../mixins/draw.js'\nimport emitter from '../mixins/emitter.js'\n\nexport default {\n  name: 'super-canvas',\n\n  mixins:[operateModels, draw],\n\n  components:{\n    CanvasModel\n  },\n\n  created(){\n    emitter.on(\"toStorage\",()=>{\n      let models = this.models\n      let containerp = this.containerp\n\n      localStorage.setItem(\"vue_sketch_data\", JSON.stringify({models, containerp}))\n    })\n\n    emitter.on(\"fromStorage\",()=>{\n      var data = JSON.parse(localStorage.getItem(\"vue_sketch_data\"))\n        , x = data.containerp.x\n        , y = data.containerp.y\n\n      this.clearModels()\n      this.changeContainer({x, y})\n      this.fetchModels(data.models)\n    })\n  },\n\n  mounted(){\n    this.stage = new createjs.Stage(\"canvas\")\n    this.container = new createjs.Container()\n    this.stage.enableMouseOver()\n    this.stage.addChild(this.container)\n    this.stage.update()\n  },\n\n  data () {\n    return {\n      models:[],\n      modelslength:0,\n      removedtarget:null,\n      ismousedown: false,\n      containerp:{\n        x:0,\n        y:0\n      }\n    }\n  },\n\n  watch: {\n    models: {\n      handler: function(models){\n        if (models.length > this.modelslength){\n\n          var model = models[models.length - 1]\n          this.drawCircle(model, model)\n\n          if (model.ctrlline){\n            this.createCtrlline(model)\n          }\n\n          if (models[models.length - 2] !== void 0){\n            var lastmodel = models[models.length - 2]\n            this.drawLine(model, lastmodel)\n          }\n        } else if (models.length === 0){\n          this.container.removeAllChildren()\n          this.stage.update()\n        } else if (models.length < this.modelslength){\n          this.simpleremove(this.removedtarget)\n        }\n\n        this.modelslength = models.length\n      },\n      deep: true\n    },\n    containerp: {\n      handler: function({x, y}){\n        this.container.set({x, y})\n        this.stage.update()\n      },\n      deep: true\n    },\n    removedtarget: function(val){\n      var model = val.model\n        , index = _.indexOf(this.models, model)\n\n      if (index !==0 && index !== this.models.length-1){\n        this.drawLine(this.models[index-1], this.models[index+1])\n      }\n\n      if (model.iscurrent&& this.models.length>1){\n        if (index === this.models.length-1){\n          var currentmodel = this.models[this.models.length-2]\n        } else {\n          var currentmodel = this.models[this.models.length-1]\n        }\n\n        var ctrlline = _.clone(currentmodel.ctrlline)\n\n        if (ctrlline !== void 0 && !model.ctrllineRemoved) {\n          ctrlline.hide = false\n          currentmodel.ctrlline = ctrlline\n        }\n        currentmodel.iscurrent = true\n      }\n\n      this.models = _.without(this.models, model)\n    }\n  },\n\n  methods:{\n    mousedown(e){\n      if (this.$store.state.preventEvent){\n        e.preventDefault()\n        this.$store.dispatch(\"changePreventEvent\", false)\n        return\n      }\n\n      if (this.$store.state.status !== 'line'){\n        return\n      }\n\n      var x = e.pageX - $(e.target).offset().left - this.containerp.x\n        , y = e.pageY - $(e.target).offset().top - this.containerp.y\n        , model = {\n          iscurrent:true,\n          ctrlline: void 0,\n          x,\n          y\n        }\n\n      this.addPoint({\n        model,\n        fetch: false,\n        models: this.models,\n      })\n\n      this.ismousedown = true\n    },\n    mouseup(e){\n      this.$store.dispatch('changeDragging', false)\n      this.ismousedown = false\n    },\n    mousemove(e){\n\n      var status = this.$store.state.status\n\n      if (this.ismousedown && (status === 'line'|| status === 'ctrlline')){\n        var x = e.pageX - $(e.target).offset().left - this.containerp.x\n          , y = e.pageY - $(e.target).offset().top - this.containerp.y\n\n        this.mirrorCtrlline({x,y})\n      }\n    }\n  },\n}\n</script>\n\n<style>\n.canvaswrap{\n\toverflow: hidden;\n\tmargin-left: 15px;\n\tmargin-top: 30px;\n\tdisplay: inline-block;\n\tflex-grow: 1;\n\tborder:2px solid #eee;\n\tposition: relative;\n}\n\ncanvas{\n\tposition: absolute;\n\ttop:0;\n\tcursor: crosshair;\n}\n\n#canvas.unable{\n\tcursor:not-allowed;\n}\n\n#canvas.remove{\n\tcursor: url(\"../assets/remove.png\"), auto;\n}\n\n#canvas.ctrlline{\n\tcursor: url(\"../assets/ctrlline.png\"), auto;\n}\n\n#canvas.move{\n\tcursor: move\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// SuperCanvas.vue?ea027f0c","import $ from 'jquery'\n\nexport const movable = function(target, supercanvas) {\n  target.on(\"pressmove\", function(evt) {\n    if (supercanvas.$store.state.status !== 'move'){\n      return\n    }\n\n    var x = evt.stageX - target.model.x\n      , y = evt.stageY - target.model.y\n\n    supercanvas.changeContainer({x, y})\n  })\n}\n\nexport const cursurable = function(target, supercanvas) {\n  target.on(\"mouseover\", function() {\n    if (supercanvas.$store.state.status === 'move'){\n      $(\"#canvas\").addClass(\"move\")\n    }\n\n    if (supercanvas.$store.state.status === 'remove'){\n      $(\"#canvas\").addClass(\"remove\")\n    }\n\n    if (supercanvas.$store.state.status === 'line' && !target.model.iscurrent) {\n      $(\"#canvas\").addClass(\"unable\")\n    }\n\n    if (supercanvas.$store.state.status === 'ctrlline' && !target.model.iscurrent) {\n      $(\"#canvas\").addClass(\"ctrlline\")\n    }\n  })\n\n  target.on(\"mouseout\", function(){\n    $(\"#canvas\").removeClass(\"remove unable ctrlline move\")\n  })\n}\n\nexport const removable = function(target, supercanvas) {\n  target.on(\"mousedown\", function(){\n    if (supercanvas.$store.state.status === 'remove'){\n      supercanvas.removeModel(target)\n    }\n  })\n}\n\nexport const ctrlRemovable = function(target, supercanvas) {\n  target.on(\"mousedown\", function(){\n    if (supercanvas.$store.state.status === 'remove'){\n      supercanvas.removeCtrl(target.model)\n    }\n  })\n\n  target.on(\"mouseover\", function() {\n    if (supercanvas.$store.state.status === 'remove'){\n      $(\"#canvas\").addClass(\"remove\")\n    }\n  })\n\n  target.on(\"mouseout\", function(){\n    $(\"#canvas\").removeClass(\"remove\")\n  })\n}\n\nexport const ctrlable = function(target, supercanvas) {\n  target.on(\"click\", function(){\n    supercanvas.$store.dispatch('changePreventEvent', true)\n\n    if (supercanvas.$store.state.status === 'ctrlline'){\n      supercanvas.changeCurrent(target)\n    }\n  })\n\n  target.on(\"pressmove\", function(e) {\n    supercanvas.$store.dispatch('changePreventEvent', true)\n\n    if (target.model.iscurrent && supercanvas.$store.state.status === 'ctrlline') {\n      supercanvas.$store.dispatch('changeMirror', true)\n\n      var x = e.stageX - supercanvas.containerp.x\n        , y = e.stageY - supercanvas.containerp.y\n\n      supercanvas.mirrorCtrlline({x,y})\n    }\n  })\n\n  target.on(\"pressup\", function() {\n    supercanvas.$store.dispatch('changeMirror', false)\n    supercanvas.$store.dispatch('changeDragging', false)\n  })\n\n}\n\nexport const draggable = (function(){\n  var innerfunc = function({target, supercanvas, e}){\n    supercanvas.$store.dispatch(\"changePreventEvent\", true)\n\n    if (target.model.iscurrent &&\n      supercanvas.$store.state.status === 'line' &&\n      !supercanvas.$store.state.isMirror) {\n      var x = e.stageX - supercanvas.container.x\n        , y = e.stageY - supercanvas.container.y\n\n      supercanvas.basicCtrlline({\n        model: target.model,\n        ctrlline: {\n          x,\n          y,\n          isMirror: false,\n          hide: false,\n        }\n      })\n    }\n  }\n\n  return function(target, supercanvas){\n    target.on(\"mousedown\", function(e) {\n      innerfunc({target, supercanvas, e})\n    })\n\n    target.on(\"pressmove\", function(e) {\n      innerfunc({target, supercanvas, e})\n    })\n\n    target.on(\"pressup\", function(){\n      supercanvas.$store.dispatch(\"changePreventEvent\", false)\n      supercanvas.$store.dispatch(\"changeDragging\", false)\n    })\n  }\n})()\n\n\n\n// WEBPACK FOOTER //\n// ./src/decorators/decorator.js","import _ from 'underscore'\nimport {\n  movable,\n  cursurable,\n  removable,\n  ctrlable,\n  draggable,\n  ctrlRemovable,\n} from '../decorators/decorator.js'\n\nfunction drawcurve(g, x2, y2, lastmodel, model) {\n\n  if (lastmodel.ctrlline && (!model.ctrlline || (model.ctrlline && !model.ctrlline.isMirror))) {\n    g.quadraticCurveTo(lastmodel.ctrlline.x, lastmodel.ctrlline.y, x2, y2)\n  } else if (!lastmodel.ctrlline && model.ctrlline && model.ctrlline.isMirror) {\n    g.quadraticCurveTo(model.ctrlline.x, model.ctrlline.y, x2, y2)\n  } else if (lastmodel.ctrlline && model.ctrlline && model.ctrlline.isMirror) {\n    g.bezierCurveTo(lastmodel.ctrlline.x, lastmodel.ctrlline.y, model.ctrlline.x, model.ctrlline.y, x2, y2);\n  } else {\n    g.lineTo(x2, y2)\n  }\n}\n\nexport default {\n  methods:{\n    drawCircle({x, y, uniqueId, iscurrent}, model){\n      var circle = new createjs.Shape()\n\n      circle.graphics.setStrokeStyle(1).beginStroke(\"#000000\")\n\n      if (iscurrent) {\n        circle.graphics.beginFill(\"#000\")\n      } else {\n        circle.graphics.beginFill(\"#fff\")\n      }\n\n      circle.graphics.drawCircle(0, 0, 3)\n\n      circle.x = x\n      circle.y = y\n      circle.uniqueId = uniqueId\n      circle.model = model\n      circle.name = \"circle\"\n\n      movable(circle, this)\n      cursurable(circle, this)\n      removable(circle, this)\n      ctrlable(circle, this)\n      draggable(circle, this)\n\n      this.container.addChild(circle)\n\n      this.stage.update()\n    },\n    drawLine(model, lastmodel){\n      var line = new createjs.Shape()\n\n      line.graphics.setStrokeStyle(1)\n      line.graphics.beginStroke(\"#000\")\n      line.graphics.moveTo(model.x, model.y)\n      drawcurve(line.graphics, lastmodel.x, lastmodel.y, lastmodel, model)\n      line.graphics.lineTo(lastmodel.x, lastmodel.y)\n      line.uniqueIds = [lastmodel.uniqueId, model.uniqueId]\n      line.models = [lastmodel, model]\n      line.time = 0\n      line.name = \"line\"\n\n      this.container.addChildAt(line, 0)\n      this.stage.update()\n\n      return line\n    },\n    changeLine(model){\n\n      var lines = _.filter(this.container.children, function(inner){\n        if (inner.name === \"line\"){\n          if (_.contains(inner.uniqueIds, model.uniqueId)){\n            return true\n          }\n        }\n      })\n\n      _.each(lines, line=>{\n        var x1 = line.models[0].x\n          , y1 = line.models[0].y\n          , x2 = line.models[1].x\n          , y2 = line.models[1].y\n\n        if (line.time === 0) {\n          line.graphics.clear()\n          line.time++\n        }\n\n        line.time--\n        line.graphics.setStrokeStyle(1)\n        line.graphics.beginStroke(\"#000\")\n        line.graphics.moveTo(x1, y1)\n\n        if (model.uniqueId === line.models[0].uniqueId) {\n          console.log(model.uniqueId)\n          drawcurve(line.graphics, x2, y2, model, line.models[1])\n        } else {\n          drawcurve(line.graphics, x2, y2, line.models[0], model)\n        }\n\n        this.stage.update()\n      })\n    },\n    drawCurrent(iscurrent, uniqueId){\n      var target = _.findWhere(this.container.children, {uniqueId,name:\"circle\"})\n        , color = iscurrent ? \"#000\" : \"#fff\"\n\n      target.graphics.beginFill(color).drawCircle(0, 0, 3)\n      this.stage.update()\n    },\n    simpleremove(target){\n      var targets = _.filter(this.container.children, function(inner){\n        var isLine = _.contains(inner.uniqueIds, target.uniqueId)\n          , isCtrl = (inner.uniqueId === target.uniqueId)&& (inner.name === \"square\"|| inner.name === \"ctrlline\")\n\n        if (isLine|| isCtrl){\n          return true\n        }\n      })\n\n      this.container.removeChild(target)\n\n      _.each(targets, inner=>{\n        this.container.removeChild(inner)\n      })\n\n      this.stage.update()\n    },\n    drawSquare(x, y, uniqueId, model, isMirror){\n      var square = new createjs.Shape()\n\n      square.graphics.setStrokeStyle(1).beginStroke(\"#f46c51\").beginFill(\"#f46c51\").drawRect(-2, -2, 4, 4)\n\n      if (!isMirror) {\n        square.x = x\n        square.y = y\n      } else {\n        square.x = 2 * model.x - x\n        square.y = 2 * model.y - y\n      }\n      square.uniqueId = uniqueId\n      square.model = model\n      square.isMirror = isMirror\n      square.name = \"square\"\n      ctrlRemovable(square, this)\n      if (model.ctrlline.hide){\n        square.graphics.clear()\n      }\n\n      this.container.addChild(square)\n\n      this.stage.update()\n\n      return square\n    },\n    changeSquare(model){\n      var squares = _.where(this.container.children,{\n        uniqueId:model.uniqueId,\n        name:\"square\"\n      })\n\n      _.each(squares, square=>{\n\n        if (_.isEmpty(model.ctrlline)){\n          this.container.removeChild(square)\n        } else if (model.ctrlline.hide === false){\n\n          square.graphics.setStrokeStyle(1).beginStroke(\"#f46c51\").beginFill(\"#f46c51\").drawRect(-2, -2, 4, 4)\n\n          if (!square.isMirror){\n            square.x = model.ctrlline.x\n            square.y = model.ctrlline.y\n          } else {\n            square.x = 2 * model.x - model.ctrlline.x\n            square.y = 2 * model.y - model.ctrlline.y\n          }\n        } else {\n          square.graphics.clear()\n        }\n\n        this.stage.update()\n\n      })\n    },\n    drawCtrlline(x1, y1, x2, y2, uniqueId, model, isMirror){\n      var line = new createjs.Shape()\n\n      line.graphics.setStrokeStyle(1)\n      line.graphics.beginStroke(\"#f46c51\")\n\n      if (!isMirror) {\n        line.graphics.moveTo(x1, y1)\n        line.graphics.lineTo(x2, y2)\n      } else {\n        line.graphics.moveTo(x1, y1)\n        line.graphics.lineTo(2 * x1 - x2, 2 * y1 - y2)\n      }\n\n      line.uniqueId = uniqueId\n      line.model = model\n      line.time = 0\n      line.isMirror = isMirror\n      line.name = \"ctrlline\"\n\n      if (model.ctrlline.hide){\n        line.graphics.clear()\n      }\n\n      this.container.addChildAt(line, 0)\n\n      this.stage.update()\n\n      return line\n    },\n    changeCtrlline(model){\n      var ctrllines = _.where(this.container.children,{\n        uniqueId:model.uniqueId,\n        name:\"ctrlline\"\n      })\n\n      _.each(ctrllines, ctrlline=>{\n\n        if (_.isEmpty(model.ctrlline)) {\n          this.container.removeChild(ctrlline)\n        } else if (model.ctrlline.hide === false){\n          if (ctrlline.time == 0){\n            ctrlline.graphics.clear()\n            ctrlline.time++\n          }\n\n          ctrlline.time--\n          ctrlline.graphics.setStrokeStyle(1)\n          ctrlline.graphics.beginStroke(\"#f46c51\")\n\n          if (!ctrlline.isMirror) {\n            ctrlline.graphics.moveTo(model.x, model.y)\n            ctrlline.graphics.lineTo(model.ctrlline.x, model.ctrlline.y)\n          } else {\n            ctrlline.graphics.moveTo(model.x, model.y)\n            ctrlline.graphics.lineTo(2 * model.x - model.ctrlline.x, 2 * model.y - model.ctrlline.y)\n          }\n        } else {\n          ctrlline.graphics.clear()\n        }\n\n        this.stage.update()\n\n      })\n    },\n    createCtrlline(model){\n      var x = model.ctrlline.x\n        , y = model.ctrlline.y\n        , x2 = model.x\n        , y2 = model.y\n        , uniqueId = model.uniqueId\n        , isMirror = model.ctrlline.isMirror\n\n      this.drawSquare(x, y, uniqueId, model, false)\n      this.drawCtrlline(x2, y2, x, y, uniqueId, model, false)\n\n      if (isMirror){\n\n        this.drawSquare(x, y, uniqueId, model, true)\n        this.drawCtrlline(x2, y2, x, y, uniqueId, model, true)\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/draw.js","import _ from 'underscore'\nimport async from 'async'\n\nexport default {\n  methods:{\n    fetchModels(models){\n      if (models.length === 0){\n        return\n      }\n\n      var addPoint = setInterval(()=>{\n        var model = models.shift()\n\n        this.addPoint({\n          model,\n          fetch: true,\n          models: this.models\n        })\n\n        if (models.length === 0){\n          clearInterval(addPoint)\n        }\n      },0.001)\n    },\n    addPoint({model, fetch, models}){\n      delete model.uniqueId\n\n      if (!fetch&& models.length > 0){\n        var currentmodel = _.findWhere(models, {'iscurrent': true})\n\n        currentmodel.iscurrent = false\n      }\n\n      model.uniqueId = _.uniqueId()\n      models.push(model)\n    },\n\n    changeContainer({x, y}){\n      this.containerp.x = x\n      this.containerp.y = y\n    },\n\n    removeModel(target){\n      this.removedtarget = target\n    },\n\n    changeCurrent(target){\n      var currentmodel = _.findWhere(this.models, {'iscurrent': true})\n\n      currentmodel.iscurrent = false\n      target.model.iscurrent = true\n    },\n\n    mirrorCtrlline({x, y}){\n      var model = _.findWhere(this.models, {\n        iscurrent: true\n      })\n        , ctrlline = {\n          x,\n          y,\n          isMirror: true,\n          hide: false,\n        }\n\n      model.ctrlline = ctrlline\n      this.hideCtrl()\n    },\n\n    basicCtrlline({model, ctrlline}){\n      model.ctrlline = ctrlline\n      this.hideCtrl()\n    },\n\n    removeCtrl(model){\n      var model = _.findWhere(this.models, {uniqueId: model.uniqueId})\n      model.ctrlline = void 0\n    },\n\n    hideCtrl(){\n      var model = _.filter(this.models, function(inner){\n        if (inner.ctrlline){\n          return inner.iscurrent === false && inner.ctrlline.hide === false\n        } else {\n          return false\n        }\n      })[0]\n\n      if (model !== void 0) {\n        var ctrlline = _.clone(model.ctrlline)\n\n        ctrlline.hide = true\n\n        model.ctrlline = ctrlline\n      }\n    },\n\n    clearModels(){\n      this.models = []\n    },\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixins/operateModels.js","import Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\n\nexport const state = {\n  status: null,\n  isDragging: null,\n  isMirror:false,\n  preventEvent: null,\n}\n\nexport const mutations = {\n  CHANGE_STATUS(state, status){\n    state.status = status\n  },\n  CHANG_DRAGGING(state, isDragging){\n    state.isDragging = isDragging\n  },\n  CHANGE_PREVENT_EVENT(state, preventEvent){\n    state.preventEvent = preventEvent\n  },\n  CHANGE_MIRROR(state, isMirror){\n    state.isMirror = isMirror\n  }\n}\n\nexport const actions = {\n  changeStatus({ state, commit, dispatch }, status){\n    commit('CHANGE_STATUS', status)\n    return status\n  },\n  changeDragging({ state, commit, dispatch }, isDragging){\n    commit('CHANG_DRAGGING', isDragging)\n    return isDragging\n  },\n  changePreventEvent({ state, commit, dispatch }, preventEvent){\n    commit('CHANGE_PREVENT_EVENT', preventEvent)\n    return preventEvent\n  },\n  changeMirror({ state, commit, dispatch }, isMirror){\n    commit('CHANGE_MIRROR', isMirror)\n    return isMirror\n  }\n}\n\nexport default new Vuex.Store({\n  state,\n  mutations,\n  actions,\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/store.js","/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/*!\n* EaselJS\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n//##############################################################################\n// extend.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Sets up the prototype chain and constructor property for a new class.\n *\n * This should be called right after creating the class constructor.\n *\n * \tfunction MySubClass() {}\n * \tcreatejs.extend(MySubClass, MySuperClass);\n * \tMySubClass.prototype.doSomething = function() { }\n *\n * \tvar foo = new MySubClass();\n * \tconsole.log(foo instanceof MySuperClass); // true\n * \tconsole.log(foo.prototype.constructor === MySubClass); // true\n *\n * @method extend\n * @param {Function} subclass The subclass.\n * @param {Function} superclass The superclass to extend.\n * @return {Function} Returns the subclass's new prototype.\n */\ncreatejs.extend = function(subclass, superclass) {\n\t\"use strict\";\n\n\tfunction o() { this.constructor = subclass; }\n\to.prototype = superclass.prototype;\n\treturn (subclass.prototype = new o());\n};\n\n//##############################################################################\n// promote.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\n * It is recommended to use the super class's name as the prefix.\n * An alias to the super class's constructor is always added in the format `prefix_constructor`.\n * This allows the subclass to call super class methods without using `function.call`, providing better performance.\n *\n * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\n * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\n * prototype of `MySubClass` as `MySuperClass_draw`.\n *\n * This should be called after the class's prototype is fully defined.\n *\n * \tfunction ClassA(name) {\n * \t\tthis.name = name;\n * \t}\n * \tClassA.prototype.greet = function() {\n * \t\treturn \"Hello \"+this.name;\n * \t}\n *\n * \tfunction ClassB(name, punctuation) {\n * \t\tthis.ClassA_constructor(name);\n * \t\tthis.punctuation = punctuation;\n * \t}\n * \tcreatejs.extend(ClassB, ClassA);\n * \tClassB.prototype.greet = function() {\n * \t\treturn this.ClassA_greet()+this.punctuation;\n * \t}\n * \tcreatejs.promote(ClassB, \"ClassA\");\n *\n * \tvar foo = new ClassB(\"World\", \"!?!\");\n * \tconsole.log(foo.greet()); // Hello World!?!\n *\n * @method promote\n * @param {Function} subclass The class to promote super class methods on.\n * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.\n * @return {Function} Returns the subclass.\n */\ncreatejs.promote = function(subclass, prefix) {\n\t\"use strict\";\n\n\tvar subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;\n\tif (supP) {\n\t\tsubP[(prefix+=\"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\t\tfor (var n in supP) {\n\t\t\tif (subP.hasOwnProperty(n) && (typeof supP[n] == \"function\")) { subP[prefix + n] = supP[n]; }\n\t\t}\n\t}\n\treturn subclass;\n};\n\n//##############################################################################\n// indexOf.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\n * that value.  Returns -1 if value is not found.\n *\n *      var i = createjs.indexOf(myArray, myElementToFind);\n *\n * @method indexOf\n * @param {Array} array Array to search for searchElement\n * @param searchElement Element to find in array.\n * @return {Number} The first index of searchElement in array.\n */\ncreatejs.indexOf = function (array, searchElement){\n\t\"use strict\";\n\n\tfor (var i = 0,l=array.length; i < l; i++) {\n\t\tif (searchElement === array[i]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n\n//##############################################################################\n// Event.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n// constructor:\n\t/**\n\t * Contains properties and methods shared by all events for use with\n\t * {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\t * \n\t * Note that Event objects are often reused, so you should never\n\t * rely on an event object's state outside of the call stack it was received in.\n\t * @class Event\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @constructor\n\t **/\n\tfunction Event(type, bubbles, cancelable) {\n\t\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The type of event.\n\t\t * @property type\n\t\t * @type String\n\t\t **/\n\t\tthis.type = type;\n\t\n\t\t/**\n\t\t * The object that generated an event.\n\t\t * @property target\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.target = null;\n\t\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t * @property currentTarget\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.currentTarget = null;\n\t\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:<OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t * @property eventPhase\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.eventPhase = 0;\n\t\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t * @property bubbles\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.bubbles = !!bubbles;\n\t\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via\n\t\t * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n\t\t * @property cancelable\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.cancelable = !!cancelable;\n\t\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t * @property timeStamp\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.timeStamp = (new Date()).getTime();\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property defaultPrevented\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.defaultPrevented = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n\t\t * @property propagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.propagationStopped = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property immediatePropagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.immediatePropagationStopped = false;\n\t\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n\t\t * @property removed\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.removed = false;\n\t}\n\tvar p = Event.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n// public methods:\n\t/**\n\t * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\n\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t * cancel the default behaviour associated with the event.\n\t * @method preventDefault\n\t **/\n\tp.preventDefault = function() {\n\t\tthis.defaultPrevented = this.cancelable&&true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopPropagation\n\t **/\n\tp.stopPropagation = function() {\n\t\tthis.propagationStopped = true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n\t * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopImmediatePropagation\n\t **/\n\tp.stopImmediatePropagation = function() {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t};\n\t\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t * \n\t * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t * \t\t\t// do stuff...\n\t * \t\t\tevt.remove(); // removes this listener.\n\t * \t\t});\n\t * \n\t * @method remove\n\t **/\n\tp.remove = function() {\n\t\tthis.removed = true;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Event instance.\n\t * @method clone\n\t * @return {Event} a clone of the Event instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Event(this.type, this.bubbles, this.cancelable);\n\t};\n\t\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Event (type=\"+this.type+\")]\";\n\t};\n\n\tcreatejs.Event = Event;\n}());\n\n//##############################################################################\n// EventDispatcher.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n\t *\n\t * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\n\t * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n\t * \n\t * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\n\t * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\n\t * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n\t * \n\t * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\n\t * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \n\t * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\n\t * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\n\t * \n\t * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\n\t * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also \n\t * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\n\t *\n\t * <h4>Example</h4>\n\t * Add EventDispatcher capabilities to the \"MyClass\" class.\n\t *\n\t *      EventDispatcher.initialize(MyClass.prototype);\n\t *\n\t * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n\t *\n\t *      instance.addEventListener(\"eventName\", handlerMethod);\n\t *      function handlerMethod(event) {\n\t *          console.log(event.target + \" Was Clicked\");\n\t *      }\n\t *\n\t * <b>Maintaining proper scope</b><br />\n\t * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\n\t * method to subscribe to events simplifies this.\n\t *\n\t *      instance.addEventListener(\"click\", function(event) {\n\t *          console.log(instance == this); // false, scope is ambiguous.\n\t *      });\n\t *      \n\t *      instance.on(\"click\", function(event) {\n\t *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\n\t *      });\n\t * \n\t * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage\n\t * scope.\n\t *\n\t * <b>Browser support</b>\n\t * The event model in CreateJS can be used separately from the suite in any project, however the inheritance model\n\t * requires modern browsers (IE9+).\n\t *      \n\t *\n\t * @class EventDispatcher\n\t * @constructor\n\t **/\n\tfunction EventDispatcher() {\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * @protected\n\t\t * @property _listeners\n\t\t * @type Object\n\t\t **/\n\t\tthis._listeners = null;\n\t\t\n\t\t/**\n\t\t * @protected\n\t\t * @property _captureListeners\n\t\t * @type Object\n\t\t **/\n\t\tthis._captureListeners = null;\n\t}\n\tvar p = EventDispatcher.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// static public methods:\n\t/**\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\n\t * \n\t * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\n\t * \n\t * @method initialize\n\t * @static\n\t * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\n\t * prototype.\n\t **/\n\tEventDispatcher.initialize = function(target) {\n\t\ttarget.addEventListener = p.addEventListener;\n\t\ttarget.on = p.on;\n\t\ttarget.removeEventListener = target.off =  p.removeEventListener;\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\n\t\ttarget.hasEventListener = p.hasEventListener;\n\t\ttarget.dispatchEvent = p.dispatchEvent;\n\t\ttarget._dispatchEvent = p._dispatchEvent;\n\t\ttarget.willTrigger = p.willTrigger;\n\t};\n\t\n\n// public methods:\n\t/**\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\n\t * multiple callbacks getting fired.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.addEventListener(\"click\", handleClick);\n\t *      function handleClick(event) {\n\t *         // Click happened.\n\t *      }\n\t *\n\t * @method addEventListener\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n\t * the event is dispatched.\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function | Object} Returns the listener for chaining or assignment.\n\t **/\n\tp.addEventListener = function(type, listener, useCapture) {\n\t\tvar listeners;\n\t\tif (useCapture) {\n\t\t\tlisteners = this._captureListeners = this._captureListeners||{};\n\t\t} else {\n\t\t\tlisteners = this._listeners = this._listeners||{};\n\t\t}\n\t\tvar arr = listeners[type];\n\t\tif (arr) { this.removeEventListener(type, listener, useCapture); }\n\t\tarr = listeners[type]; // remove may have deleted the array\n\t\tif (!arr) { listeners[type] = [listener];  }\n\t\telse { arr.push(listener); }\n\t\treturn listener;\n\t};\n\t\n\t/**\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\n\t * \n\t * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\n\t * The wrapper function is returned for use with `removeEventListener` (or `off`).\n\t * \n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n\t * {{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\n\t * to `on` with the same params will create multiple listeners.\n\t * \n\t * <h4>Example</h4>\n\t * \n\t * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\n\t * \t\tfunction handleClick(evt, data) {\n\t * \t\t\tdata.count -= 1;\n\t * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\n\t * \t\t\tif (data.count == 0) {\n\t * \t\t\t\talert(\"clicked 3 times!\");\n\t * \t\t\t\tmyBtn.off(\"click\", listener);\n\t * \t\t\t\t// alternately: evt.remove();\n\t * \t\t\t}\n\t * \t\t}\n\t * \n\t * @method on\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n\t * the event is dispatched.\n\t * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\n\t * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\n\t * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\n\t * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\n\t **/\n\tp.on = function(type, listener, scope, once, data, useCapture) {\n\t\tif (listener.handleEvent) {\n\t\t\tscope = scope||listener;\n\t\t\tlistener = listener.handleEvent;\n\t\t}\n\t\tscope = scope||this;\n\t\treturn this.addEventListener(type, function(evt) {\n\t\t\t\tlistener.call(scope, evt, data);\n\t\t\t\tonce&&evt.remove();\n\t\t\t}, useCapture);\n\t};\n\n\t/**\n\t * Removes the specified event listener.\n\t *\n\t * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\n\t * closure will not work.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.removeEventListener(\"click\", handleClick);\n\t *\n\t * @method removeEventListener\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener The listener function or object.\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t **/\n\tp.removeEventListener = function(type, listener, useCapture) {\n\t\tvar listeners = useCapture ? this._captureListeners : this._listeners;\n\t\tif (!listeners) { return; }\n\t\tvar arr = listeners[type];\n\t\tif (!arr) { return; }\n\t\tfor (var i=0,l=arr.length; i<l; i++) {\n\t\t\tif (arr[i] == listener) {\n\t\t\t\tif (l==1) { delete(listeners[type]); } // allows for faster checks.\n\t\t\t\telse { arr.splice(i,1); }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n\t * .on method.\n\t * \n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \n\t * {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.\n\t *\n\t * @method off\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener The listener function or object.\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t **/\n\tp.off = p.removeEventListener;\n\n\t/**\n\t * Removes all listeners for the specified type, or all listeners of all types.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      // Remove all listeners\n\t *      displayObject.removeAllEventListeners();\n\t *\n\t *      // Remove all click listeners\n\t *      displayObject.removeAllEventListeners(\"click\");\n\t *\n\t * @method removeAllEventListeners\n\t * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\n\t **/\n\tp.removeAllEventListeners = function(type) {\n\t\tif (!type) { this._listeners = this._captureListeners = null; }\n\t\telse {\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\n\t\t}\n\t};\n\n\t/**\n\t * Dispatches the specified event to all listeners.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      // Use a string event\n\t *      this.dispatchEvent(\"complete\");\n\t *\n\t *      // Use an Event instance\n\t *      var event = new createjs.Event(\"progress\");\n\t *      this.dispatchEvent(event);\n\t *\n\t * @method dispatchEvent\n\t * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\n\t * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\n\t * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\n\t * @param {Boolean} [bubbles] Specifies the `bubbles` value when a string was passed to eventObj.\n\t * @param {Boolean} [cancelable] Specifies the `cancelable` value when a string was passed to eventObj.\n\t * @return {Boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\n\t **/\n\tp.dispatchEvent = function(eventObj, bubbles, cancelable) {\n\t\tif (typeof eventObj == \"string\") {\n\t\t\t// skip everything if there's no listeners and it doesn't bubble:\n\t\t\tvar listeners = this._listeners;\n\t\t\tif (!bubbles && (!listeners || !listeners[eventObj])) { return true; }\n\t\t\teventObj = new createjs.Event(eventObj, bubbles, cancelable);\n\t\t} else if (eventObj.target && eventObj.clone) {\n\t\t\t// redispatching an active event object, so clone it:\n\t\t\teventObj = eventObj.clone();\n\t\t}\n\t\t\n\t\t// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\n\n\t\tif (!eventObj.bubbles || !this.parent) {\n\t\t\tthis._dispatchEvent(eventObj, 2);\n\t\t} else {\n\t\t\tvar top=this, list=[top];\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\n\t\t\tvar i, l=list.length;\n\n\t\t\t// capture & atTarget\n\t\t\tfor (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\n\t\t\t}\n\t\t\t// bubbling\n\t\t\tfor (i=1; i<l && !eventObj.propagationStopped; i++) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\n\t\t\t}\n\t\t}\n\t\treturn !eventObj.defaultPrevented;\n\t};\n\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type.\n\t * @method hasEventListener\n\t * @param {String} type The string type of the event.\n\t * @return {Boolean} Returns true if there is at least one listener for the specified event.\n\t **/\n\tp.hasEventListener = function(type) {\n\t\tvar listeners = this._listeners, captureListeners = this._captureListeners;\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\n\t};\n\t\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\n\t * specified type is dispatched from this object, it will trigger at least one listener.\n\t * \n\t * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\n\t * event flow for a listener, not just this object.\n\t * @method willTrigger\n\t * @param {String} type The string type of the event.\n\t * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\n\t **/\n\tp.willTrigger = function(type) {\n\t\tvar o = this;\n\t\twhile (o) {\n\t\t\tif (o.hasEventListener(type)) { return true; }\n\t\t\to = o.parent;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[EventDispatcher]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _dispatchEvent\n\t * @param {Object | String | Event} eventObj\n\t * @param {Object} eventPhase\n\t * @protected\n\t **/\n\tp._dispatchEvent = function(eventObj, eventPhase) {\n\t\tvar l, listeners = (eventPhase==1) ? this._captureListeners : this._listeners;\n\t\tif (eventObj && listeners) {\n\t\t\tvar arr = listeners[eventObj.type];\n\t\t\tif (!arr||!(l=arr.length)) { return; }\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\n\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\n\t\t\teventObj.removed = false;\n\t\t\t\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\n\t\t\tfor (var i=0; i<l && !eventObj.immediatePropagationStopped; i++) {\n\t\t\t\tvar o = arr[i];\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\n\t\t\t\telse { o(eventObj); }\n\t\t\t\tif (eventObj.removed) {\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase==1);\n\t\t\t\t\teventObj.removed = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\n\tcreatejs.EventDispatcher = EventDispatcher;\n}());\n\n//##############################################################################\n// Ticker.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n\t * event to be notified when a set time interval has elapsed.\n\t *\n\t * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n\t * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n\t * can not be instantiated.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          // Actions carried out each tick (aka frame)\n\t *          if (!event.paused) {\n\t *              // Actions carried out when the Ticker is not paused.\n\t *          }\n\t *      }\n\t *\n\t * @class Ticker\n\t * @uses EventDispatcher\n\t * @static\n\t **/\n\tfunction Ticker() {\n\t\tthrow \"Ticker cannot be instantiated.\";\n\t}\n\n\n// constants:\n\t/**\n\t * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n\t * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n\t * dispatches the tick when the time is within a certain threshold.\n\t *\n\t * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n\t * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n\t * gaining the benefits of that API (screen synch, background throttling).\n\t *\n\t * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n\t * framerates of 10, 12, 15, 20, and 30 work well.\n\t *\n\t * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t * @property RAF_SYNCHED\n\t * @static\n\t * @type {String}\n\t * @default \"synched\"\n\t * @readonly\n\t **/\n\tTicker.RAF_SYNCHED = \"synched\";\n\n\t/**\n\t * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n\t * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n\t * You can leverage {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} and the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t * event object's \"delta\" properties to make this easier.\n\t *\n\t * Falls back on {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t * @property RAF\n\t * @static\n\t * @type {String}\n\t * @default \"raf\"\n\t * @readonly\n\t **/\n\tTicker.RAF = \"raf\";\n\n\t/**\n\t * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n\t * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n\t * @property TIMEOUT\n\t * @static\n\t * @type {String}\n\t * @default \"timeout\"\n\t * @readonly\n\t **/\n\tTicker.TIMEOUT = \"timeout\";\n\n\n// static events:\n\t/**\n\t * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n\t * {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          console.log(\"Paused:\", event.paused, event.delta);\n\t *      }\n\t *\n\t * @event tick\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Boolean} paused Indicates whether the ticker is currently paused.\n\t * @param {Number} delta The time elapsed in ms since the last tick.\n\t * @param {Number} time The total time in ms since Ticker was initialized.\n\t * @param {Number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n\t * \tyou could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n\t * @since 0.6.0\n\t */\n\n\n// public static properties:\n\t/**\n\t * Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}, and will be removed in a future version. If true, timingMode will\n\t * use {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} by default.\n\t * @deprecated Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}.\n\t * @property useRAF\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tTicker.useRAF = false;\n\n\t/**\n\t * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See\n\t * {{#crossLink \"Ticker/TIMEOUT\"}}{{/crossLink}}, {{#crossLink \"Ticker/RAF\"}}{{/crossLink}}, and\n\t * {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} for mode details.\n\t * @property timingMode\n\t * @static\n\t * @type {String}\n\t * @default Ticker.TIMEOUT\n\t **/\n\tTicker.timingMode = null;\n\n\t/**\n\t * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n\t * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n\t * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n\t * (ex. maxDelta=50 when running at 40fps).\n\t * \n\t * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n\t * when using both delta and other values.\n\t * \n\t * If 0, there is no maximum.\n\t * @property maxDelta\n\t * @static\n\t * @type {number}\n\t * @default 0\n\t */\n\tTicker.maxDelta = 0;\n\t\n\t/**\n\t * When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property\n\t * of the event will be `true`. Also, while paused the `runTime` will not increase. See {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}},\n\t * {{#crossLink \"Ticker/getTime\"}}{{/crossLink}}, and {{#crossLink \"Ticker/getEventTime\"}}{{/crossLink}} for more\n\t * info.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      createjs.Ticker.paused = true;\n\t *      function handleTick(event) {\n\t *          console.log(event.paused,\n\t *          \tcreatejs.Ticker.getTime(false),\n\t *          \tcreatejs.Ticker.getTime(true));\n\t *      }\n\t *\n\t * @property paused\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tTicker.paused = false;\n\n\n// mix-ins:\n\t// EventDispatcher methods:\n\tTicker.removeEventListener = null;\n\tTicker.removeAllEventListeners = null;\n\tTicker.dispatchEvent = null;\n\tTicker.hasEventListener = null;\n\tTicker._listeners = null;\n\tcreatejs.EventDispatcher.initialize(Ticker); // inject EventDispatcher methods.\n\tTicker._addEventListener = Ticker.addEventListener;\n\tTicker.addEventListener = function() {\n\t\t!Ticker._inited&&Ticker.init();\n\t\treturn Ticker._addEventListener.apply(Ticker, arguments);\n\t};\n\n\n// private static properties:\n\t/**\n\t * @property _inited\n\t * @static\n\t * @type {Boolean}\n\t * @protected\n\t **/\n\tTicker._inited = false;\n\n\t/**\n\t * @property _startTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._startTime = 0;\n\n\t/**\n\t * @property _pausedTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._pausedTime=0;\n\n\t/**\n\t * The number of ticks that have passed\n\t * @property _ticks\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._ticks = 0;\n\n\t/**\n\t * The number of ticks that have passed while Ticker has been paused\n\t * @property _pausedTicks\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._pausedTicks = 0;\n\n\t/**\n\t * @property _interval\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._interval = 50;\n\n\t/**\n\t * @property _lastTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._lastTime = 0;\n\n\t/**\n\t * @property _times\n\t * @static\n\t * @type {Array}\n\t * @protected\n\t **/\n\tTicker._times = null;\n\n\t/**\n\t * @property _tickTimes\n\t * @static\n\t * @type {Array}\n\t * @protected\n\t **/\n\tTicker._tickTimes = null;\n\n\t/**\n\t * Stores the timeout or requestAnimationFrame id.\n\t * @property _timerId\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._timerId = null;\n\t\n\t/**\n\t * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n\t * if that property changed and a tick hasn't fired.\n\t * @property _raf\n\t * @static\n\t * @type {Boolean}\n\t * @protected\n\t **/\n\tTicker._raf = true;\n\t\n\n// static getter / setters:\n\t/**\n\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t * @method setInterval\n\t * @static\n\t * @param {Number} interval\n\t * @deprecated\n\t **/\n\tTicker.setInterval = function(interval) {\n\t\tTicker._interval = interval;\n\t\tif (!Ticker._inited) { return; }\n\t\tTicker._setupTick();\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t * @method getInterval\n\t * @static\n\t * @return {Number}\n\t * @deprecated\n\t **/\n\tTicker.getInterval = function() {\n\t\treturn Ticker._interval;\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t * @method setFPS\n\t * @static\n\t * @param {Number} value\n\t * @deprecated\n\t **/\n\tTicker.setFPS = function(value) {\n\t\tTicker.setInterval(1000/value);\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t * @method getFPS\n\t * @static\n\t * @return {Number}\n\t * @deprecated\n\t **/\n\tTicker.getFPS = function() {\n\t\treturn 1000/Ticker._interval;\n\t};\n\n\t/**\n\t * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\t * Note that actual time between ticks may be more than specified depending on CPU load.\n\t * This property is ignored if the ticker is using the `RAF` timing mode.\n\t * @property interval\n\t * @static\n\t * @type {Number}\n\t **/\n\t \n\t/**\n\t * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n\t * `framerate == 1000/interval`.\n\t * @property framerate\n\t * @static\n\t * @type {Number}\n\t **/\n\ttry {\n\t\tObject.defineProperties(Ticker, {\n\t\t\tinterval: { get: Ticker.getInterval, set: Ticker.setInterval },\n\t\t\tframerate: { get: Ticker.getFPS, set: Ticker.setFPS }\n\t\t});\n\t} catch (e) { console.log(e); }\n\n\n// public static methods:\n\t/**\n\t * Starts the tick. This is called automatically when the first listener is added.\n\t * @method init\n\t * @static\n\t **/\n\tTicker.init = function() {\n\t\tif (Ticker._inited) { return; }\n\t\tTicker._inited = true;\n\t\tTicker._times = [];\n\t\tTicker._tickTimes = [];\n\t\tTicker._startTime = Ticker._getTime();\n\t\tTicker._times.push(Ticker._lastTime = 0);\n\t\tTicker.interval = Ticker._interval;\n\t};\n\t\n\t/**\n\t * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n\t * @method reset\n\t * @static\n\t **/\n\tTicker.reset = function() {\n\t\tif (Ticker._raf) {\n\t\t\tvar f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n\t\t\tf&&f(Ticker._timerId);\n\t\t} else {\n\t\t\tclearTimeout(Ticker._timerId);\n\t\t}\n\t\tTicker.removeAllEventListeners(\"tick\");\n\t\tTicker._timerId = Ticker._times = Ticker._tickTimes = null;\n\t\tTicker._startTime = Ticker._lastTime = Ticker._ticks = 0;\n\t\tTicker._inited = false;\n\t};\n\n\t/**\n\t * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n\t * because it only measures the time spent within the tick execution stack. \n\t * \n\t * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between \n\t * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that \n\t * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\t *\n\t * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n\t * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n\t * other than the tick is using ~80ms (another script, DOM rendering, etc).\n\t * @method getMeasuredTickTime\n\t * @static\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the average time spent in a tick.\n\t * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n\t * @return {Number} The average time spent in a tick in milliseconds.\n\t **/\n\tTicker.getMeasuredTickTime = function(ticks) {\n\t\tvar ttl=0, times=Ticker._tickTimes;\n\t\tif (!times || times.length < 1) { return -1; }\n\n\t\t// by default, calculate average for the past ~1 second:\n\t\tticks = Math.min(times.length, ticks||(Ticker.getFPS()|0));\n\t\tfor (var i=0; i<ticks; i++) { ttl += times[i]; }\n\t\treturn ttl/ticks;\n\t};\n\n\t/**\n\t * Returns the actual frames / ticks per second.\n\t * @method getMeasuredFPS\n\t * @static\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the actual frames / ticks per second.\n\t * Defaults to the number of ticks per second.\n\t * @return {Number} The actual frames / ticks per second. Depending on performance, this may differ\n\t * from the target frames per second.\n\t **/\n\tTicker.getMeasuredFPS = function(ticks) {\n\t\tvar times = Ticker._times;\n\t\tif (!times || times.length < 2) { return -1; }\n\n\t\t// by default, calculate fps for the past ~1 second:\n\t\tticks = Math.min(times.length-1, ticks||(Ticker.getFPS()|0));\n\t\treturn 1000/((times[0]-times[ticks])/ticks);\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t * @method setPaused\n\t * @static\n\t * @param {Boolean} value\n\t * @deprecated\n\t **/\n\tTicker.setPaused = function(value) {\n\t\t// TODO: deprecated.\n\t\tTicker.paused = value;\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t * @method getPaused\n\t * @static\n\t * @return {Boolean}\n\t * @deprecated\n\t **/\n\tTicker.getPaused = function() {\n\t\t// TODO: deprecated.\n\t\treturn Ticker.paused;\n\t};\n\n\t/**\n\t * Returns the number of milliseconds that have elapsed since Ticker was initialized via {{#crossLink \"Ticker/init\"}}.\n\t * Returns -1 if Ticker has not been initialized. For example, you could use\n\t * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n\t * @method getTime\n\t * @static\n\t * @param {Boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n\t * If false, the value returned will be total time elapsed since the first tick event listener was added.\n\t * @return {Number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n\t **/\n\tTicker.getTime = function(runTime) {\n\t\treturn Ticker._startTime ? Ticker._getTime() - (runTime ? Ticker._pausedTime : 0) : -1;\n\t};\n\n\t/**\n\t * Similar to the {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} method, but returns the time on the most recent {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t * event object.\n\t * @method getEventTime\n\t * @static\n\t * @param runTime {Boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n\t * @returns {number} The time or runTime property from the most recent tick event or -1.\n\t */\n\tTicker.getEventTime = function(runTime) {\n\t\treturn Ticker._startTime ? (Ticker._lastTime || Ticker._startTime) - (runTime ? Ticker._pausedTime : 0) : -1;\n\t};\n\t\n\t/**\n\t * Returns the number of ticks that have been broadcast by Ticker.\n\t * @method getTicks\n\t * @static\n\t * @param {Boolean} pauseable Indicates whether to include ticks that would have been broadcast\n\t * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n\t * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n\t * value. The default value is false.\n\t * @return {Number} of ticks that have been broadcast.\n\t **/\n\tTicker.getTicks = function(pauseable) {\n\t\treturn  Ticker._ticks - (pauseable ? Ticker._pausedTicks : 0);\n\t};\n\n\n// private static methods:\n\t/**\n\t * @method _handleSynch\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleSynch = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\n\t\t// run if enough time has elapsed, with a little bit of flexibility to be early:\n\t\tif (Ticker._getTime() - Ticker._lastTime >= (Ticker._interval-1)*0.97) {\n\t\t\tTicker._tick();\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleRAF\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleRAF = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\t\tTicker._tick();\n\t};\n\n\t/**\n\t * @method _handleTimeout\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleTimeout = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\t\tTicker._tick();\n\t};\n\n\t/**\n\t * @method _setupTick\n\t * @static\n\t * @protected\n\t **/\n\tTicker._setupTick = function() {\n\t\tif (Ticker._timerId != null) { return; } // avoid duplicates\n\n\t\tvar mode = Ticker.timingMode||(Ticker.useRAF&&Ticker.RAF_SYNCHED);\n\t\tif (mode == Ticker.RAF_SYNCHED || mode == Ticker.RAF) {\n\t\t\tvar f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\tif (f) {\n\t\t\t\tTicker._timerId = f(mode == Ticker.RAF ? Ticker._handleRAF : Ticker._handleSynch);\n\t\t\t\tTicker._raf = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tTicker._raf = false;\n\t\tTicker._timerId = setTimeout(Ticker._handleTimeout, Ticker._interval);\n\t};\n\n\t/**\n\t * @method _tick\n\t * @static\n\t * @protected\n\t **/\n\tTicker._tick = function() {\n\t\tvar paused = Ticker.paused;\n\t\tvar time = Ticker._getTime();\n\t\tvar elapsedTime = time-Ticker._lastTime;\n\t\tTicker._lastTime = time;\n\t\tTicker._ticks++;\n\t\t\n\t\tif (paused) {\n\t\t\tTicker._pausedTicks++;\n\t\t\tTicker._pausedTime += elapsedTime;\n\t\t}\n\t\t\n\t\tif (Ticker.hasEventListener(\"tick\")) {\n\t\t\tvar event = new createjs.Event(\"tick\");\n\t\t\tvar maxDelta = Ticker.maxDelta;\n\t\t\tevent.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;\n\t\t\tevent.paused = paused;\n\t\t\tevent.time = time;\n\t\t\tevent.runTime = time-Ticker._pausedTime;\n\t\t\tTicker.dispatchEvent(event);\n\t\t}\n\t\t\n\t\tTicker._tickTimes.unshift(Ticker._getTime()-time);\n\t\twhile (Ticker._tickTimes.length > 100) { Ticker._tickTimes.pop(); }\n\n\t\tTicker._times.unshift(time);\n\t\twhile (Ticker._times.length > 100) { Ticker._times.pop(); }\n\t};\n\n\t/**\n\t * @method _getTime\n\t * @static\n\t * @protected\n\t **/\n\tvar now = window.performance && (performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow);\n\tTicker._getTime = function() {\n\t\treturn ((now&&now.call(performance))||(new Date().getTime())) - Ticker._startTime;\n\t};\n\n\n\tcreatejs.Ticker = Ticker;\n}());\n\n//##############################################################################\n// UID.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)\n\t * and should not be instantiated.\n\t * @class UID\n\t * @static\n\t **/\n\tfunction UID() {\n\t\tthrow \"UID cannot be instantiated\";\n\t}\n\n\n// private static properties:\n\t/**\n\t * @property _nextID\n\t * @type Number\n\t * @protected\n\t **/\n\tUID._nextID = 0;\n\n\n// public static methods:\n\t/**\n\t * Returns the next unique id.\n\t * @method get\n\t * @return {Number} The next unique id\n\t * @static\n\t **/\n\tUID.get = function() {\n\t\treturn UID._nextID++;\n\t};\n\n\n\tcreatejs.UID = UID;\n}());\n\n//##############################################################################\n// MouseEvent.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,\n\t * see the {{#crossLink \"DisplayObject\"}}{{/crossLink}} and {{#crossLink \"Stage\"}}{{/crossLink}} event listings.\n\t * @class MouseEvent\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @param {Number} stageX The normalized x position relative to the stage.\n\t * @param {Number} stageY The normalized y position relative to the stage.\n\t * @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.\n\t * @param {Number} pointerID The unique id for the pointer.\n\t * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.\n\t * @param {Number} rawX The raw x position relative to the stage.\n\t * @param {Number} rawY The raw y position relative to the stage.\n\t * @param {DisplayObject} relatedTarget The secondary target for the event.\n\t * @extends Event\n\t * @constructor\n\t **/\n\tfunction MouseEvent(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY, relatedTarget) {\n\t\tthis.Event_constructor(type, bubbles, cancelable);\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The normalized x position on the stage. This will always be within the range 0 to stage width.\n\t\t * @property stageX\n\t\t * @type Number\n\t\t*/\n\t\tthis.stageX = stageX;\n\t\n\t\t/**\n\t\t * The normalized y position on the stage. This will always be within the range 0 to stage height.\n\t\t * @property stageY\n\t\t * @type Number\n\t\t **/\n\t\tthis.stageY = stageY;\n\t\n\t\t/**\n\t\t * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless\n\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t * @property rawX\n\t\t * @type Number\n\t\t*/\n\t\tthis.rawX = (rawX==null)?stageX:rawX;\n\t\n\t\t/**\n\t\t * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless\n\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t * @property rawY\n\t\t * @type Number\n\t\t*/\n\t\tthis.rawY = (rawY==null)?stageY:rawY;\n\t\n\t\t/**\n\t\t * The native MouseEvent generated by the browser. The properties and API for this\n\t\t * event may differ between browsers. This property will be null if the\n\t\t * EaselJS property was not directly generated from a native MouseEvent.\n\t\t * @property nativeEvent\n\t\t * @type HtmlMouseEvent\n\t\t * @default null\n\t\t **/\n\t\tthis.nativeEvent = nativeEvent;\n\t\n\t\t/**\n\t\t * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system\n\t\t * supplied id value.\n\t\t * @property pointerID\n\t\t * @type {Number}\n\t\t */\n\t\tthis.pointerID = pointerID;\n\t\n\t\t/**\n\t\t * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.\n\t\t * For touch pointers, the first pointer in the current stack will be considered the primary pointer.\n\t\t * @property primary\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.primary = !!primary;\n\t\t\n\t\t/**\n\t\t * The secondary target for the event, if applicable. This is used for mouseout/rollout\n\t\t * events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,\n\t\t * and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.\n\t\t * \n\t\t * Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).\n\t\t * @property relatedTarget\n\t\t * @type {DisplayObject}\n\t\t */\n\t\tthis.relatedTarget = relatedTarget;\n\t}\n\tvar p = createjs.extend(MouseEvent, createjs.Event);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n// getter / setters:\n\t/**\n\t * Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n\t * @property localX\n\t * @type {Number}\n\t * @readonly\n\t */\n\tp._get_localX = function() {\n\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).x;\n\t};\n\t\n\t/**\n\t * Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n\t * @property localY\n\t * @type {Number}\n\t * @readonly\n\t */\n\tp._get_localY = function() {\n\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).y;\n\t};\n\t\n\t/**\n\t * Indicates whether the event was generated by a touch input (versus a mouse input).\n\t * @property isTouch\n\t * @type {Boolean}\n\t * @readonly\n\t */\n\tp._get_isTouch = function() {\n\t\treturn this.pointerID !== -1;\n\t};\n\t\n\t\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tlocalX: { get: p._get_localX },\n\t\t\tlocalY: { get: p._get_localY },\n\t\t\tisTouch: { get: p._get_isTouch }\n\t\t});\n\t} catch (e) {} // TODO: use Log\n\n\n// public methods:\n\t/**\n\t * Returns a clone of the MouseEvent instance.\n\t * @method clone\n\t * @return {MouseEvent} a clone of the MouseEvent instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[MouseEvent (type=\"+this.type+\" stageX=\"+this.stageX+\" stageY=\"+this.stageY+\")]\";\n\t};\n\n\n\tcreatejs.MouseEvent = createjs.promote(MouseEvent, \"Event\");\n}());\n\n//##############################################################################\n// Matrix2D.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n\t *\n\t * This matrix can be visualized as:\n\t *\n\t * \t[ a  c  tx\n\t * \t  b  d  ty\n\t * \t  0  0  1  ]\n\t *\n\t * Note the locations of b and c.\n\t *\n\t * @class Matrix2D\n\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t * @constructor\n\t **/\n\tfunction Matrix2D(a, b, c, d, tx, ty) {\n\t\tthis.setValues(a,b,c,d,tx,ty);\n\t\t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * Position (0, 0) in a 3x3 affine transformation matrix.\n\t\t * @property a\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (0, 1) in a 3x3 affine transformation matrix.\n\t\t * @property b\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (1, 0) in a 3x3 affine transformation matrix.\n\t\t * @property c\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (1, 1) in a 3x3 affine transformation matrix.\n\t\t * @property d\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (2, 0) in a 3x3 affine transformation matrix.\n\t\t * @property tx\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (2, 1) in a 3x3 affine transformation matrix.\n\t\t * @property ty\n\t\t * @type Number\n\t\t **/\n\t}\n\tvar p = Matrix2D.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// constants:\n\t/**\n\t * Multiplier for converting degrees to radians. Used internally by Matrix2D.\n\t * @property DEG_TO_RAD\n\t * @static\n\t * @final\n\t * @type Number\n\t * @readonly\n\t **/\n\tMatrix2D.DEG_TO_RAD = Math.PI/180;\n\n\n// static public properties:\n\t/**\n\t * An identity matrix, representing a null transformation.\n\t * @property identity\n\t * @static\n\t * @type Matrix2D\n\t * @readonly\n\t **/\n\tMatrix2D.identity = null; // set at bottom of class definition.\n\t\n\n// public methods:\n\t/**\n\t * Sets the specified values on this instance. \n\t * @method setValues\n\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t * @return {Matrix2D} This instance. Useful for chaining method calls.\n\t*/\n\tp.setValues = function(a, b, c, d, tx, ty) {\n\t\t// don't forget to update docs in the constructor if these change:\n\t\tthis.a = (a == null) ? 1 : a;\n\t\tthis.b = b || 0;\n\t\tthis.c = c || 0;\n\t\tthis.d = (d == null) ? 1 : d;\n\t\tthis.tx = tx || 0;\n\t\tthis.ty = ty || 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Appends the specified matrix properties to this matrix. All parameters are required.\n\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t * @method append\n\t * @param {Number} a\n\t * @param {Number} b\n\t * @param {Number} c\n\t * @param {Number} d\n\t * @param {Number} tx\n\t * @param {Number} ty\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.append = function(a, b, c, d, tx, ty) {\n\t\tvar a1 = this.a;\n\t\tvar b1 = this.b;\n\t\tvar c1 = this.c;\n\t\tvar d1 = this.d;\n\t\tif (a != 1 || b != 0 || c != 0 || d != 1) {\n\t\t\tthis.a  = a1*a+c1*b;\n\t\t\tthis.b  = b1*a+d1*b;\n\t\t\tthis.c  = a1*c+c1*d;\n\t\t\tthis.d  = b1*c+d1*d;\n\t\t}\n\t\tthis.tx = a1*tx+c1*ty+this.tx;\n\t\tthis.ty = b1*tx+d1*ty+this.ty;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Prepends the specified matrix properties to this matrix.\n\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t * All parameters are required.\n\t * @method prepend\n\t * @param {Number} a\n\t * @param {Number} b\n\t * @param {Number} c\n\t * @param {Number} d\n\t * @param {Number} tx\n\t * @param {Number} ty\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.prepend = function(a, b, c, d, tx, ty) {\n\t\tvar a1 = this.a;\n\t\tvar c1 = this.c;\n\t\tvar tx1 = this.tx;\n\n\t\tthis.a  = a*a1+c*this.b;\n\t\tthis.b  = b*a1+d*this.b;\n\t\tthis.c  = a*c1+c*this.d;\n\t\tthis.d  = b*c1+d*this.d;\n\t\tthis.tx = a*tx1+c*this.ty+tx;\n\t\tthis.ty = b*tx1+d*this.ty+ty;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Appends the specified matrix to this matrix.\n\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t * @method appendMatrix\n\t * @param {Matrix2D} matrix\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.appendMatrix = function(matrix) {\n\t\treturn this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t};\n\n\t/**\n\t * Prepends the specified matrix to this matrix.\n\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t * For example, you could calculate the combined transformation for a child object using:\n\t * \n\t * \tvar o = myDisplayObject;\n\t * \tvar mtx = o.getMatrix();\n\t * \twhile (o = o.parent) {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\to.prependMatrix(o.getMatrix());\n\t * \t}\n\t * @method prependMatrix\n\t * @param {Matrix2D} matrix\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.prependMatrix = function(matrix) {\n\t\treturn this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t};\n\n\t/**\n\t * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n\t * For example, you can use this to generate a matrix representing the transformations of a display object:\n\t * \n\t * \tvar mtx = new createjs.Matrix2D();\n\t * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n\t * @method appendTransform\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} scaleX\n\t * @param {Number} scaleY\n\t * @param {Number} rotation\n\t * @param {Number} skewX\n\t * @param {Number} skewY\n\t * @param {Number} regX Optional.\n\t * @param {Number} regY Optional.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\tif (rotation%360) {\n\t\t\tvar r = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\tvar cos = Math.cos(r);\n\t\t\tvar sin = Math.sin(r);\n\t\t} else {\n\t\t\tcos = 1;\n\t\t\tsin = 0;\n\t\t}\n\n\t\tif (skewX || skewY) {\n\t\t\t// TODO: can this be combined into a single append operation?\n\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t} else {\n\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t}\n\t\t\n\t\tif (regX || regY) {\n\t\t\t// append the registration offset:\n\t\t\tthis.tx -= regX*this.a+regY*this.c; \n\t\t\tthis.ty -= regX*this.b+regY*this.d;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n\t * For example, you could calculate the combined transformation for a child object using:\n\t * \n\t * \tvar o = myDisplayObject;\n\t * \tvar mtx = new createjs.Matrix2D();\n\t * \tdo  {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t * \t} while (o = o.parent);\n\t * \t\n\t * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n\t * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n\t * @method prependTransform\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} scaleX\n\t * @param {Number} scaleY\n\t * @param {Number} rotation\n\t * @param {Number} skewX\n\t * @param {Number} skewY\n\t * @param {Number} regX Optional.\n\t * @param {Number} regY Optional.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\tif (rotation%360) {\n\t\t\tvar r = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\tvar cos = Math.cos(r);\n\t\t\tvar sin = Math.sin(r);\n\t\t} else {\n\t\t\tcos = 1;\n\t\t\tsin = 0;\n\t\t}\n\n\t\tif (regX || regY) {\n\t\t\t// prepend the registration offset:\n\t\t\tthis.tx -= regX; this.ty -= regY;\n\t\t}\n\t\tif (skewX || skewY) {\n\t\t\t// TODO: can this be combined into a single prepend operation?\n\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t} else {\n\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Applies a clockwise rotation transformation to the matrix.\n\t * @method rotate\n\t * @param {Number} angle The angle to rotate by, in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.rotate = function(angle) {\n\t\tangle = angle*Matrix2D.DEG_TO_RAD;\n\t\tvar cos = Math.cos(angle);\n\t\tvar sin = Math.sin(angle);\n\n\t\tvar a1 = this.a;\n\t\tvar b1 = this.b;\n\n\t\tthis.a = a1*cos+this.c*sin;\n\t\tthis.b = b1*cos+this.d*sin;\n\t\tthis.c = -a1*sin+this.c*cos;\n\t\tthis.d = -b1*sin+this.d*cos;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Applies a skew transformation to the matrix.\n\t * @method skew\n\t * @param {Number} skewX The amount to skew horizontally in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t * @param {Number} skewY The amount to skew vertically in degrees.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t*/\n\tp.skew = function(skewX, skewY) {\n\t\tskewX = skewX*Matrix2D.DEG_TO_RAD;\n\t\tskewY = skewY*Matrix2D.DEG_TO_RAD;\n\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Applies a scale transformation to the matrix.\n\t * @method scale\n\t * @param {Number} x The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.\n\t * @param {Number} y The amount to scale vertically.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.scale = function(x, y) {\n\t\tthis.a *= x;\n\t\tthis.b *= x;\n\t\tthis.c *= y;\n\t\tthis.d *= y;\n\t\t//this.tx *= x;\n\t\t//this.ty *= y;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Translates the matrix on the x and y axes.\n\t * @method translate\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.translate = function(x, y) {\n\t\tthis.tx += this.a*x + this.c*y;\n\t\tthis.ty += this.b*x + this.d*y;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\n\t * @method identity\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.identity = function() {\n\t\tthis.a = this.d = 1;\n\t\tthis.b = this.c = this.tx = this.ty = 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Inverts the matrix, causing it to perform the opposite transformation.\n\t * @method invert\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.invert = function() {\n\t\tvar a1 = this.a;\n\t\tvar b1 = this.b;\n\t\tvar c1 = this.c;\n\t\tvar d1 = this.d;\n\t\tvar tx1 = this.tx;\n\t\tvar n = a1*d1-b1*c1;\n\n\t\tthis.a = d1/n;\n\t\tthis.b = -b1/n;\n\t\tthis.c = -c1/n;\n\t\tthis.d = a1/n;\n\t\tthis.tx = (c1*this.ty-d1*tx1)/n;\n\t\tthis.ty = -(a1*this.ty-b1*tx1)/n;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns true if the matrix is an identity matrix.\n\t * @method isIdentity\n\t * @return {Boolean}\n\t **/\n\tp.isIdentity = function() {\n\t\treturn this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;\n\t};\n\t\n\t/**\n\t * Returns true if this matrix is equal to the specified matrix (all property values are equal).\n\t * @method equals\n\t * @param {Matrix2D} matrix The matrix to compare.\n\t * @return {Boolean}\n\t **/\n\tp.equals = function(matrix) {\n\t\treturn this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;\n\t};\n\n\t/**\n\t * Transforms a point according to this matrix.\n\t * @method transformPoint\n\t * @param {Number} x The x component of the point to transform.\n\t * @param {Number} y The y component of the point to transform.\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.\n\t * @return {Point} This matrix. Useful for chaining method calls.\n\t **/\n\tp.transformPoint = function(x, y, pt) {\n\t\tpt = pt||{};\n\t\tpt.x = x*this.a+y*this.c+this.tx;\n\t\tpt.y = x*this.b+y*this.d+this.ty;\n\t\treturn pt;\n\t};\n\n\t/**\n\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that these values\n\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\n\t * results.\n\t * @method decompose\n\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\n\t * @return {Object} The target, or a new generic object with the transform properties applied.\n\t*/\n\tp.decompose = function(target) {\n\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation even when scale is negative\n\t\tif (target == null) { target = {}; }\n\t\ttarget.x = this.tx;\n\t\ttarget.y = this.ty;\n\t\ttarget.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);\n\t\ttarget.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);\n\n\t\tvar skewX = Math.atan2(-this.c, this.d);\n\t\tvar skewY = Math.atan2(this.b, this.a);\n\n\t\tvar delta = Math.abs(1-skewX/skewY);\n\t\tif (delta < 0.00001) { // effectively identical, can use rotation:\n\t\t\ttarget.rotation = skewY/Matrix2D.DEG_TO_RAD;\n\t\t\tif (this.a < 0 && this.d >= 0) {\n\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\n\t\t\t}\n\t\t\ttarget.skewX = target.skewY = 0;\n\t\t} else {\n\t\t\ttarget.skewX = skewX/Matrix2D.DEG_TO_RAD;\n\t\t\ttarget.skewY = skewY/Matrix2D.DEG_TO_RAD;\n\t\t}\n\t\treturn target;\n\t};\n\t\n\t/**\n\t * Copies all properties from the specified matrix to this matrix.\n\t * @method copy\n\t * @param {Matrix2D} matrix The matrix to copy properties from.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t*/\n\tp.copy = function(matrix) {\n\t\treturn this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t};\n\n\t/**\n\t * Returns a clone of the Matrix2D instance.\n\t * @method clone\n\t * @return {Matrix2D} a clone of the Matrix2D instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Matrix2D (a=\"+this.a+\" b=\"+this.b+\" c=\"+this.c+\" d=\"+this.d+\" tx=\"+this.tx+\" ty=\"+this.ty+\")]\";\n\t};\n\n\t// this has to be populated after the class is defined:\n\tMatrix2D.identity = new Matrix2D();\n\n\n\tcreatejs.Matrix2D = Matrix2D;\n}());\n\n//##############################################################################\n// DisplayProps.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * Used for calculating and encapsulating display related properties.\n\t * @class DisplayProps\n\t * @param {Number} [visible=true] Visible value.\n\t * @param {Number} [alpha=1] Alpha value.\n\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t * @param {Number} [matrix] A transformation matrix. Defaults to a new identity matrix.\n\t * @constructor\n\t **/\n\tfunction DisplayProps(visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.setValues(visible, alpha, shadow, compositeOperation, matrix);\n\t\t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * Property representing the alpha that will be applied to a display object.\n\t\t * @property alpha\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Property representing the shadow that will be applied to a display object.\n\t\t * @property shadow\n\t\t * @type Shadow\n\t\t **/\n\t\n\t\t/**\n\t\t * Property representing the compositeOperation that will be applied to a display object.\n\t\t * You can find a list of valid composite operations at:\n\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\n\t\t * @property compositeOperation\n\t\t * @type String\n\t\t **/\n\t\t\n\t\t/**\n\t\t * Property representing the value for visible that will be applied to a display object.\n\t\t * @property visible\n\t\t * @type Boolean\n\t\t **/\n\t\t\n\t\t/**\n\t\t * The transformation matrix that will be applied to a display object.\n\t\t * @property matrix\n\t\t * @type Matrix2D\n\t\t **/\n\t}\n\tvar p = DisplayProps.prototype;\n\n// initialization:\n\t/**\n\t * Reinitializes the instance with the specified values.\n\t * @method setValues\n\t * @param {Number} [visible=true] Visible value.\n\t * @param {Number} [alpha=1] Alpha value.\n\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t * @param {Number} [matrix] A transformation matrix. Defaults to an identity matrix.\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.setValues = function (visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.visible = visible == null ? true : !!visible;\n\t\tthis.alpha = alpha == null ? 1 : alpha;\n\t\tthis.shadow = shadow;\n\t\tthis.compositeOperation = compositeOperation;\n\t\tthis.matrix = matrix || (this.matrix&&this.matrix.identity()) || new createjs.Matrix2D();\n\t\treturn this;\n\t};\n\n// public methods:\n\t/**\n\t * Appends the specified display properties. This is generally used to apply a child's properties its parent's.\n\t * @method append\n\t * @param {Boolean} visible desired visible value\n\t * @param {Number} alpha desired alpha value\n\t * @param {Shadow} shadow desired shadow value\n\t * @param {String} compositeOperation desired composite operation value\n\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.append = function(visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.alpha *= alpha;\n\t\tthis.shadow = shadow || this.shadow;\n\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\n\t\tthis.visible = this.visible && visible;\n\t\tmatrix&&this.matrix.appendMatrix(matrix);\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Prepends the specified display properties. This is generally used to apply a parent's properties to a child's.\n\t * For example, to get the combined display properties that would be applied to a child, you could use:\n\t * \n\t * \tvar o = myDisplayObject;\n\t * \tvar props = new createjs.DisplayProps();\n\t * \tdo {\n\t * \t\t// prepend each parent's props in turn:\n\t * \t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation, o.getMatrix());\n\t * \t} while (o = o.parent);\n\t * \t\n\t * @method prepend\n\t * @param {Boolean} visible desired visible value\n\t * @param {Number} alpha desired alpha value\n\t * @param {Shadow} shadow desired shadow value\n\t * @param {String} compositeOperation desired composite operation value\n\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.prepend = function(visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.alpha *= alpha;\n\t\tthis.shadow = this.shadow || shadow;\n\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\n\t\tthis.visible = this.visible && visible;\n\t\tmatrix&&this.matrix.prependMatrix(matrix);\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Resets this instance and its matrix to default values.\n\t * @method identity\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.identity = function() {\n\t\tthis.visible = true;\n\t\tthis.alpha = 1;\n\t\tthis.shadow = this.compositeOperation = null;\n\t\tthis.matrix.identity();\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a clone of the DisplayProps instance. Clones the associated matrix.\n\t * @method clone\n\t * @return {DisplayProps} a clone of the DisplayProps instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());\n\t};\n\n// private methods:\n\n\tcreatejs.DisplayProps = DisplayProps;\n})();\n\n//##############################################################################\n// Point.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Represents a point on a 2 dimensional x / y coordinate system.\n\t *\n\t * <h4>Example</h4>\n\t * \n\t *      var point = new createjs.Point(0, 100);\n\t * \n\t * @class Point\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @constructor\n\t **/\n\tfunction Point(x, y) {\n\t \tthis.setValues(x, y);\n\t \t\n\t \t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * X position.\n\t\t * @property x\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Y position.\n\t\t * @property y\n\t\t * @type Number\n\t\t **/\n\t}\n\tvar p = Point.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\t\n// public methods:\n\t/** \n\t * Sets the specified values on this instance.\n\t * @method setValues\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @return {Point} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.setValues = function(x, y) {\n\t\tthis.x = x||0;\n\t\tthis.y = y||0;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Copies all properties from the specified point to this point.\n\t * @method copy\n\t * @param {Point} point The point to copy properties from.\n\t * @return {Point} This point. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.copy = function(point) {\n\t\tthis.x = point.x;\n\t\tthis.y = point.y;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Point instance.\n\t * @method clone\n\t * @return {Point} a clone of the Point instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Point(this.x, this.y);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Point (x=\"+this.x+\" y=\"+this.y+\")]\";\n\t};\n\t\n\t\n\tcreatejs.Point = Point;\n}());\n\n//##############################################################################\n// Rectangle.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Represents a rectangle as defined by the points (x, y) and (x+width, y+height).\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var rect = new createjs.Rectangle(0, 0, 100, 100);\n\t *\n\t * @class Rectangle\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @param {Number} [width=0] The width of the Rectangle.\n\t * @param {Number} [height=0] The height of the Rectangle.\n\t * @constructor\n\t **/\n\tfunction Rectangle(x, y, width, height) {\n\t\tthis.setValues(x, y, width, height);\n\t\t\n\t\t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * X position.\n\t\t * @property x\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Y position.\n\t\t * @property y\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Width.\n\t\t * @property width\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Height.\n\t\t * @property height\n\t\t * @type Number\n\t\t **/\n\t}\n\tvar p = Rectangle.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// public methods:\n\t/** \n\t * Sets the specified values on this instance.\n\t * @method setValues\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @param {Number} [width=0] The width of the Rectangle.\n\t * @param {Number} [height=0] The height of the Rectangle.\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.setValues = function(x, y, width, height) {\n\t\t// don't forget to update docs in the constructor if these change:\n\t\tthis.x = x||0;\n\t\tthis.y = y||0;\n\t\tthis.width = width||0;\n\t\tthis.height = height||0;\n\t\treturn this;\n\t};\n\t\n\t/** \n\t * Extends the rectangle's bounds to include the described point or rectangle.\n\t * @method extend\n\t * @param {Number} x X position of the point or rectangle.\n\t * @param {Number} y Y position of the point or rectangle.\n\t * @param {Number} [width=0] The width of the rectangle.\n\t * @param {Number} [height=0] The height of the rectangle.\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.extend = function(x, y, width, height) {\n\t\twidth = width||0;\n\t\theight = height||0;\n\t\tif (x+width > this.x+this.width) { this.width = x+width-this.x; }\n\t\tif (y+height > this.y+this.height) { this.height = y+height-this.y; }\n\t\tif (x < this.x) { this.width += this.x-x; this.x = x; }\n\t\tif (y < this.y) { this.height += this.y-y; this.y = y; }\n\t\treturn this;\n\t};\n\t\n\t/** \n\t * Adds the specified padding to the rectangle's bounds.\n\t * @method pad\n\t * @param {Number} top\n\t * @param {Number} left\n\t * @param {Number} right\n\t * @param {Number} bottom\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.pad = function(top, left, bottom, right) {\n\t\tthis.x -= left;\n\t\tthis.y -= top;\n\t\tthis.width += left+right;\n\t\tthis.height += top+bottom;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Copies all properties from the specified rectangle to this rectangle.\n\t * @method copy\n\t * @param {Rectangle} rectangle The rectangle to copy properties from.\n\t * @return {Rectangle} This rectangle. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.copy = function(rectangle) {\n\t\treturn this.setValues(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n\t};\n\t\n\t/** \n\t * Returns true if this rectangle fully encloses the described point or rectangle.\n\t * @method contains\n\t * @param {Number} x X position of the point or rectangle.\n\t * @param {Number} y Y position of the point or rectangle.\n\t * @param {Number} [width=0] The width of the rectangle.\n\t * @param {Number} [height=0] The height of the rectangle.\n\t * @return {Boolean} True if the described point or rectangle is contained within this rectangle.\n\t*/\n\tp.contains = function(x, y, width, height) {\n\t\twidth = width||0;\n\t\theight = height||0;\n\t\treturn (x >= this.x && x+width <= this.x+this.width && y >= this.y && y+height <= this.y+this.height);\n\t};\n\t\n\t/** \n\t * Returns a new rectangle which contains this rectangle and the specified rectangle.\n\t * @method union\n\t * @param {Rectangle} rect The rectangle to calculate a union with.\n\t * @return {Rectangle} A new rectangle describing the union.\n\t*/\n\tp.union = function(rect) {\n\t\treturn this.clone().extend(rect.x, rect.y, rect.width, rect.height);\n\t};\n\t\n\t/** \n\t * Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,\n\t * or null if they do not intersect.\n\t * @method intersection\n\t * @param {Rectangle} rect The rectangle to calculate an intersection with.\n\t * @return {Rectangle} A new rectangle describing the intersection or null.\n\t*/\n\tp.intersection = function(rect) {\n\t\tvar x1 = rect.x, y1 = rect.y, x2 = x1+rect.width, y2 = y1+rect.height;\n\t\tif (this.x > x1) { x1 = this.x; }\n\t\tif (this.y > y1) { y1 = this.y; }\n\t\tif (this.x + this.width < x2) { x2 = this.x + this.width; }\n\t\tif (this.y + this.height < y2) { y2 = this.y + this.height; }\n\t\treturn (x2 <= x1 || y2 <= y1) ? null : new Rectangle(x1, y1, x2-x1, y2-y1);\n\t};\n\t\n\t/** \n\t * Returns true if the specified rectangle intersects (has any overlap) with this rectangle.\n\t * @method intersects\n\t * @param {Rectangle} rect The rectangle to compare.\n\t * @return {Boolean} True if the rectangles intersect.\n\t*/\n\tp.intersects = function(rect) {\n\t\treturn (rect.x <= this.x+this.width && this.x <= rect.x+rect.width && rect.y <= this.y+this.height && this.y <= rect.y + rect.height);\n\t};\n\t\n\t/** \n\t * Returns true if the width or height are equal or less than 0.\n\t * @method isEmpty\n\t * @return {Boolean} True if the rectangle is empty.\n\t*/\n\tp.isEmpty = function() {\n\t\treturn this.width <= 0 || this.height <= 0;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Rectangle instance.\n\t * @method clone\n\t * @return {Rectangle} a clone of the Rectangle instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Rectangle (x=\"+this.x+\" y=\"+this.y+\" width=\"+this.width+\" height=\"+this.height+\")]\";\n\t};\n\t\n\t\n\tcreatejs.Rectangle = Rectangle;\n}());\n\n//##############################################################################\n// ButtonHelper.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The ButtonHelper is a helper class to create interactive buttons from {{#crossLink \"MovieClip\"}}{{/crossLink}} or\n\t * {{#crossLink \"Sprite\"}}{{/crossLink}} instances. This class will intercept mouse events from an object, and\n\t * automatically call {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}},\n\t * to the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.\n\t *\n\t * The ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent\n\t * garbage collection.\n\t * \n\t * Note that over states will not work unless you call {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var helper = new createjs.ButtonHelper(myInstance, \"out\", \"over\", \"down\", false, myInstance, \"hit\");\n\t *      myInstance.addEventListener(\"click\", handleClick);\n\t *      function handleClick(event) {\n\t *          // Click Happened.\n\t *      }\n\t *\n\t * @class ButtonHelper\n\t * @param {Sprite|MovieClip} target The instance to manage.\n\t * @param {String} [outLabel=\"out\"] The label or animation to go to when the user rolls out of the button.\n\t * @param {String} [overLabel=\"over\"] The label or animation to go to when the user rolls over the button.\n\t * @param {String} [downLabel=\"down\"] The label or animation to go to when the user presses the button.\n\t * @param {Boolean} [play=false] If the helper should call \"gotoAndPlay\" or \"gotoAndStop\" on the button when changing\n\t * states.\n\t * @param {DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,\n\t * then the button's visible states will be used instead. Note that the same instance as the \"target\" argument can be\n\t * used for the hitState.\n\t * @param {String} [hitLabel] The label or animation on the hitArea instance that defines the hitArea bounds. If this is\n\t * null, then the default state of the hitArea will be used. *\n\t * @constructor\n\t */\n\tfunction ButtonHelper(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {\n\t\tif (!target.addEventListener) { return; }\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The target for this button helper.\n\t\t * @property target\n\t\t * @type MovieClip | Sprite\n\t\t * @readonly\n\t\t **/\n\t\tthis.target = target;\n\t\n\t\t/**\n\t\t * The label name or frame number to display when the user mouses out of the target. Defaults to \"over\".\n\t\t * @property overLabel\n\t\t * @type String | Number\n\t\t **/\n\t\tthis.overLabel = overLabel == null ? \"over\" : overLabel;\n\t\n\t\t/**\n\t\t * The label name or frame number to display when the user mouses over the target. Defaults to \"out\".\n\t\t * @property outLabel\n\t\t * @type String | Number\n\t\t **/\n\t\tthis.outLabel = outLabel == null ? \"out\" : outLabel;\n\t\n\t\t/**\n\t\t * The label name or frame number to display when the user presses on the target. Defaults to \"down\".\n\t\t * @property downLabel\n\t\t * @type String | Number\n\t\t **/\n\t\tthis.downLabel = downLabel == null ? \"down\" : downLabel;\n\t\n\t\t/**\n\t\t * If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop. Default is false.\n\t\t * @property play\n\t\t * @default false\n\t\t * @type Boolean\n\t\t **/\n\t\tthis.play = play;\n\t\t\n\t\t\n\t//  private properties\n\t\t/**\n\t\t * @property _isPressed\n\t\t * @type Boolean\n\t\t * @protected\n\t\t **/\n\t\tthis._isPressed = false;\n\t\n\t\t/**\n\t\t * @property _isOver\n\t\t * @type Boolean\n\t\t * @protected\n\t\t **/\n\t\tthis._isOver = false;\n\t\n\t\t/**\n\t\t * @property _enabled\n\t\t * @type Boolean\n\t\t * @protected\n\t\t **/\n\t\tthis._enabled = false;\n\t\t\n\t// setup:\n\t\ttarget.mouseChildren = false; // prevents issues when children are removed from the display list when state changes.\n\t\tthis.enabled = true;\n\t\tthis.handleEvent({});\n\t\tif (hitArea) {\n\t\t\tif (hitLabel) {\n\t\t\t\thitArea.actionsEnabled = false;\n\t\t\t\thitArea.gotoAndStop&&hitArea.gotoAndStop(hitLabel);\n\t\t\t}\n\t\t\ttarget.hitArea = hitArea;\n\t\t}\n\t}\n\tvar p = ButtonHelper.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\t\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n\t * @method setEnabled\n\t * @param {Boolean} value\n\t * @deprecated\n\t **/\n\tp.setEnabled = function(value) { // TODO: deprecated.\n\t\tif (value == this._enabled) { return; }\n\t\tvar o = this.target;\n\t\tthis._enabled = value;\n\t\tif (value) {\n\t\t\to.cursor = \"pointer\";\n\t\t\to.addEventListener(\"rollover\", this);\n\t\t\to.addEventListener(\"rollout\", this);\n\t\t\to.addEventListener(\"mousedown\", this);\n\t\t\to.addEventListener(\"pressup\", this);\n\t\t\tif (o._reset) { o.__reset = o._reset; o._reset = this._reset;}\n\t\t} else {\n\t\t\to.cursor = null;\n\t\t\to.removeEventListener(\"rollover\", this);\n\t\t\to.removeEventListener(\"rollout\", this);\n\t\t\to.removeEventListener(\"mousedown\", this);\n\t\t\to.removeEventListener(\"pressup\", this);\n\t\t\tif (o.__reset) { o._reset = o.__reset; delete(o.__reset); }\n\t\t}\n\t};\n\t/**\n\t * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n\t * @method getEnabled\n\t * @return {Boolean}\n\t * @deprecated\n\t **/\n\tp.getEnabled = function() {\n\t\treturn this._enabled;\n\t};\n\n\t/**\n\t * Enables or disables the button functionality on the target.\n\t * @property enabled\n\t * @type {Boolean}\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tenabled: { get: p.getEnabled, set: p.setEnabled }\n\t\t});\n\t} catch (e) {} // TODO: use Log\n\n\n// public methods:\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[ButtonHelper]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method handleEvent\n\t * @param {Object} evt The mouse event to handle.\n\t * @protected\n\t **/\n\tp.handleEvent = function(evt) {\n\t\tvar label, t = this.target, type = evt.type;\n\t\tif (type == \"mousedown\") {\n\t\t\tthis._isPressed = true;\n\t\t\tlabel = this.downLabel;\n\t\t} else if (type == \"pressup\") {\n\t\t\tthis._isPressed = false;\n\t\t\tlabel = this._isOver ? this.overLabel : this.outLabel;\n\t\t} else if (type == \"rollover\") {\n\t\t\tthis._isOver = true;\n\t\t\tlabel = this._isPressed ? this.downLabel : this.overLabel;\n\t\t} else { // rollout and default\n\t\t\tthis._isOver = false;\n\t\t\tlabel = this._isPressed ? this.overLabel : this.outLabel;\n\t\t}\n\t\tif (this.play) {\n\t\t\tt.gotoAndPlay&&t.gotoAndPlay(label);\n\t\t} else {\n\t\t\tt.gotoAndStop&&t.gotoAndStop(label);\n\t\t}\n\t};\n\t\n\t/**\n\t * Injected into target. Preserves the paused state through a reset.\n\t * @method _reset\n\t * @protected\n\t **/\n\tp._reset = function() {\n\t\t// TODO: explore better ways to handle this issue. This is hacky & disrupts object signatures.\n\t\tvar p = this.paused;\n\t\tthis.__reset();\n\t\tthis.paused = p;\n\t};\n\n\n\tcreatejs.ButtonHelper = ButtonHelper;\n}());\n\n//##############################################################################\n// Shadow.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * This class encapsulates the properties required to define a shadow to apply to a {{#crossLink \"DisplayObject\"}}{{/crossLink}}\n\t * via its <code>shadow</code> property.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myImage.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);\n\t *\n\t * @class Shadow\n\t * @constructor\n\t * @param {String} color The color of the shadow. This can be any valid CSS color value.\n\t * @param {Number} offsetX The x offset of the shadow in pixels.\n\t * @param {Number} offsetY The y offset of the shadow in pixels.\n\t * @param {Number} blur The size of the blurring effect.\n\t **/\n\tfunction Shadow(color, offsetX, offsetY, blur) {\n\t\t\n\t\t\n\t// public properties:\n\t\t/** \n\t\t * The color of the shadow. This can be any valid CSS color value.\n\t\t * @property color\n\t\t * @type String\n\t\t * @default null\n\t\t */\n\t\tthis.color = color||\"black\";\n\t\n\t\t/** The x offset of the shadow.\n\t\t * @property offsetX\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.offsetX = offsetX||0;\n\t\n\t\t/** The y offset of the shadow.\n\t\t * @property offsetY\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.offsetY = offsetY||0;\n\t\n\t\t/** The blur of the shadow.\n\t\t * @property blur\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.blur = blur||0;\n\t}\n\tvar p = Shadow.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// static public properties:\n\t/**\n\t * An identity shadow object (all properties are set to 0).\n\t * @property identity\n\t * @type Shadow\n\t * @static\n\t * @final\n\t * @readonly\n\t **/\n\tShadow.identity = new Shadow(\"transparent\", 0, 0, 0);\n\n\n// public methods:\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Shadow]\";\n\t};\n\n\t/**\n\t * Returns a clone of this Shadow instance.\n\t * @method clone\n\t * @return {Shadow} A clone of the current Shadow instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Shadow(this.color, this.offsetX, this.offsetY, this.blur);\n\t};\n\t\n\n\tcreatejs.Shadow = Shadow;\n}());\n\n//##############################################################################\n// SpriteSheet.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually\n\t * animation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100\n\t * images could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).\n\t *\n\t * The data passed to the SpriteSheet constructor defines:\n\t * <ol>\n\t * \t<li> The source image or images to use.</li>\n\t * \t<li> The positions of individual image frames.</li>\n\t * \t<li> Sequences of frames that form named animations. Optional.</li>\n\t * \t<li> The target playback framerate. Optional.</li>\n\t * </ol>\n\t * <h3>SpriteSheet Format</h3>\n\t * SpriteSheets are an object with two required properties (`images` and `frames`), and two optional properties\n\t * (`framerate` and `animations`). This makes them easy to define in javascript code, or in JSON.\n\t *\n\t * <h4>images</h4>\n\t * An array of source images. Images can be either an HTMlimage\n\t * instance, or a uri to an image. The former is recommended to control preloading.\n\t *\n\t * \timages: [image1, \"path/to/image2.png\"],\n\t *\n\t * <h4>frames</h4>\n\t * Defines the individual frames. There are two supported formats for frame data:\n\t * When all of the frames are the same size (in a grid), use an object with `width`, `height`, `regX`, `regY`,\n\t * and `count` properties.\n\t *\n\t * <ul>\n\t *  <li>`width` & `height` are required and specify the dimensions of the frames</li>\n\t *  <li>`regX` & `regY` indicate the registration point or \"origin\" of the frames</li>\n\t *  <li>`spacing` indicate the spacing between frames</li>\n\t *  <li>`margin` specify the margin around the image(s)</li>\n\t *  <li>`count` allows you to specify the total number of frames in the spritesheet; if omitted, this will\n\t *  be calculated based on the dimensions of the source images and the frames. Frames will be assigned\n\t *  indexes based on their position in the source images (left to right, top to bottom).</li>\n\t * </ul>\n\t *\n\t *  \tframes: {width:64, height:64, count:20, regX: 32, regY:64, spacing:0, margin:0}\n\t *\n\t * If the frames are of different sizes, use an array of frame definitions. Each definition is itself an array\n\t * with 4 required and 3 optional entries, in the order:\n\t *\n\t * <ul>\n\t *  <li>The first four, `x`, `y`, `width`, and `height` are required and define the frame rectangle.</li>\n\t *  <li>The fifth, `imageIndex`, specifies the index of the source image (defaults to 0)</li>\n\t *  <li>The last two, `regX` and `regY` specify the registration point of the frame</li>\n\t * </ul>\n\t *\n\t * \tframes: [\n\t * \t\t// x, y, width, height, imageIndex*, regX*, regY*\n\t * \t\t[64, 0, 96, 64],\n\t * \t\t[0, 0, 64, 64, 1, 32, 32]\n\t * \t\t// etc.\n\t * \t]\n\t *\n\t * <h4>animations</h4>\n\t * Optional. An object defining sequences of frames to play as named animations. Each property corresponds to an\n\t * animation of the same name. Each animation must specify the frames to play, and may\n\t * also include a relative playback `speed` (ex. 2 would playback at double speed, 0.5 at half), and\n\t * the name of the `next` animation to sequence to after it completes.\n\t *\n\t * There are three formats supported for defining the frames in an animation, which can be mixed and matched as appropriate:\n\t * <ol>\n\t * \t<li>for a single frame animation, you can simply specify the frame index\n\t *\n\t * \t\tanimations: {\n\t * \t\t\tsit: 7\n\t * \t\t}\n\t *\n\t * </li>\n\t * <li>\n\t *      for an animation of consecutive frames, you can use an array with two required, and two optional entries\n\t * \t\tin the order: `start`, `end`, `next`, and `speed`. This will play the frames from start to end inclusive.\n\t *\n\t * \t\tanimations: {\n\t * \t\t\t// start, end, next*, speed*\n\t * \t\t\trun: [0, 8],\n\t * \t\t\tjump: [9, 12, \"run\", 2]\n\t * \t\t}\n\t *\n\t *  </li>\n\t *  <li>\n\t *     for non-consecutive frames, you can use an object with a `frames` property defining an array of frame\n\t *     indexes to play in order. The object can also specify `next` and `speed` properties.\n\t *\n\t * \t\tanimations: {\n\t * \t\t\twalk: {\n\t * \t\t\t\tframes: [1,2,3,3,2,1]\n\t * \t\t\t},\n\t * \t\t\tshoot: {\n\t * \t\t\t\tframes: [1,4,5,6],\n\t * \t\t\t\tnext: \"walk\",\n\t * \t\t\t\tspeed: 0.5\n\t * \t\t\t}\n\t * \t\t}\n\t *\n\t *  </li>\n\t * </ol>\n\t * <strong>Note:</strong> the `speed` property was added in EaselJS 0.7.0. Earlier versions had a `frequency`\n\t * property instead, which was the inverse of `speed`. For example, a value of \"4\" would be 1/4 normal speed in\n\t * earlier versions, but is 4x normal speed in EaselJS 0.7.0+.\n\t *\n\t * <h4>framerate</h4>\n\t * Optional. Indicates the default framerate to play this spritesheet at in frames per second. See\n\t * {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} for more information.\n\t *\n\t * \t\tframerate: 20\n\t *\n\t * Note that the Sprite framerate will only work if the stage update method is provided with the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t * event generated by the {{#crossLink \"Ticker\"}}{{/crossLink}}.\n\t *\n\t * \t\tcreatejs.Ticker.on(\"tick\", handleTick);\n\t * \t\tfunction handleTick(event) {\n\t *\t\t\tstage.update(event);\n\t *\t\t}\n\t *\n\t * <h3>Example</h3>\n\t * To define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid with three\n\t * animations: \"stand\" showing the first frame, \"run\" looping frame 1-5 inclusive, and \"jump\" playing frame 6-8 and\n\t * sequencing back to run.\n\t *\n\t * \t\tvar data = {\n\t * \t\t\timages: [\"sprites.jpg\"],\n\t * \t\t\tframes: {width:50, height:50},\n\t * \t\t\tanimations: {\n\t * \t\t\t\tstand:0,\n\t * \t\t\t\trun:[1,5],\n\t * \t\t\t\tjump:[6,8,\"run\"]\n\t * \t\t\t}\n\t * \t\t};\n\t * \t\tvar spriteSheet = new createjs.SpriteSheet(data);\n\t * \t\tvar animation = new createjs.Sprite(spriteSheet, \"run\");\n\t *\n\t * <h3>Generating SpriteSheet Images</h3>\n\t * Spritesheets can be created manually by combining images in PhotoShop, and specifying the frame size or\n\t * coordinates manually, however there are a number of tools that facilitate this.\n\t * <ul>\n\t *     <li>Exporting SpriteSheets or HTML5 content from Flash Pro supports the EaselJS SpriteSheet format.</li>\n\t *     <li>The popular <a href=\"https://www.codeandweb.com/texturepacker/easeljs\" target=\"_blank\">Texture Packer</a> has\n\t *     EaselJS support.\n\t *     <li>SWF animations in Flash can be exported to SpriteSheets using <a href=\"http://createjs.com/zoe\" target=\"_blank\"></a></li>\n\t * </ul>\n\t *\n\t * <h3>Cross Origin Issues</h3>\n\t * <strong>Warning:</strong> Images loaded cross-origin will throw cross-origin security errors when interacted with\n\t * using:\n\t * <ul>\n\t *     <li>a mouse</li>\n\t *     <li>methods such as {{#crossLink \"Container/getObjectUnderPoint\"}}{{/crossLink}}</li>\n\t *     <li>Filters (see {{#crossLink \"Filter\"}}{{/crossLink}})</li>\n\t *     <li>caching (see {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}})</li>\n\t * </ul>\n\t * You can get around this by setting `crossOrigin` property on your images before passing them to EaselJS, or\n\t * setting the `crossOrigin` property on PreloadJS' LoadQueue or LoadItems.\n\t *\n\t * \t\tvar image = new Image();\n\t * \t\timg.crossOrigin=\"Anonymous\";\n\t * \t\timg.src = \"http://server-with-CORS-support.com/path/to/image.jpg\";\n\t *\n\t * If you pass string paths to SpriteSheets, they will not work cross-origin. The server that stores the image must\n\t * support cross-origin requests, or this will not work. For more information, check out\n\t * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\">CORS overview on MDN</a>.\n\t *\n\t * @class SpriteSheet\n\t * @constructor\n\t * @param {Object} data An object describing the SpriteSheet data.\n\t * @extends EventDispatcher\n\t **/\n\tfunction SpriteSheet(data) {\n\t\tthis.EventDispatcher_constructor();\n\n\n\t\t// public properties:\n\t\t/**\n\t\t * Indicates whether all images are finished loading.\n\t\t * @property complete\n\t\t * @type Boolean\n\t\t * @readonly\n\t\t **/\n\t\tthis.complete = true;\n\n\t\t/**\n\t\t * Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See the Sprite class\n\t\t * {{#crossLink \"Sprite/framerate:property\"}}{{/crossLink}} for more information.\n\t\t * @property framerate\n\t\t * @type Number\n\t\t **/\n\t\tthis.framerate = 0;\n\n\n\t\t// private properties:\n\t\t/**\n\t\t * @property _animations\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._animations = null;\n\n\t\t/**\n\t\t * @property _frames\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._frames = null;\n\n\t\t/**\n\t\t * @property _images\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._images = null;\n\n\t\t/**\n\t\t * @property _data\n\t\t * @protected\n\t\t * @type Object\n\t\t **/\n\t\tthis._data = null;\n\n\t\t/**\n\t\t * @property _loadCount\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._loadCount = 0;\n\n\t\t// only used for simple frame defs:\n\t\t/**\n\t\t * @property _frameHeight\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._frameHeight = 0;\n\n\t\t/**\n\t\t * @property _frameWidth\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._frameWidth = 0;\n\n\t\t/**\n\t\t * @property _numFrames\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._numFrames = 0;\n\n\t\t/**\n\t\t * @property _regX\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._regX = 0;\n\n\t\t/**\n\t\t * @property _regY\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._regY = 0;\n\n\t\t/**\n\t\t * @property _spacing\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._spacing = 0;\n\n\t\t/**\n\t\t * @property _margin\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._margin = 0;\n\n\t\t// setup:\n\t\tthis._parseData(data);\n\t}\n\tvar p = createjs.extend(SpriteSheet, createjs.EventDispatcher);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// events:\n\t/**\n\t * Dispatched when all images are loaded.  Note that this only fires if the images\n\t * were not fully loaded when the sprite sheet was initialized. You should check the complete property\n\t * to prior to adding a listener. Ex.\n\t *\n\t * \tvar sheet = new createjs.SpriteSheet(data);\n\t * \tif (!sheet.complete) {\n\t * \t\t// not preloaded, listen for the complete event:\n\t * \t\tsheet.addEventListener(\"complete\", handler);\n\t * \t}\n\t *\n\t * @event complete\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when getFrame is called with a valid frame index. This is primarily intended for use by {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}}\n\t * when doing on-demand rendering.\n\t * @event getframe\n\t * @param {Number} index The frame index.\n\t * @param {Object} frame The frame object that getFrame will return.\n\t */\n\n\t/**\n\t * Dispatched when an image encounters an error. A SpriteSheet will dispatch an error event for each image that\n\t * encounters an error, and will still dispatch a {{#crossLink \"SpriteSheet/complete:event\"}}{{/crossLink}}\n\t * event once all images are finished processing, even if an error is encountered.\n\t * @event error\n\t * @param {String} src The source of the image that failed to load.\n\t * @since 0.8.2\n\t */\n\n\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"SpriteSheet/animations:property\"}}{{/crossLink}} property instead.\n\t * @method getAnimations\n\t * @return {Array}\n\t * @deprecated\n\t **/\n\tp.getAnimations = function() {\n\t\treturn this._animations.slice();\n\t};\n\n\t/**\n\t * Returns an array of all available animation names available on this sprite sheet as strings.\n\t * @property animations\n\t * @type {Array}\n\t * @readonly\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tanimations: { get: p.getAnimations }\n\t\t});\n\t} catch (e) {}\n\n\n// public methods:\n\t/**\n\t * Returns the total number of frames in the specified animation, or in the whole sprite\n\t * sheet if the animation param is omitted. Returns 0 if the spritesheet relies on calculated frame counts, and\n\t * the images have not been fully loaded.\n\t * @method getNumFrames\n\t * @param {String} animation The name of the animation to get a frame count for.\n\t * @return {Number} The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.\n\t */\n\tp.getNumFrames = function(animation) {\n\t\tif (animation == null) {\n\t\t\treturn this._frames ? this._frames.length : this._numFrames || 0;\n\t\t} else {\n\t\t\tvar data = this._data[animation];\n\t\t\tif (data == null) { return 0; }\n\t\t\telse { return data.frames.length; }\n\t\t}\n\t};\n\n\t/**\n\t * Returns an object defining the specified animation. The returned object contains:<UL>\n\t * \t<li>frames: an array of the frame ids in the animation</li>\n\t * \t<li>speed: the playback speed for this animation</li>\n\t * \t<li>name: the name of the animation</li>\n\t * \t<li>next: the default animation to play next. If the animation loops, the name and next property will be the\n\t * \tsame.</li>\n\t * </UL>\n\t * @method getAnimation\n\t * @param {String} name The name of the animation to get.\n\t * @return {Object} a generic object with frames, speed, name, and next properties.\n\t **/\n\tp.getAnimation = function(name) {\n\t\treturn this._data[name];\n\t};\n\n\t/**\n\t * Returns an object specifying the image and source rect of the specified frame. The returned object has:<UL>\n\t * \t<li>an image property holding a reference to the image object in which the frame is found</li>\n\t * \t<li>a rect property containing a Rectangle instance which defines the boundaries for the frame within that\n\t * \timage.</li>\n\t * \t<li> A regX and regY property corresponding to the regX/Y values for the frame.\n\t * </UL>\n\t * @method getFrame\n\t * @param {Number} frameIndex The index of the frame.\n\t * @return {Object} a generic object with image and rect properties. Returns null if the frame does not exist.\n\t **/\n\tp.getFrame = function(frameIndex) {\n\t\tvar frame;\n\t\tif (this._frames && (frame=this._frames[frameIndex])) { return frame; }\n\t\treturn null;\n\t};\n\n\t/**\n\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the specified frame relative\n\t * to the origin. For example, a 90 x 70 frame with a regX of 50 and a regY of 40 would return:\n\t *\n\t * \t[x=-50, y=-40, width=90, height=70]\n\t *\n\t * @method getFrameBounds\n\t * @param {Number} frameIndex The index of the frame.\n\t * @param {Rectangle} [rectangle] A Rectangle instance to copy the values into. By default a new instance is created.\n\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.\n\t **/\n\tp.getFrameBounds = function(frameIndex, rectangle) {\n\t\tvar frame = this.getFrame(frameIndex);\n\t\treturn frame ? (rectangle||new createjs.Rectangle()).setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[SpriteSheet]\";\n\t};\n\n\t/**\n\t * SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.\n\t * @method clone\n\t **/\n\tp.clone = function() {\n\t\tthrow(\"SpriteSheet cannot be cloned.\")\n\t};\n\n// private methods:\n\t/**\n\t * @method _parseData\n\t * @param {Object} data An object describing the SpriteSheet data.\n\t * @protected\n\t **/\n\tp._parseData = function(data) {\n\t\tvar i,l,o,a;\n\t\tif (data == null) { return; }\n\n\t\tthis.framerate = data.framerate||0;\n\n\t\t// parse images:\n\t\tif (data.images && (l=data.images.length) > 0) {\n\t\t\ta = this._images = [];\n\t\t\tfor (i=0; i<l; i++) {\n\t\t\t\tvar img = data.images[i];\n\t\t\t\tif (typeof img == \"string\") {\n\t\t\t\t\tvar src = img;\n\t\t\t\t\timg = document.createElement(\"img\");\n\t\t\t\t\timg.src = src;\n\t\t\t\t}\n\t\t\t\ta.push(img);\n\t\t\t\tif (!img.getContext && !img.naturalWidth) {\n\t\t\t\t\tthis._loadCount++;\n\t\t\t\t\tthis.complete = false;\n\t\t\t\t\t(function(o, src) { img.onload = function() { o._handleImageLoad(src); } })(this, src);\n\t\t\t\t\t(function(o, src) { img.onerror = function() { o._handleImageError(src); } })(this, src);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// parse frames:\n\t\tif (data.frames == null) { // nothing\n\t\t} else if (Array.isArray(data.frames)) {\n\t\t\tthis._frames = [];\n\t\t\ta = data.frames;\n\t\t\tfor (i=0,l=a.length;i<l;i++) {\n\t\t\t\tvar arr = a[i];\n\t\t\t\tthis._frames.push({image:this._images[arr[4]?arr[4]:0], rect:new createjs.Rectangle(arr[0],arr[1],arr[2],arr[3]), regX:arr[5]||0, regY:arr[6]||0 });\n\t\t\t}\n\t\t} else {\n\t\t\to = data.frames;\n\t\t\tthis._frameWidth = o.width;\n\t\t\tthis._frameHeight = o.height;\n\t\t\tthis._regX = o.regX||0;\n\t\t\tthis._regY = o.regY||0;\n\t\t\tthis._spacing = o.spacing||0;\n\t\t\tthis._margin = o.margin||0;\n\t\t\tthis._numFrames = o.count;\n\t\t\tif (this._loadCount == 0) { this._calculateFrames(); }\n\t\t}\n\n\t\t// parse animations:\n\t\tthis._animations = [];\n\t\tif ((o=data.animations) != null) {\n\t\t\tthis._data = {};\n\t\t\tvar name;\n\t\t\tfor (name in o) {\n\t\t\t\tvar anim = {name:name};\n\t\t\t\tvar obj = o[name];\n\t\t\t\tif (typeof obj == \"number\") { // single frame\n\t\t\t\t\ta = anim.frames = [obj];\n\t\t\t\t} else if (Array.isArray(obj)) { // simple\n\t\t\t\t\tif (obj.length == 1) { anim.frames = [obj[0]]; }\n\t\t\t\t\telse {\n\t\t\t\t\t\tanim.speed = obj[3];\n\t\t\t\t\t\tanim.next = obj[2];\n\t\t\t\t\t\ta = anim.frames = [];\n\t\t\t\t\t\tfor (i=obj[0];i<=obj[1];i++) {\n\t\t\t\t\t\t\ta.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else { // complex\n\t\t\t\t\tanim.speed = obj.speed;\n\t\t\t\t\tanim.next = obj.next;\n\t\t\t\t\tvar frames = obj.frames;\n\t\t\t\t\ta = anim.frames = (typeof frames == \"number\") ? [frames] : frames.slice(0);\n\t\t\t\t}\n\t\t\t\tif (anim.next === true || anim.next === undefined) { anim.next = name; } // loop\n\t\t\t\tif (anim.next === false || (a.length < 2 && anim.next == name)) { anim.next = null; } // stop\n\t\t\t\tif (!anim.speed) { anim.speed = 1; }\n\t\t\t\tthis._animations.push(name);\n\t\t\t\tthis._data[name] = anim;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleImageLoad\n\t * @protected\n\t **/\n\tp._handleImageLoad = function(src) {\n\t\tif (--this._loadCount == 0) {\n\t\t\tthis._calculateFrames();\n\t\t\tthis.complete = true;\n\t\t\tthis.dispatchEvent(\"complete\");\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleImageError\n\t * @protected\n\t */\n\tp._handleImageError = function (src) {\n\t\tvar errorEvent = new createjs.Event(\"error\");\n\t\terrorEvent.src = src;\n\t\tthis.dispatchEvent(errorEvent);\n\n\t\t// Complete is still dispatched.\n\t\tif (--this._loadCount == 0) {\n\t\t\tthis.dispatchEvent(\"complete\");\n\t\t}\n\t};\n\n\t/**\n\t * @method _calculateFrames\n\t * @protected\n\t **/\n\tp._calculateFrames = function() {\n\t\tif (this._frames || this._frameWidth == 0) { return; }\n\n\t\tthis._frames = [];\n\n\t\tvar maxFrames = this._numFrames || 100000; // if we go over this, something is wrong.\n\t\tvar frameCount = 0, frameWidth = this._frameWidth, frameHeight = this._frameHeight;\n\t\tvar spacing = this._spacing, margin = this._margin;\n\t\t\n\t\timgLoop:\n\t\tfor (var i=0, imgs=this._images; i<imgs.length; i++) {\n\t\t\tvar img = imgs[i], imgW = img.width, imgH = img.height;\n\n\t\t\tvar y = margin;\n\t\t\twhile (y <= imgH-margin-frameHeight) {\n\t\t\t\tvar x = margin;\n\t\t\t\twhile (x <= imgW-margin-frameWidth) {\n\t\t\t\t\tif (frameCount >= maxFrames) { break imgLoop; }\n\t\t\t\t\tframeCount++;\n\t\t\t\t\tthis._frames.push({\n\t\t\t\t\t\t\timage: img,\n\t\t\t\t\t\t\trect: new createjs.Rectangle(x, y, frameWidth, frameHeight),\n\t\t\t\t\t\t\tregX: this._regX,\n\t\t\t\t\t\t\tregY: this._regY\n\t\t\t\t\t\t});\n\t\t\t\t\tx += frameWidth+spacing;\n\t\t\t\t}\n\t\t\t\ty += frameHeight+spacing;\n\t\t\t}\n\t\t}\n\t\tthis._numFrames = frameCount;\n\t};\n\n\n\tcreatejs.SpriteSheet = createjs.promote(SpriteSheet, \"EventDispatcher\");\n}());\n\n//##############################################################################\n// Graphics.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a\n\t * specified context. Note that you can use Graphics without any dependency on the EaselJS framework by calling {{#crossLink \"Graphics/draw\"}}{{/crossLink}}\n\t * directly, or it can be used with the {{#crossLink \"Shape\"}}{{/crossLink}} object to draw vector graphics within the\n\t * context of an EaselJS display list.\n\t *\n\t * There are two approaches to working with Graphics object: calling methods on a Graphics instance (the \"Graphics API\"), or\n\t * instantiating Graphics command objects and adding them to the graphics queue via {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n\t * The former abstracts the latter, simplifying beginning and ending paths, fills, and strokes.\n\t *\n\t *      var g = new createjs.Graphics();\n\t *      g.setStrokeStyle(1);\n\t *      g.beginStroke(\"#000000\");\n\t *      g.beginFill(\"red\");\n\t *      g.drawCircle(0,0,30);\n\t *\n\t * All drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,\n\t * the following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill:\n\t *\n\t *      myGraphics.beginStroke(\"red\").beginFill(\"blue\").drawRect(20, 20, 100, 50);\n\t *\n\t * Each graphics API call generates a command object (see below). The last command to be created can be accessed via\n\t * {{#crossLink \"Graphics/command:property\"}}{{/crossLink}}:\n\t *\n\t *      var fillCommand = myGraphics.beginFill(\"red\").command;\n\t *      // ... later, update the fill style/color:\n\t *      fillCommand.style = \"blue\";\n\t *      // or change it to a bitmap fill:\n\t *      fillCommand.bitmap(myImage);\n\t *\n\t * For more direct control of rendering, you can instantiate and append command objects to the graphics queue directly. In this case, you\n\t * need to manage path creation manually, and ensure that fill/stroke is applied to a defined path:\n\t *\n\t *      // start a new path. Graphics.beginCmd is a reusable BeginPath instance:\n\t *      myGraphics.append(createjs.Graphics.beginCmd);\n\t *      // we need to define the path before applying the fill:\n\t *      var circle = new createjs.Graphics.Circle(0,0,30);\n\t *      myGraphics.append(circle);\n\t *      // fill the path we just defined:\n\t *      var fill = new createjs.Graphics.Fill(\"red\");\n\t *      myGraphics.append(fill);\n\t *\n\t * These approaches can be used together, for example to insert a custom command:\n\t *\n\t *      myGraphics.beginFill(\"red\");\n\t *      var customCommand = new CustomSpiralCommand(etc);\n\t *      myGraphics.append(customCommand);\n\t *      myGraphics.beginFill(\"blue\");\n\t *      myGraphics.drawCircle(0, 0, 30);\n\t *\n\t * See {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more info on creating custom commands.\n\t *\n\t * <h4>Tiny API</h4>\n\t * The Graphics class also includes a \"tiny API\", which is one or two-letter methods that are shortcuts for all of the\n\t * Graphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS\n\t * to generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected\n\t * descriptions in the docs.\n\t *\n\t * <table>\n\t *     <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>\n\t *     <tr><td>mt</td><td>{{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} </td>\n\t *     <td>lt</td> <td>{{#crossLink \"Graphics/lineTo\"}}{{/crossLink}}</td></tr>\n\t *     <tr><td>a/at</td><td>{{#crossLink \"Graphics/arc\"}}{{/crossLink}} / {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} </td>\n\t *     <td>bt</td><td>{{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>qt</td><td>{{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} (also curveTo)</td>\n\t *     <td>r</td><td>{{#crossLink \"Graphics/rect\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>cp</td><td>{{#crossLink \"Graphics/closePath\"}}{{/crossLink}} </td>\n\t *     <td>c</td><td>{{#crossLink \"Graphics/clear\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>f</td><td>{{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} </td>\n\t *     <td>lf</td><td>{{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>rf</td><td>{{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} </td>\n\t *     <td>bf</td><td>{{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>ef</td><td>{{#crossLink \"Graphics/endFill\"}}{{/crossLink}} </td>\n\t *     <td>ss / sd</td><td>{{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} / {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>s</td><td>{{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} </td>\n\t *     <td>ls</td><td>{{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>rs</td><td>{{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} </td>\n\t *     <td>bs</td><td>{{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>es</td><td>{{#crossLink \"Graphics/endStroke\"}}{{/crossLink}} </td>\n\t *     <td>dr</td><td>{{#crossLink \"Graphics/drawRect\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>rr</td><td>{{#crossLink \"Graphics/drawRoundRect\"}}{{/crossLink}} </td>\n\t *     <td>rc</td><td>{{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>dc</td><td>{{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} </td>\n\t *     <td>de</td><td>{{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>dp</td><td>{{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} </td>\n\t *     <td>p</td><td>{{#crossLink \"Graphics/decodePath\"}}{{/crossLink}} </td></tr>\n\t * </table>\n\t *\n\t * Here is the above example, using the tiny API instead.\n\t *\n\t *      myGraphics.s(\"red\").f(\"blue\").r(20, 20, 100, 50);\n\t *\n\t * @class Graphics\n\t * @constructor\n\t **/\n\tfunction Graphics() {\n\n\n\t// public properties\n\t\t/**\n\t\t * Holds a reference to the last command that was created or appended. For example, you could retain a reference\n\t\t * to a Fill command in order to dynamically update the color later by using:\n\t\t *\n\t\t * \t\tvar myFill = myGraphics.beginFill(\"red\").command;\n\t\t * \t\t// update color later:\n\t\t * \t\tmyFill.style = \"yellow\";\n\t\t *\n\t\t * @property command\n\t\t * @type Object\n\t\t **/\n\t\tthis.command = null;\n\n\n\t// private properties\n\t\t/**\n\t\t * @property _stroke\n\t\t * @protected\n\t\t * @type {Stroke}\n\t\t **/\n\t\tthis._stroke = null;\n\n\t\t/**\n\t\t * @property _strokeStyle\n\t\t * @protected\n\t\t * @type {StrokeStyle}\n\t\t **/\n\t\tthis._strokeStyle = null;\n\t\t\n\t\t/**\n\t\t * @property _oldStrokeStyle\n\t\t * @protected\n\t\t * @type {StrokeStyle}\n\t\t **/\n\t\tthis._oldStrokeStyle = null;\n\t\t\n\t\t/**\n\t\t * @property _strokeDash\n\t\t * @protected\n\t\t * @type {StrokeDash}\n\t\t **/\n\t\tthis._strokeDash = null;\n\t\t\n\t\t/**\n\t\t * @property _oldStrokeDash\n\t\t * @protected\n\t\t * @type {StrokeDash}\n\t\t **/\n\t\tthis._oldStrokeDash = null;\n\n\t\t/**\n\t\t * @property _strokeIgnoreScale\n\t\t * @protected\n\t\t * @type Boolean\n\t\t **/\n\t\tthis._strokeIgnoreScale = false;\n\n\t\t/**\n\t\t * @property _fill\n\t\t * @protected\n\t\t * @type {Fill}\n\t\t **/\n\t\tthis._fill = null;\n\n\t\t/**\n\t\t * @property _instructions\n\t\t * @protected\n\t\t * @type {Array}\n\t\t **/\n\t\tthis._instructions = [];\n\n\t\t/**\n\t\t * Indicates the last instruction index that was committed.\n\t\t * @property _commitIndex\n\t\t * @protected\n\t\t * @type {Number}\n\t\t **/\n\t\tthis._commitIndex = 0;\n\n\t\t/**\n\t\t * Uncommitted instructions.\n\t\t * @property _activeInstructions\n\t\t * @protected\n\t\t * @type {Array}\n\t\t **/\n\t\tthis._activeInstructions = [];\n\n\t\t/**\n\t\t * This indicates that there have been changes to the activeInstruction list since the last updateInstructions call.\n\t\t * @property _dirty\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tthis._dirty = false;\n\n\t\t/**\n\t\t * Index to draw from if a store operation has happened.\n\t\t * @property _storeIndex\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis._storeIndex = 0;\n\n\t// setup:\n\t\tthis.clear();\n\t}\n\tvar p = Graphics.prototype;\n\tvar G = Graphics; // shortcut\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// static public methods:\n\t/**\n\t * Returns a CSS compatible color string based on the specified RGB numeric color values in the format\n\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\n\t *\n\t *      createjs.Graphics.getRGB(50, 100, 150, 0.5);\n\t *      // Returns \"rgba(50,100,150,0.5)\"\n\t *\n\t * It also supports passing a single hex color value as the first param, and an optional alpha value as the second\n\t * param. For example,\n\t *\n\t *      createjs.Graphics.getRGB(0xFF00FF, 0.2);\n\t *      // Returns \"rgba(255,0,255,0.2)\"\n\t *\n\t * @method getRGB\n\t * @static\n\t * @param {Number} r The red component for the color, between 0 and 0xFF (255).\n\t * @param {Number} g The green component for the color, between 0 and 0xFF (255).\n\t * @param {Number} b The blue component for the color, between 0 and 0xFF (255).\n\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t * @return {String} A CSS compatible color string based on the specified RGB numeric color values in the format\n\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\".\n\t **/\n\tGraphics.getRGB = function(r, g, b, alpha) {\n\t\tif (r != null && b == null) {\n\t\t\talpha = g;\n\t\t\tb = r&0xFF;\n\t\t\tg = r>>8&0xFF;\n\t\t\tr = r>>16&0xFF;\n\t\t}\n\t\tif (alpha == null) {\n\t\t\treturn \"rgb(\"+r+\",\"+g+\",\"+b+\")\";\n\t\t} else {\n\t\t\treturn \"rgba(\"+r+\",\"+g+\",\"+b+\",\"+alpha+\")\";\n\t\t}\n\t};\n\n\t/**\n\t * Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\",\n\t * or if alpha is null then in the format \"hsl(360,100,100)\".\n\t *\n\t *      createjs.Graphics.getHSL(150, 100, 70);\n\t *      // Returns \"hsl(150,100,70)\"\n\t *\n\t * @method getHSL\n\t * @static\n\t * @param {Number} hue The hue component for the color, between 0 and 360.\n\t * @param {Number} saturation The saturation component for the color, between 0 and 100.\n\t * @param {Number} lightness The lightness component for the color, between 0 and 100.\n\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t * @return {String} A CSS compatible color string based on the specified HSL numeric color values in the format\n\t * \"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\".\n\t **/\n\tGraphics.getHSL = function(hue, saturation, lightness, alpha) {\n\t\tif (alpha == null) {\n\t\t\treturn \"hsl(\"+(hue%360)+\",\"+saturation+\"%,\"+lightness+\"%)\";\n\t\t} else {\n\t\t\treturn \"hsla(\"+(hue%360)+\",\"+saturation+\"%,\"+lightness+\"%,\"+alpha+\")\";\n\t\t}\n\t};\n\n\n// static properties:\n\t/**\n\t * A reusable instance of {{#crossLink \"Graphics/BeginPath\"}}{{/crossLink}} to avoid\n\t * unnecessary instantiation.\n\t * @property beginCmd\n\t * @type {Graphics.BeginPath}\n\t * @static\n\t **/\n\t // defined at the bottom of this file.\n\n\t/**\n\t * Map of Base64 characters to values. Used by {{#crossLink \"Graphics/decodePath\"}}{{/crossLink}}.\n\t * @property BASE_64\n\t * @static\n\t * @final\n\t * @readonly\n\t * @type {Object}\n\t **/\n\tGraphics.BASE_64 = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8,\"J\":9,\"K\":10,\"L\":11,\"M\":12,\"N\":13,\"O\":14,\"P\":15,\"Q\":16,\"R\":17,\"S\":18,\"T\":19,\"U\":20,\"V\":21,\"W\":22,\"X\":23,\"Y\":24,\"Z\":25,\"a\":26,\"b\":27,\"c\":28,\"d\":29,\"e\":30,\"f\":31,\"g\":32,\"h\":33,\"i\":34,\"j\":35,\"k\":36,\"l\":37,\"m\":38,\"n\":39,\"o\":40,\"p\":41,\"q\":42,\"r\":43,\"s\":44,\"t\":45,\"u\":46,\"v\":47,\"w\":48,\"x\":49,\"y\":50,\"z\":51,\"0\":52,\"1\":53,\"2\":54,\"3\":55,\"4\":56,\"5\":57,\"6\":58,\"7\":59,\"8\":60,\"9\":61,\"+\":62,\"/\":63};\n\n\t/**\n\t * Maps numeric values for the caps parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n\t * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\t * \"butt\", 1 to \"round\", and 2 to \"square\".\n\t * For example, to set the line caps to \"square\":\n\t *\n\t *      myGraphics.ss(16, 2);\n\t *\n\t * @property STROKE_CAPS_MAP\n\t * @static\n\t * @final\n\t * @readonly\n\t * @type {Array}\n\t **/\n\tGraphics.STROKE_CAPS_MAP = [\"butt\", \"round\", \"square\"];\n\n\t/**\n\t * Maps numeric values for the joints parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n\t * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\t * \"miter\", 1 to \"round\", and 2 to \"bevel\".\n\t * For example, to set the line joints to \"bevel\":\n\t *\n\t *      myGraphics.ss(16, 0, 2);\n\t *\n\t * @property STROKE_JOINTS_MAP\n\t * @static\n\t * @final\n\t * @readonly\n\t * @type {Array}\n\t **/\n\tGraphics.STROKE_JOINTS_MAP = [\"miter\", \"round\", \"bevel\"];\n\n\t/**\n\t * @property _ctx\n\t * @static\n\t * @protected\n\t * @type {CanvasRenderingContext2D}\n\t **/\n\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\tif (canvas.getContext) {\n\t\tGraphics._ctx = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n\n\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"Graphics/instructions:property\"}}{{/crossLink}} property instead.\n\t * @method getInstructions\n\t * @return {Array}\n\t * @deprecated\n\t **/\n\tp.getInstructions = function() {\n\t\tthis._updateInstructions();\n\t\treturn this._instructions;\n\t};\n\n\t/**\n\t * Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)\n\t * Modifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.\n\t *\n\t * This property is mainly intended for introspection of the instructions (ex. for graphics export).\n\t * @property instructions\n\t * @type {Array}\n\t * @readonly\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tinstructions: { get: p.getInstructions }\n\t\t});\n\t} catch (e) {}\n\n\n// public methods:\n\t/**\n\t * Returns true if this Graphics instance has no drawing commands.\n\t * @method isEmpty\n\t * @return {Boolean} Returns true if this Graphics instance has no drawing commands.\n\t **/\n\tp.isEmpty = function() {\n\t\treturn !(this._instructions.length || this._activeInstructions.length);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Object} data Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.\n\t **/\n\tp.draw = function(ctx, data) {\n\t\tthis._updateInstructions();\n\t\tvar instr = this._instructions;\n\t\tfor (var i=this._storeIndex, l=instr.length; i<l; i++) {\n\t\t\tinstr[i].exec(ctx, data);\n\t\t}\n\t};\n\n\t/**\n\t * Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and\n\t * stroke descriptions. Used for <code>DisplayObject.mask</code> to draw the clipping path, for example.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method drawAsPath\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t **/\n\tp.drawAsPath = function(ctx) {\n\t\tthis._updateInstructions();\n\t\tvar instr, instrs = this._instructions;\n\t\tfor (var i=this._storeIndex, l=instrs.length; i<l; i++) {\n\t\t\t// the first command is always a beginPath command.\n\t\t\tif ((instr = instrs[i]).path !== false) { instr.exec(ctx); }\n\t\t}\n\t};\n\n\n// public methods that map directly to context 2D calls:\n\t/**\n\t * Moves the drawing point to the specified position. A tiny API method \"mt\" also exists.\n\t * @method moveTo\n\t * @param {Number} x The x coordinate the drawing point should move to.\n\t * @param {Number} y The y coordinate the drawing point should move to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t * @chainable\n\t **/\n\tp.moveTo = function(x, y) {\n\t\treturn this.append(new G.MoveTo(x,y), true);\n\t};\n\n\t/**\n\t * Draws a line from the current drawing point to the specified position, which become the new current drawing\n\t * point. Note that you *must* call {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} before the first `lineTo()`.\n\t * A tiny API method \"lt\" also exists.\n\t *\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\n\t * whatwg spec</a>.\n\t * @method lineTo\n\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.lineTo = function(x, y) {\n\t\treturn this.append(new G.LineTo(x,y));\n\t};\n\n\t/**\n\t * Draws an arc with the specified control points and radius.  For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\n\t * whatwg spec</a>. A tiny API method \"at\" also exists.\n\t * @method arcTo\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.arcTo = function(x1, y1, x2, y2, radius) {\n\t\treturn this.append(new G.ArcTo(x1, y1, x2, y2, radius));\n\t};\n\n\t/**\n\t * Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For\n\t * example, to draw a full circle with a radius of 20 centered at (100, 100):\n\t *\n\t *      arc(100, 100, 20, 0, Math.PI*2);\n\t *\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.\n\t * A tiny API method \"a\" also exists.\n\t * @method arc\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle Measured in radians.\n\t * @param {Number} endAngle Measured in radians.\n\t * @param {Boolean} anticlockwise\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\treturn this.append(new G.Arc(x, y, radius, startAngle, endAngle, anticlockwise));\n\t};\n\n\t/**\n\t * Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\n\t * information, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\n\t * whatwg spec</a>. A tiny API method \"qt\" also exists.\n\t * @method quadraticCurveTo\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.quadraticCurveTo = function(cpx, cpy, x, y) {\n\t\treturn this.append(new G.QuadraticCurveTo(cpx, cpy, x, y));\n\t};\n\n\t/**\n\t * Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x,\n\t * cp2y). For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\n\t * whatwg spec</a>. A tiny API method \"bt\" also exists.\n\t * @method bezierCurveTo\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\treturn this.append(new G.BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));\n\t};\n\n\t/**\n\t * Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\n\t * whatwg spec</a>. A tiny API method \"r\" also exists.\n\t * @method rect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.rect = function(x, y, w, h) {\n\t\treturn this.append(new G.Rect(x, y, w, h));\n\t};\n\n\t/**\n\t * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\n\t * since the fill or stroke was last set. A tiny API method \"cp\" also exists.\n\t * @method closePath\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.closePath = function() {\n\t\treturn this._activeInstructions.length ? this.append(new G.ClosePath()) : this;\n\t};\n\n\n// public methods that roughly map to Flash graphics APIs:\n\t/**\n\t * Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need\n\t * to be redefined to draw shapes following a clear call. A tiny API method \"c\" also exists.\n\t * @method clear\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.clear = function() {\n\t\tthis._instructions.length = this._activeInstructions.length = this._commitIndex = 0;\n\t\tthis._strokeStyle = this._oldStrokeStyle = this._stroke = this._fill = this._strokeDash = this._oldStrokeDash = null;\n\t\tthis._dirty = this._strokeIgnoreScale = false;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Begins a fill with the specified color. This ends the current sub-path. A tiny API method \"f\" also exists.\n\t * @method beginFill\n\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no fill.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginFill = function(color) {\n\t\treturn this._setFill(color ? new G.Fill(color) : null);\n\t};\n\n\t/**\n\t * Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t * square to display it:\n\t *\n\t *      myGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t *\n\t * A tiny API method \"lf\" also exists.\n\t * @method beginLinearGradientFill\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t * drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t * the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginLinearGradientFill = function(colors, ratios, x0, y0, x1, y1) {\n\t\treturn this._setFill(new G.Fill().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t};\n\n\t/**\n\t * Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to\n\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:\n\t *\n\t *      myGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);\n\t *\n\t * A tiny API method \"rf\" also exists.\n\t * @method beginRadialGradientFill\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginRadialGradientFill = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\treturn this._setFill(new G.Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t};\n\n\t/**\n\t * Begins a pattern fill using the specified image. This ends the current sub-path. A tiny API method \"bf\" also\n\t * exists.\n\t * @method beginBitmapFill\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t * will be applied relative to the parent transform.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginBitmapFill = function(image, repetition, matrix) {\n\t\treturn this._setFill(new G.Fill(null,matrix).bitmap(image, repetition));\n\t};\n\n\t/**\n\t * Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.\n\t * A tiny API method \"ef\" also exists.\n\t * @method endFill\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.endFill = function() {\n\t\treturn this.beginFill();\n\t};\n\n\t/**\n\t * Sets the stroke style. Like all drawing methods, this can be chained, so you can define\n\t * the stroke style and color in a single line of code like so:\n\t *\n\t * \tmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");\n\t *\n\t * A tiny API method \"ss\" also exists.\n\t * @method setStrokeStyle\n\t * @param {Number} thickness The width of the stroke.\n\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t * the tiny API.\n\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t * for use with the tiny API.\n\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t * controls at what point a mitered joint will be clipped.\n\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t * of active transformations.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.setStrokeStyle = function(thickness, caps, joints, miterLimit, ignoreScale) {\n\t\tthis._updateInstructions(true);\n\t\tthis._strokeStyle = this.command = new G.StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale);\n\n\t\t// ignoreScale lives on Stroke, not StrokeStyle, so we do a little trickery:\n\t\tif (this._stroke) { this._stroke.ignoreScale = ignoreScale; }\n\t\tthis._strokeIgnoreScale = ignoreScale;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Sets or clears the stroke dash pattern.\n\t *\n\t * \tmyGraphics.setStrokeDash([20, 10], 0);\n\t *\n\t * A tiny API method `sd` also exists.\n\t * @method setStrokeDash\n\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t * For example, `[20,10]` would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t * Passing null or an empty array will clear the existing stroke dash.\n\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.setStrokeDash = function(segments, offset) {\n\t\tthis._updateInstructions(true);\n\t\tthis._strokeDash = this.command = new G.StrokeDash(segments, offset);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Begins a stroke with the specified color. This ends the current sub-path. A tiny API method \"s\" also exists.\n\t * @method beginStroke\n\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no stroke.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginStroke = function(color) {\n\t\treturn this._setStroke(color ? new G.Stroke(color) : null);\n\t};\n\n\t/**\n\t * Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t * square to display it:\n\t *\n\t *      myGraphics.setStrokeStyle(10).\n\t *          beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t *\n\t * A tiny API method \"ls\" also exists.\n\t * @method beginLinearGradientStroke\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginLinearGradientStroke = function(colors, ratios, x0, y0, x1, y1) {\n\t\treturn this._setStroke(new G.Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t};\n\n\t/**\n\t * Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to\n\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:\n\t *\n\t *      myGraphics.setStrokeStyle(10)\n\t *          .beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50)\n\t *          .drawRect(50, 90, 150, 110);\n\t *\n\t * A tiny API method \"rs\" also exists.\n\t * @method beginRadialGradientStroke\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t * to 100%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginRadialGradientStroke = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\treturn this._setStroke(new G.Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t};\n\n\t/**\n\t * Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,\n\t * strokes do not currently support a matrix parameter due to limitations in the canvas API. A tiny API method \"bs\"\n\t * also exists.\n\t * @method beginBitmapStroke\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginBitmapStroke = function(image, repetition) {\n\t\t// NOTE: matrix is not supported for stroke because transforms on strokes also affect the drawn stroke width.\n\t\treturn this._setStroke(new G.Stroke().bitmap(image, repetition));\n\t};\n\n\t/**\n\t * Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.\n\t * A tiny API method \"es\" also exists.\n\t * @method endStroke\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.endStroke = function() {\n\t\treturn this.beginStroke();\n\t};\n\n\t/**\n\t * Maps the familiar ActionScript <code>curveTo()</code> method to the functionally similar {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}}\n\t * method.\n\t * @method quadraticCurveTo\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.curveTo = p.quadraticCurveTo;\n\n\t/**\n\t *\n\t * Maps the familiar ActionScript <code>drawRect()</code> method to the functionally similar {{#crossLink \"Graphics/rect\"}}{{/crossLink}}\n\t * method.\n\t * @method drawRect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawRect = p.rect;\n\n\t/**\n\t * Draws a rounded rectangle with all corners with the specified radius.\n\t * @method drawRoundRect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radius Corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawRoundRect = function(x, y, w, h, radius) {\n\t\treturn this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);\n\t};\n\n\t/**\n\t * Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii. A tiny API\n\t * method \"rc\" also exists.\n\t * @method drawRoundRectComplex\n\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t * @param {Number} w The width of the round rect.\n\t * @param {Number} h The height of the round rect.\n\t * @param {Number} radiusTL Top left corner radius.\n\t * @param {Number} radiusTR Top right corner radius.\n\t * @param {Number} radiusBR Bottom right corner radius.\n\t * @param {Number} radiusBL Bottom left corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawRoundRectComplex = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\treturn this.append(new G.RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));\n\t};\n\n\t/**\n\t * Draws a circle with the specified radius at (x, y).\n\t *\n\t *      var g = new createjs.Graphics();\n\t *\t    g.setStrokeStyle(1);\n\t *\t    g.beginStroke(createjs.Graphics.getRGB(0,0,0));\n\t *\t    g.beginFill(createjs.Graphics.getRGB(255,0,0));\n\t *\t    g.drawCircle(0,0,3);\n\t *\n\t *\t    var s = new createjs.Shape(g);\n\t *\t\ts.x = 100;\n\t *\t\ts.y = 100;\n\t *\n\t *\t    stage.addChild(s);\n\t *\t    stage.update();\n\t *\n\t * A tiny API method \"dc\" also exists.\n\t * @method drawCircle\n\t * @param {Number} x x coordinate center point of circle.\n\t * @param {Number} y y coordinate center point of circle.\n\t * @param {Number} radius Radius of circle.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawCircle = function(x, y, radius) {\n\t\treturn this.append(new G.Circle(x, y, radius));\n\t};\n\n\t/**\n\t * Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}},\n\t * except the width and height can be different. A tiny API method \"de\" also exists.\n\t * @method drawEllipse\n\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from center.\n\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from the center.\n\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t * number.\n\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawEllipse = function(x, y, w, h) {\n\t\treturn this.append(new G.Ellipse(x, y, w, h));\n\t};\n\n\t/**\n\t * Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of\n\t * points. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a\n\t * radius of 50:\n\t *\n\t *      myGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90);\n\t *      // Note: -90 makes the first point vertical\n\t *\n\t * A tiny API method \"dp\" also exists.\n\t *\n\t * @method drawPolyStar\n\t * @param {Number} x Position of the center of the shape.\n\t * @param {Number} y Position of the center of the shape.\n\t * @param {Number} radius The outer radius of the shape.\n\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t * directly to the right of the center.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawPolyStar = function(x, y, radius, sides, pointSize, angle) {\n\t\treturn this.append(new G.PolyStar(x, y, radius, sides, pointSize, angle));\n\t};\n\n\t// TODO: deprecated.\n\t/**\n\t * Removed in favour of using custom command objects with {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n\t * @method inject\n\t * @deprecated\n\t **/\n\n\t/**\n\t * Appends a graphics command object to the graphics queue. Command objects expose an \"exec\" method\n\t * that accepts two parameters: the Context2D to operate on, and an arbitrary data object passed into\n\t * {{#crossLink \"Graphics/draw\"}}{{/crossLink}}. The latter will usually be the Shape instance that called draw.\n\t *\n\t * This method is used internally by Graphics methods, such as drawCircle, but can also be used directly to insert\n\t * built-in or custom graphics commands. For example:\n\t *\n\t * \t\t// attach data to our shape, so we can access it during the draw:\n\t * \t\tmyShape.color = \"red\";\n\t *\n\t * \t\t// append a Circle command object:\n\t * \t\tmyShape.graphics.append(new createjs.Graphics.Circle(50, 50, 30));\n\t *\n\t * \t\t// append a custom command object with an exec method that sets the fill style\n\t * \t\t// based on the shape's data, and then fills the circle.\n\t * \t\tmyShape.graphics.append({exec:function(ctx, shape) {\n\t * \t\t\tctx.fillStyle = shape.color;\n\t * \t\t\tctx.fill();\n\t * \t\t}});\n\t *\n\t * @method append\n\t * @param {Object} command A graphics command object exposing an \"exec\" method.\n\t * @param {boolean} clean The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.append = function(command, clean) {\n\t\tthis._activeInstructions.push(command);\n\t\tthis.command = command;\n\t\tif (!clean) { this._dirty = true; }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Decodes a compact encoded path string into a series of draw instructions.\n\t * This format is not intended to be human readable, and is meant for use by authoring tools.\n\t * The format uses a base64 character set, with each character representing 6 bits, to define a series of draw\n\t * commands.\n\t *\n\t * Each command is comprised of a single \"header\" character followed by a variable number of alternating x and y\n\t * position values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the\n\t * type of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4\n\t * indicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the\n\t * latter. Bits 5 and 6 are currently unused.\n\t *\n\t * Following the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)\n\t * parameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the\n\t * 4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed\n\t * by an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the\n\t * case of move operations which are absolute, this value is a delta from the previous x or y position (as\n\t * appropriate).\n\t *\n\t * For example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\n\t * <br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per\n\t * parameter.\n\t * <br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits\n\t * indicate 1500 tenths of a pixel.\n\t * <br />AA - 000000000000. Absolute y position of 0.\n\t * <br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\n\t * <br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to\n\t * provide an absolute position of +150.0px.\n\t * <br />AAA - 000000000000000000. A y delta value of 0.\n\t *\n\t * A tiny API method \"p\" also exists.\n\t * @method decodePath\n\t * @param {String} str The path string to decode.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.decodePath = function(str) {\n\t\tvar instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];\n\t\tvar paramCount = [2, 2, 4, 6, 0];\n\t\tvar i=0, l=str.length;\n\t\tvar params = [];\n\t\tvar x=0, y=0;\n\t\tvar base64 = Graphics.BASE_64;\n\n\t\twhile (i<l) {\n\t\t\tvar c = str.charAt(i);\n\t\t\tvar n = base64[c];\n\t\t\tvar fi = n>>3; // highest order bits 1-3 code for operation.\n\t\t\tvar f = instructions[fi];\n\t\t\t// check that we have a valid instruction & that the unused bits are empty:\n\t\t\tif (!f || (n&3)) { throw(\"bad path data (@\"+i+\"): \"+c); }\n\t\t\tvar pl = paramCount[fi];\n\t\t\tif (!fi) { x=y=0; } // move operations reset the position.\n\t\t\tparams.length = 0;\n\t\t\ti++;\n\t\t\tvar charCount = (n>>2&1)+2;  // 4th header bit indicates number size for this operation.\n\t\t\tfor (var p=0; p<pl; p++) {\n\t\t\t\tvar num = base64[str.charAt(i)];\n\t\t\t\tvar sign = (num>>5) ? -1 : 1;\n\t\t\t\tnum = ((num&31)<<6)|(base64[str.charAt(i+1)]);\n\t\t\t\tif (charCount == 3) { num = (num<<6)|(base64[str.charAt(i+2)]); }\n\t\t\t\tnum = sign*num/10;\n\t\t\t\tif (p%2) { x = (num += x); }\n\t\t\t\telse { y = (num += y); }\n\t\t\t\tparams[p] = num;\n\t\t\t\ti += charCount;\n\t\t\t}\n\t\t\tf.apply(this,params);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stores all graphics commands so they won't be executed in future draws. Calling store() a second time adds to\n\t * the existing store. This also affects `drawAsPath()`.\n\t *\n\t * This is useful in cases where you are creating vector graphics in an iterative manner (ex. generative art), so\n\t * that only new graphics need to be drawn (which can provide huge performance benefits), but you wish to retain all\n\t * of the vector instructions for later use (ex. scaling, modifying, or exporting).\n\t *\n\t * Note that calling store() will force the active path (if any) to be ended in a manner similar to changing\n\t * the fill or stroke.\n\t *\n\t * For example, consider a application where the user draws lines with the mouse. As each line segment (or collection of\n\t * segments) are added to a Shape, it can be rasterized using {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}},\n\t * and then stored, so that it can be redrawn at a different scale when the application is resized, or exported to SVG.\n\t *\n\t * \t// set up cache:\n\t * \tmyShape.cache(0,0,500,500,scale);\n\t *\n\t * \t// when the user drags, draw a new line:\n\t * \tmyShape.graphics.moveTo(oldX,oldY).lineTo(newX,newY);\n\t * \t// then draw it into the existing cache:\n\t * \tmyShape.updateCache(\"source-over\");\n\t * \t// store the new line, so it isn't redrawn next time:\n\t * \tmyShape.store();\n\t *\n\t * \t// then, when the window resizes, we can re-render at a different scale:\n\t * \t// first, unstore all our lines:\n\t * \tmyShape.unstore();\n\t * \t// then cache using the new scale:\n\t * \tmyShape.cache(0,0,500,500,newScale);\n\t * \t// finally, store the existing commands again:\n\t * \tmyShape.store();\n\t *\n\t * @method store\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.store = function() {\n\t\tthis._updateInstructions(true);\n\t\tthis._storeIndex = this._instructions.length;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Unstores any graphics commands that were previously stored using {{#crossLink \"Graphics/store\"}}{{/crossLink}}\n\t * so that they will be executed in subsequent draw calls.\n\t *\n\t * @method unstore\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.unstore = function() {\n\t\tthis._storeIndex = 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.\n\t * @method clone\n\t * @return {Graphics} A clone of the current Graphics instance.\n\t **/\n\tp.clone = function() {\n\t\tvar o = new Graphics();\n\t\to.command = this.command;\n\t\to._stroke = this._stroke;\n\t\to._strokeStyle = this._strokeStyle;\n\t\to._strokeDash = this._strokeDash;\n\t\to._strokeIgnoreScale = this._strokeIgnoreScale;\n\t\to._fill = this._fill;\n\t\to._instructions = this._instructions.slice();\n\t\to._commitIndex = this._commitIndex;\n\t\to._activeInstructions = this._activeInstructions.slice();\n\t\to._dirty = this._dirty;\n\t\to._storeIndex = this._storeIndex;\n\t\treturn o;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Graphics]\";\n\t};\n\n\n// tiny API:\n\t/**\n\t * Shortcut to moveTo.\n\t * @method mt\n\t * @param {Number} x The x coordinate the drawing point should move to.\n\t * @param {Number} y The y coordinate the drawing point should move to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t * @chainable\n\t * @protected\n\t **/\n\tp.mt = p.moveTo;\n\n\t/**\n\t * Shortcut to lineTo.\n\t * @method lt\n\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.lt = p.lineTo;\n\n\t/**\n\t * Shortcut to arcTo.\n\t * @method at\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.at = p.arcTo;\n\n\t/**\n\t * Shortcut to bezierCurveTo.\n\t * @method bt\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.bt = p.bezierCurveTo;\n\n\t/**\n\t * Shortcut to quadraticCurveTo / curveTo.\n\t * @method qt\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t * @chainable\n\t **/\n\tp.qt = p.quadraticCurveTo;\n\n\t/**\n\t * Shortcut to arc.\n\t * @method a\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle Measured in radians.\n\t * @param {Number} endAngle Measured in radians.\n\t * @param {Boolean} anticlockwise\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @protected\n\t * @chainable\n\t **/\n\tp.a = p.arc;\n\n\t/**\n\t * Shortcut to rect.\n\t * @method r\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.r = p.rect;\n\n\t/**\n\t * Shortcut to closePath.\n\t * @method cp\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.cp = p.closePath;\n\n\t/**\n\t * Shortcut to clear.\n\t * @method c\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.c = p.clear;\n\n\t/**\n\t * Shortcut to beginFill.\n\t * @method f\n\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no fill.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.f = p.beginFill;\n\n\t/**\n\t * Shortcut to beginLinearGradientFill.\n\t * @method lf\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t * drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t * the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.lf = p.beginLinearGradientFill;\n\n\t/**\n\t * Shortcut to beginRadialGradientFill.\n\t * @method rf\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rf = p.beginRadialGradientFill;\n\n\t/**\n\t * Shortcut to beginBitmapFill.\n\t * @method bf\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern.\n\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t * will be applied relative to the parent transform.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.bf = p.beginBitmapFill;\n\n\t/**\n\t * Shortcut to endFill.\n\t * @method ef\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.ef = p.endFill;\n\n\t/**\n\t * Shortcut to setStrokeStyle.\n\t * @method ss\n\t * @param {Number} thickness The width of the stroke.\n\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t * the tiny API.\n\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t * for use with the tiny API.\n\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t * controls at what point a mitered joint will be clipped.\n\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t * of active transformations.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.ss = p.setStrokeStyle;\n\t\n\t/**\n\t * Shortcut to setStrokeDash.\n\t * @method sd\n\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t * For example, [20,10] would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t * Passing null or an empty array will clear any existing dash.\n\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.sd = p.setStrokeDash;\n\n\t/**\n\t * Shortcut to beginStroke.\n\t * @method s\n\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no stroke.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.s = p.beginStroke;\n\n\t/**\n\t * Shortcut to beginLinearGradientStroke.\n\t * @method ls\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.ls = p.beginLinearGradientStroke;\n\n\t/**\n\t * Shortcut to beginRadialGradientStroke.\n\t * @method rs\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t * to 100%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rs = p.beginRadialGradientStroke;\n\n\t/**\n\t * Shortcut to beginBitmapStroke.\n\t * @method bs\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern.\n\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.bs = p.beginBitmapStroke;\n\n\t/**\n\t * Shortcut to endStroke.\n\t * @method es\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.es = p.endStroke;\n\n\t/**\n\t * Shortcut to drawRect.\n\t * @method dr\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.dr = p.drawRect;\n\n\t/**\n\t * Shortcut to drawRoundRect.\n\t * @method rr\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radius Corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rr = p.drawRoundRect;\n\n\t/**\n\t * Shortcut to drawRoundRectComplex.\n\t * @method rc\n\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t * @param {Number} w The width of the round rect.\n\t * @param {Number} h The height of the round rect.\n\t * @param {Number} radiusTL Top left corner radius.\n\t * @param {Number} radiusTR Top right corner radius.\n\t * @param {Number} radiusBR Bottom right corner radius.\n\t * @param {Number} radiusBL Bottom left corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rc = p.drawRoundRectComplex;\n\n\t/**\n\t * Shortcut to drawCircle.\n\t * @method dc\n\t * @param {Number} x x coordinate center point of circle.\n\t * @param {Number} y y coordinate center point of circle.\n\t * @param {Number} radius Radius of circle.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.dc = p.drawCircle;\n\n\t/**\n\t * Shortcut to drawEllipse.\n\t * @method de\n\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from center.\n\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from the center.\n\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t * number.\n\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.de = p.drawEllipse;\n\n\t/**\n\t * Shortcut to drawPolyStar.\n\t * @method dp\n\t * @param {Number} x Position of the center of the shape.\n\t * @param {Number} y Position of the center of the shape.\n\t * @param {Number} radius The outer radius of the shape.\n\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t * directly to the right of the center.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.dp = p.drawPolyStar;\n\n\t/**\n\t * Shortcut to decodePath.\n\t * @method p\n\t * @param {String} str The path string to decode.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.p = p.decodePath;\n\n\n// private methods:\n\t/**\n\t * @method _updateInstructions\n\t * @param commit\n\t * @protected\n\t **/\n\tp._updateInstructions = function(commit) {\n\t\tvar instr = this._instructions, active = this._activeInstructions, commitIndex = this._commitIndex;\n\n\t\tif (this._dirty && active.length) {\n\t\t\tinstr.length = commitIndex; // remove old, uncommitted commands\n\t\t\tinstr.push(Graphics.beginCmd);\n\n\t\t\tvar l = active.length, ll = instr.length;\n\t\t\tinstr.length = ll+l;\n\t\t\tfor (var i=0; i<l; i++) { instr[i+ll] = active[i]; }\n\n\t\t\tif (this._fill) { instr.push(this._fill); }\n\t\t\tif (this._stroke) {\n\t\t\t\t// doesn't need to be re-applied if it hasn't changed.\n\t\t\t\tif (this._strokeDash !== this._oldStrokeDash) {\n\t\t\t\t\tthis._oldStrokeDash = this._strokeDash;\n\t\t\t\t\tinstr.push(this._strokeDash);\n\t\t\t\t}\n\t\t\t\tif (this._strokeStyle !== this._oldStrokeStyle) {\n\t\t\t\t\tthis._oldStrokeStyle = this._strokeStyle;\n\t\t\t\t\tinstr.push(this._strokeStyle);\n\t\t\t\t}\n\t\t\t\tinstr.push(this._stroke);\n\t\t\t}\n\n\t\t\tthis._dirty = false;\n\t\t}\n\n\t\tif (commit) {\n\t\t\tactive.length = 0;\n\t\t\tthis._commitIndex = instr.length;\n\t\t}\n\t};\n\n\t/**\n\t * @method _setFill\n\t * @param fill\n\t * @protected\n\t **/\n\tp._setFill = function(fill) {\n\t\tthis._updateInstructions(true);\n\t\tthis.command = this._fill = fill;\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method _setStroke\n\t * @param stroke\n\t * @protected\n\t **/\n\tp._setStroke = function(stroke) {\n\t\tthis._updateInstructions(true);\n\t\tif (this.command = this._stroke = stroke) {\n\t\t\tstroke.ignoreScale = this._strokeIgnoreScale;\n\t\t}\n\t\treturn this;\n\t};\n\n// Command Objects:\n\t/**\n\t * @namespace Graphics\n\t */\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/lineTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class LineTo\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.LineTo = function(x, y) {\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.lineTo(this.x,this.y); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class MoveTo\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.MoveTo = function(x, y) {\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.moveTo(this.x, this.y); };\n\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class ArcTo\n\t * @constructor\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t **/\n\t/**\n\t * @property x1\n\t * @type Number\n\t */\n\t/**\n\t * @property y1\n\t * @type Number\n\t */\n\t/**\n\t * @property x2\n\t * @type Number\n\t */\n\t/**\n\t * @property y2\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.ArcTo = function(x1, y1, x2, y2, radius) {\n\t\tthis.x1 = x1; this.y1 = y1;\n\t\tthis.x2 = x2; this.y2 = y2;\n\t\tthis.radius = radius;\n\t}).prototype.exec = function(ctx) { ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/arc\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Arc\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle\n\t * @param {Number} endAngle\n\t * @param {Number} anticlockwise\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * @property startAngle\n\t * @type Number\n\t */\n\t/**\n\t * @property endAngle\n\t * @type Number\n\t */\n\t/**\n\t * @property anticlockwise\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.Arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.radius = radius;\n\t\tthis.startAngle = startAngle; this.endAngle = endAngle;\n\t\tthis.anticlockwise = !!anticlockwise;\n\t}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class QuadraticCurveTo\n\t * @constructor\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property cpx\n\t * @type Number\n\t */\n\t/**\n\t * @property cpy\n\t * @type Number\n\t */\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.QuadraticCurveTo = function(cpx, cpy, x, y) {\n\t\tthis.cpx = cpx; this.cpy = cpy;\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class BezierCurveTo\n\t * @constructor\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property cp1x\n\t * @type Number\n\t */\n\t/**\n\t * @property cp1y\n\t * @type Number\n\t */\n\t/**\n\t * @property cp2x\n\t * @type Number\n\t */\n\t/**\n\t * @property cp2y\n\t * @type Number\n\t */\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\tthis.cp1x = cp1x; this.cp1y = cp1y;\n\t\tthis.cp2x = cp2x; this.cp2y = cp2y;\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/rect\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Rect\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property w\n\t * @type Number\n\t */\n\t/**\n\t * @property h\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.Rect = function(x, y, w, h) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.w = w; this.h = h;\n\t}).prototype.exec = function(ctx) { ctx.rect(this.x, this.y, this.w, this.h); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/closePath\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class ClosePath\n\t * @constructor\n\t **/\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.ClosePath = function() {\n\t}).prototype.exec = function(ctx) { ctx.closePath(); };\n\n\t/**\n\t * Graphics command object to begin a new path. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class BeginPath\n\t * @constructor\n\t **/\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.BeginPath = function() {\n\t}).prototype.exec = function(ctx) { ctx.beginPath(); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Fill\n\t * @constructor\n\t * @param {Object} style A valid Context2D fillStyle.\n\t * @param {Matrix2D} matrix\n\t **/\n\t/**\n\t * A valid Context2D fillStyle.\n\t * @property style\n\t * @type Object\n\t */\n\t/**\n\t * @property matrix\n\t * @type Matrix2D\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\tp = (G.Fill = function(style, matrix) {\n\t\tthis.style = style;\n\t\tthis.matrix = matrix;\n\t}).prototype;\n\tp.exec = function(ctx) {\n\t\tif (!this.style) { return; }\n\t\tctx.fillStyle = this.style;\n\t\tvar mtx = this.matrix;\n\t\tif (mtx) { ctx.save(); ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty); }\n\t\tctx.fill();\n\t\tif (mtx) { ctx.restore(); }\n\t};\n\t/**\n\t * Creates a linear gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} for more information.\n\t * @method linearGradient\n\t * @param {Array} colors\n\t *\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tp.linearGradient = function(colors, ratios, x0, y0, x1, y1) {\n\t\tvar o = this.style =  Graphics._ctx.createLinearGradient(x0, y0, x1, y1);\n\t\tfor (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\to.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, x1:x1, y1:y1, type:\"linear\"};\n\t\treturn this;\n\t};\n\t/**\n\t * Creates a radial gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} for more information.\n\t * @method radialGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} r0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} r1\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tp.radialGradient = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\tvar o = this.style =  Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n\t\tfor (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\to.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, r0:r0, x1:x1, y1:y1, r1:r1, type:\"radial\"};\n\t\treturn this;\n\t};\n\t/**\n\t * Creates a bitmap fill style and assigns it to the {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} for more information.\n\t * @method bitmap\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image  Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tp.bitmap = function(image, repetition) {\n\t\tif (image.naturalWidth || image.getContext || image.readyState >= 2) {\n\t\t\tvar o = this.style = Graphics._ctx.createPattern(image, repetition || \"\");\n\t\t\to.props = {image: image, repetition: repetition, type: \"bitmap\"};\n\t\t}\n\t\treturn this;\n\t};\n\tp.path = false;\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Stroke\n\t * @constructor\n\t * @param {Object} style A valid Context2D fillStyle.\n\t * @param {Boolean} ignoreScale\n\t **/\n\t/**\n\t * A valid Context2D strokeStyle.\n\t * @property style\n\t * @type Object\n\t */\n\t/**\n\t * @property ignoreScale\n\t * @type Boolean\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\tp = (G.Stroke = function(style, ignoreScale) {\n\t\tthis.style = style;\n\t\tthis.ignoreScale = ignoreScale;\n\t}).prototype;\n\tp.exec = function(ctx) {\n\t\tif (!this.style) { return; }\n\t\tctx.strokeStyle = this.style;\n\t\tif (this.ignoreScale) { ctx.save(); ctx.setTransform(1,0,0,1,0,0); }\n\t\tctx.stroke();\n\t\tif (this.ignoreScale) { ctx.restore(); }\n\t};\n\t/**\n\t * Creates a linear gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} for more information.\n\t * @method linearGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tp.linearGradient = G.Fill.prototype.linearGradient;\n\t/**\n\t * Creates a radial gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} for more information.\n\t * @method radialGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} r0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} r1\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tp.radialGradient = G.Fill.prototype.radialGradient;\n\t/**\n\t * Creates a bitmap fill style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} for more information.\n\t * @method bitmap\n\t * @param {HTMLImageElement} image\n\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tp.bitmap = G.Fill.prototype.bitmap;\n\tp.path = false;\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class StrokeStyle\n\t * @constructor\n\t * @param {Number} width\n\t * @param {String} [caps=butt]\n\t * @param {String} [joints=miter]\n\t * @param {Number} [miterLimit=10]\n\t * @param {Boolean} [ignoreScale=false]\n\t **/\n\t/**\n\t * @property width\n\t * @type Number\n\t */\n\t/**\n\t * One of: butt, round, square\n\t * @property caps\n\t * @type String\n\t */\n\t/**\n\t * One of: round, bevel, miter\n\t * @property joints\n\t * @type String\n\t */\n\t/**\n\t * @property miterLimit\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\tp = (G.StrokeStyle = function(width, caps, joints, miterLimit, ignoreScale) {\n\t\tthis.width = width;\n\t\tthis.caps = caps;\n\t\tthis.joints = joints;\n\t\tthis.miterLimit = miterLimit;\n\t\tthis.ignoreScale = ignoreScale;\n\t}).prototype;\n\tp.exec = function(ctx) {\n\t\tctx.lineWidth = (this.width == null ? \"1\" : this.width);\n\t\tctx.lineCap = (this.caps == null ? \"butt\" : (isNaN(this.caps) ? this.caps : Graphics.STROKE_CAPS_MAP[this.caps]));\n\t\tctx.lineJoin = (this.joints == null ? \"miter\" : (isNaN(this.joints) ? this.joints : Graphics.STROKE_JOINTS_MAP[this.joints]));\n\t\tctx.miterLimit = (this.miterLimit == null ? \"10\" : this.miterLimit);\n\t\tctx.ignoreScale = (this.ignoreScale == null ? false : this.ignoreScale);\n\t};\n\tp.path = false;\n\t\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class StrokeDash\n\t * @constructor\n\t * @param {Array} [segments]\n\t * @param {Number} [offset=0]\n\t **/\n\t/**\n\t * @property segments\n\t * @type Array\n\t */\n\t/**\n\t * @property offset\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.StrokeDash = function(segments, offset) {\n\t\tthis.segments = segments;\n\t\tthis.offset = offset||0;\n\t}).prototype.exec = function(ctx) {\n\t\tif (ctx.setLineDash) { // feature detection.\n\t\t\tctx.setLineDash(this.segments|| G.StrokeDash.EMPTY_SEGMENTS); // instead of [] to reduce churn.\n\t\t\tctx.lineDashOffset = this.offset||0;\n\t\t}\n\t};\n\t/**\n\t * The default value for segments (ie. no dash).\n\t * @property EMPTY_SEGMENTS\n\t * @static\n\t * @final\n\t * @readonly\n\t * @protected\n\t * @type {Array}\n\t **/\n\tG.StrokeDash.EMPTY_SEGMENTS = [];\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class RoundRect\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radiusTL\n\t * @param {Number} radiusTR\n\t * @param {Number} radiusBR\n\t * @param {Number} radiusBL\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property w\n\t * @type Number\n\t */\n\t/**\n\t * @property h\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusTL\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusTR\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusBR\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusBL\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.RoundRect = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.w = w; this.h = h;\n\t\tthis.radiusTL = radiusTL; this.radiusTR = radiusTR;\n\t\tthis.radiusBR = radiusBR; this.radiusBL = radiusBL;\n\t}).prototype.exec = function(ctx) {\n\t\tvar max = (w<h?w:h)/2;\n\t\tvar mTL=0, mTR=0, mBR=0, mBL=0;\n\t\tvar x = this.x, y = this.y, w = this.w, h = this.h;\n\t\tvar rTL = this.radiusTL, rTR = this.radiusTR, rBR = this.radiusBR, rBL = this.radiusBL;\n\n\t\tif (rTL < 0) { rTL *= (mTL=-1); }\n\t\tif (rTL > max) { rTL = max; }\n\t\tif (rTR < 0) { rTR *= (mTR=-1); }\n\t\tif (rTR > max) { rTR = max; }\n\t\tif (rBR < 0) { rBR *= (mBR=-1); }\n\t\tif (rBR > max) { rBR = max; }\n\t\tif (rBL < 0) { rBL *= (mBL=-1); }\n\t\tif (rBL > max) { rBL = max; }\n\n\t\tctx.moveTo(x+w-rTR, y);\n\t\tctx.arcTo(x+w+rTR*mTR, y-rTR*mTR, x+w, y+rTR, rTR);\n\t\tctx.lineTo(x+w, y+h-rBR);\n\t\tctx.arcTo(x+w+rBR*mBR, y+h+rBR*mBR, x+w-rBR, y+h, rBR);\n\t\tctx.lineTo(x+rBL, y+h);\n\t\tctx.arcTo(x-rBL*mBL, y+h+rBL*mBL, x, y+h-rBL, rBL);\n\t\tctx.lineTo(x, y+rTL);\n\t\tctx.arcTo(x-rTL*mTL, y-rTL*mTL, x+rTL, y, rTL);\n\t\tctx.closePath();\n\t};\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Circle\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.Circle = function(x, y, radius) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.radius = radius;\n\t}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Ellipse\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property w\n\t * @type Number\n\t */\n\t/**\n\t * @property h\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.Ellipse = function(x, y, w, h) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.w = w; this.h = h;\n\t}).prototype.exec = function(ctx) {\n\t\tvar x = this.x, y = this.y;\n\t\tvar w = this.w, h = this.h;\n\n\t\tvar k = 0.5522848;\n\t\tvar ox = (w / 2) * k;\n\t\tvar oy = (h / 2) * k;\n\t\tvar xe = x + w;\n\t\tvar ye = y + h;\n\t\tvar xm = x + w / 2;\n\t\tvar ym = y + h / 2;\n\n\t\tctx.moveTo(x, ym);\n\t\tctx.bezierCurveTo(x, ym-oy, xm-ox, y, xm, y);\n\t\tctx.bezierCurveTo(xm+ox, y, xe, ym-oy, xe, ym);\n\t\tctx.bezierCurveTo(xe, ym+oy, xm+ox, ye, xm, ye);\n\t\tctx.bezierCurveTo(xm-ox, ye, x, ym+oy, x, ym);\n\t};\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class PolyStar\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} sides\n\t * @param {Number} pointSize\n\t * @param {Number} angle\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * @property sides\n\t * @type Number\n\t */\n\t/**\n\t * @property pointSize\n\t * @type Number\n\t */\n\t/**\n\t * @property angle\n\t * @type Number\n\t */\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\t(G.PolyStar = function(x, y, radius, sides, pointSize, angle) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.radius = radius;\n\t\tthis.sides = sides;\n\t\tthis.pointSize = pointSize;\n\t\tthis.angle = angle;\n\t}).prototype.exec = function(ctx) {\n\t\tvar x = this.x, y = this.y;\n\t\tvar radius = this.radius;\n\t\tvar angle = (this.angle||0)/180*Math.PI;\n\t\tvar sides = this.sides;\n\t\tvar ps = 1-(this.pointSize||0);\n\t\tvar a = Math.PI/sides;\n\n\t\tctx.moveTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t\tfor (var i=0; i<sides; i++) {\n\t\t\tangle += a;\n\t\t\tif (ps != 1) {\n\t\t\t\tctx.lineTo(x+Math.cos(angle)*radius*ps, y+Math.sin(angle)*radius*ps);\n\t\t\t}\n\t\t\tangle += a;\n\t\t\tctx.lineTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t\t}\n\t\tctx.closePath();\n\t};\n\n\t// docced above.\n\tGraphics.beginCmd = new G.BeginPath(); // so we don't have to instantiate multiple instances.\n\n\n\tcreatejs.Graphics = Graphics;\n}());\n\n//##############################################################################\n// DisplayObject.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\n\t * {{#crossLink \"Container\"}}{{/crossLink}}, {{#crossLink \"Bitmap\"}}{{/crossLink}}, and {{#crossLink \"Shape\"}}{{/crossLink}}.\n\t * DisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and\n\t * methods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),\n\t * caching, and mouse handlers.\n\t * @class DisplayObject\n\t * @extends EventDispatcher\n\t * @constructor\n\t **/\n\tfunction DisplayObject() {\n\t\tthis.EventDispatcher_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.\n\t\t * @property alpha\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t **/\n\t\tthis.alpha = 1;\n\t\n\t\t/**\n\t\t * If a cache is active, this returns the canvas that holds the cached version of this display object. See {{#crossLink \"cache\"}}{{/crossLink}}\n\t\t * for more information.\n\t\t * @property cacheCanvas\n\t\t * @type {HTMLCanvasElement | Object}\n\t\t * @default null\n\t\t * @readonly\n\t\t **/\n\t\tthis.cacheCanvas = null;\n\t\n\t\t/**\n\t\t * Returns an ID number that uniquely identifies the current cache for this display object. This can be used to\n\t\t * determine if the cache has changed since a previous check.\n\t\t * @property cacheID\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.cacheID = 0;\n\t\n\t\t/**\n\t\t * Unique ID for this display object. Makes display objects easier for some uses.\n\t\t * @property id\n\t\t * @type {Number}\n\t\t * @default -1\n\t\t **/\n\t\tthis.id = createjs.UID.get();\n\t\n\t\t/**\n\t\t * Indicates whether to include this object when running mouse interactions. Setting this to `false` for children\n\t\t * of a {{#crossLink \"Container\"}}{{/crossLink}} will cause events on the Container to not fire when that child is\n\t\t * clicked. Setting this property to `false` does not prevent the {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}\n\t\t * method from returning the child.\n\t\t *\n\t\t * <strong>Note:</strong> In EaselJS 0.7.0, the mouseEnabled property will not work properly with nested Containers. Please\n\t\t * check out the latest NEXT version in <a href=\"https://github.com/CreateJS/EaselJS/tree/master/lib\">GitHub</a> for an updated version with this issue resolved. The fix will be\n\t\t * provided in the next release of EaselJS.\n\t\t * @property mouseEnabled\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t **/\n\t\tthis.mouseEnabled = true;\n\t\t\n\t\t/**\n\t\t * If false, the tick will not run on this display object (or its children). This can provide some performance benefits.\n\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n\t\t * @property tickEnabled\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.tickEnabled = true;\n\t\n\t\t/**\n\t\t * An optional name for this display object. Included in {{#crossLink \"DisplayObject/toString\"}}{{/crossLink}} . Useful for\n\t\t * debugging.\n\t\t * @property name\n\t\t * @type {String}\n\t\t * @default null\n\t\t **/\n\t\tthis.name = null;\n\t\n\t\t/**\n\t\t * A reference to the {{#crossLink \"Container\"}}{{/crossLink}} or {{#crossLink \"Stage\"}}{{/crossLink}} object that\n\t\t * contains this display object, or null if it has not been added\n\t\t * to one.\n\t\t * @property parent\n\t\t * @final\n\t\t * @type {Container}\n\t\t * @default null\n\t\t * @readonly\n\t\t **/\n\t\tthis.parent = null;\n\t\n\t\t/**\n\t\t * The left offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate\n\t\t * around its center, you would set regX and {{#crossLink \"DisplayObject/regY:property\"}}{{/crossLink}} to 50.\n\t\t * @property regX\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.regX = 0;\n\t\n\t\t/**\n\t\t * The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\n\t\t * its center, you would set {{#crossLink \"DisplayObject/regX:property\"}}{{/crossLink}} and regY to 50.\n\t\t * @property regY\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.regY = 0;\n\t\n\t\t/**\n\t\t * The rotation in degrees for this display object.\n\t\t * @property rotation\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.rotation = 0;\n\t\n\t\t/**\n\t\t * The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\n\t\t * object to twice its nominal width. To horizontally flip an object, set the scale to a negative number.\n\t\t * @property scaleX\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t **/\n\t\tthis.scaleX = 1;\n\t\n\t\t/**\n\t\t * The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\n\t\t * object to half its nominal height. To vertically flip an object, set the scale to a negative number.\n\t\t * @property scaleY\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t **/\n\t\tthis.scaleY = 1;\n\t\n\t\t/**\n\t\t * The factor to skew this display object horizontally.\n\t\t * @property skewX\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.skewX = 0;\n\t\n\t\t/**\n\t\t * The factor to skew this display object vertically.\n\t\t * @property skewY\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.skewY = 0;\n\t\n\t\t/**\n\t\t * A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If\n\t\t * null, this property is inherited from the parent container.\n\t\t * @property shadow\n\t\t * @type {Shadow}\n\t\t * @default null\n\t\t **/\n\t\tthis.shadow = null;\n\t\n\t\t/**\n\t\t * Indicates whether this display object should be rendered to the canvas and included when running the Stage\n\t\t * {{#crossLink \"Stage/getObjectsUnderPoint\"}}{{/crossLink}} method.\n\t\t * @property visible\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t **/\n\t\tthis.visible = true;\n\t\n\t\t/**\n\t\t * The x (horizontal) position of the display object, relative to its parent.\n\t\t * @property x\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.x = 0;\n\t\n\t\t/** The y (vertical) position of the display object, relative to its parent.\n\t\t * @property y\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.y = 0;\n\t\t\n\t\t/**\n\t\t * If set, defines the transformation for this display object, overriding all other transformation properties\n\t\t * (x, y, rotation, scale, skew).\n\t\t * @property transformMatrix\n\t\t * @type {Matrix2D}\n\t\t * @default null\n\t\t **/\n\t\tthis.transformMatrix = null;\n\t\t\n\t\t/**\n\t\t * The composite operation indicates how the pixels of this display object will be composited with the elements\n\t\t * behind it. If `null`, this property is inherited from the parent container. For more information, read the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n\t\t * whatwg spec on compositing</a>.\n\t\t * @property compositeOperation\n\t\t * @type {String}\n\t\t * @default null\n\t\t **/\n\t\tthis.compositeOperation = null;\n\t\n\t\t/**\n\t\t * Indicates whether the display object should be drawn to a whole pixel when\n\t\t * {{#crossLink \"Stage/snapToPixelEnabled\"}}{{/crossLink}} is true. To enable/disable snapping on whole\n\t\t * categories of display objects, set this value on the prototype (Ex. Text.prototype.snapToPixel = true).\n\t\t * @property snapToPixel\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t **/\n\t\tthis.snapToPixel = true;\n\t\n\t\t/**\n\t\t * An array of Filter objects to apply to this display object. Filters are only applied / updated when {{#crossLink \"cache\"}}{{/crossLink}}\n\t\t * or {{#crossLink \"updateCache\"}}{{/crossLink}} is called on the display object, and only apply to the area that is\n\t\t * cached.\n\t\t * @property filters\n\t\t * @type {Array}\n\t\t * @default null\n\t\t **/\n\t\tthis.filters = null;\n\t\t\n\t\t/**\n\t\t * A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\n\t\t * will be applied relative to the display object's parent coordinates (as if it were a child of the parent).\n\t\t * @property mask\n\t\t * @type {Shape}\n\t\t * @default null\n\t\t */\n\t\tthis.mask = null;\n\t\t\n\t\t/**\n\t\t * A display object that will be tested when checking mouse interactions or testing {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}.\n\t\t * The hit area will have its transformation applied relative to this display object's coordinate space (as though\n\t\t * the hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested\n\t\t * using only its own `alpha` value regardless of the alpha value on the target display object, or the target's\n\t\t * ancestors (parents).\n\t\t * \n\t\t * If set on a {{#crossLink \"Container\"}}{{/crossLink}}, children of the Container will not receive mouse events.\n\t\t * This is similar to setting {{#crossLink \"mouseChildren\"}}{{/crossLink}} to false.\n\t\t *\n\t\t * Note that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink \"Stage\"}}{{/crossLink}}.\n\t\t * @property hitArea\n\t\t * @type {DisplayObject}\n\t\t * @default null\n\t\t */\n\t\tthis.hitArea = null;\n\t\t\n\t\t/**\n\t\t * A CSS cursor (ex. \"pointer\", \"help\", \"text\", etc) that will be displayed when the user hovers over this display\n\t\t * object. You must enable mouseover events using the {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}} method to\n\t\t * use this property. Setting a non-null cursor on a Container will override the cursor set on its descendants.\n\t\t * @property cursor\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.cursor = null;\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * @property _cacheOffsetX\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis._cacheOffsetX = 0;\n\t\n\t\t/**\n\t\t * @property _cacheOffsetY\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis._cacheOffsetY = 0;\n\t\t\n\t\t/**\n\t\t * @property _filterOffsetX\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis._filterOffsetX = 0;\n\t\t\n\t\t/**\n\t\t * @property _filterOffsetY\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis._filterOffsetY = 0;\n\t\t\n\t\t/**\n\t\t * @property _cacheScale\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t **/\n\t\tthis._cacheScale = 1;\n\t\n\t\t/**\n\t\t* @property _cacheDataURLID\n\t\t* @protected\n\t\t* @type {Number}\n\t\t* @default 0\n\t\t*/\n\t\tthis._cacheDataURLID = 0;\n\t\t\n\t\t/**\n\t\t* @property _cacheDataURL\n\t\t* @protected\n\t\t* @type {String}\n\t\t* @default null\n\t\t*/\n\t\tthis._cacheDataURL = null;\n\t\n\t\t/**\n\t\t * @property _props\n\t\t * @protected\n\t\t * @type {DisplayObject}\n\t\t * @default null\n\t\t **/\n\t\tthis._props = new createjs.DisplayProps();\n\t\n\t\t/**\n\t\t * @property _rectangle\n\t\t * @protected\n\t\t * @type {Rectangle}\n\t\t * @default null\n\t\t **/\n\t\tthis._rectangle = new createjs.Rectangle();\n\t\n\t\t/**\n\t\t * @property _bounds\n\t\t * @protected\n\t\t * @type {Rectangle}\n\t\t * @default null\n\t\t **/\n\t\tthis._bounds = null;\n\t}\n\tvar p = createjs.extend(DisplayObject, createjs.EventDispatcher);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n// static properties:\n\t/**\n\t * Listing of mouse event names. Used in _hasMouseEventListener.\n\t * @property _MOUSE_EVENTS\n\t * @protected\n\t * @static\n\t * @type {Array}\n\t **/\n\tDisplayObject._MOUSE_EVENTS = [\"click\",\"dblclick\",\"mousedown\",\"mouseout\",\"mouseover\",\"pressmove\",\"pressup\",\"rollout\",\"rollover\"];\n\n\t/**\n\t * Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink \"getObjectsUnderPoint\"}}{{/crossLink}}\n\t * with cross domain content.\n\t * @property suppressCrossDomainErrors\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tDisplayObject.suppressCrossDomainErrors = false;\n\t\n\t/**\n\t * @property _snapToPixelEnabled\n\t * @protected\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tDisplayObject._snapToPixelEnabled = false; // stage.snapToPixelEnabled is temporarily copied here during a draw to provide global access.\n\n\t/**\n\t * @property _hitTestCanvas\n\t * @type {HTMLCanvasElement | Object}\n\t * @static\n\t * @protected\n\t **/\n\t/**\n\t * @property _hitTestContext\n\t * @type {CanvasRenderingContext2D}\n\t * @static\n\t * @protected\n\t **/\n\tvar canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); // prevent errors on load in browsers without canvas.\n\tif (canvas.getContext) {\n\t\tDisplayObject._hitTestCanvas = canvas;\n\t\tDisplayObject._hitTestContext = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n\n\t/**\n\t * @property _nextCacheID\n\t * @type {Number}\n\t * @static\n\t * @protected\n\t **/\n\tDisplayObject._nextCacheID = 1;\n\n\n// events:\n\t/**\n\t * Dispatched when the user presses their left mouse button over the display object. See the \n\t * {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event mousedown\n\t * @since 0.6.0\n\t */\n\t \n\t/**\n\t * Dispatched when the user presses their left mouse button and then releases it while over the display object.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event click\n\t * @since 0.6.0\n\t */\n\t \n\t/**\n\t * Dispatched when the user double clicks their left mouse button over this display object.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event dblclick\n\t * @since 0.6.0\n\t */\n\t \n\t/**\n\t * Dispatched when the user's mouse enters this display object. This event must be enabled using \n\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event mouseover\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user's mouse leaves this display object. This event must be enabled using \n\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event mouseout\n\t * @since 0.6.0\n\t */\n\t \n\t/**\n\t * This event is similar to {{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}, with the following\n\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n\t * aggregate of their content.\n\t * \n\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n\t * shapeA and then directly on to shapeB. With a listener for {{#crossLink \"mouseover:event\"}}{{/crossLink}} on\n\t * myContainer, two events would be received, each targeting a child element:<OL>\n\t * <LI>when the mouse enters shapeA (target=shapeA)</LI>\n\t * <LI>when the mouse enters shapeB (target=shapeB)</LI>\n\t * </OL>\n\t * However, with a listener for \"rollover\" instead, only a single event is received when the mouse first enters\n\t * the aggregate myContainer content (target=myContainer).\n\t * \n\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event rollover\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * This event is similar to {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}, with the following\n\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n\t * aggregate of their content.\n\t * \n\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n\t * shapeA, then directly on to shapeB, then off both. With a listener for {{#crossLink \"mouseout:event\"}}{{/crossLink}}\n\t * on myContainer, two events would be received, each targeting a child element:<OL>\n\t * <LI>when the mouse leaves shapeA (target=shapeA)</LI>\n\t * <LI>when the mouse leaves shapeB (target=shapeB)</LI>\n\t * </OL>\n\t * However, with a listener for \"rollout\" instead, only a single event is received when the mouse leaves\n\t * the aggregate myContainer content (target=myContainer).\n\t * \n\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event rollout\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressmove\n\t * event will be generated on that object whenever the mouse moves until the mouse press is released. This can be\n\t * useful for dragging and similar operations.\n\t * @event pressmove\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressup event\n\t * will be generated on that object when that mouse press is released. This can be useful for dragging and similar\n\t * operations.\n\t * @event pressup\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched when the display object is added to a parent container.\n\t * @event added\n\t */\n\t \n\t/**\n\t * Dispatched when the display object is removed from its parent container.\n\t * @event removed\n\t */\n\t \n\t/**\n\t * Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the\n\t * rendering (draw) pass. When {{#crossLink \"Stage/update\"}}{{/crossLink}} is called, first all display objects on\n\t * the stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their\n\t * {{#crossLink \"tick:event\"}}{{/crossLink}} event dispatched in order of their depth prior to the event being\n\t * dispatched on their parent.\n\t * @event tick\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Array} params An array containing any arguments that were passed to the Stage.update() method. For\n\t *      example if you called stage.update(\"hello\"), then the params would be [\"hello\"].\n\t * @since 0.6.0\n\t */\n\t\n\t\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"DisplayObject/stage:property\"}}{{/crossLink}} property instead.\n\t * @method getStage\n\t * @return {Stage}\n\t * @deprecated\n\t **/\n\tp.getStage = function() {\n\t\t// uses dynamic access to avoid circular dependencies;\n\t\tvar o = this, _Stage = createjs[\"Stage\"];\n\t\twhile (o.parent) { o = o.parent; }\n\t\tif (o instanceof _Stage) { return o; }\n\t\treturn null;\n\t};\n\n\t/**\n\t * Returns the Stage instance that this display object will be rendered on, or null if it has not been added to one.\n\t * @property stage\n\t * @type {Stage}\n\t * @readonly\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tstage: { get: p.getStage }\n\t\t});\n\t} catch (e) {}\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns <code>true</code> if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @return {Boolean}\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tvar cacheCanvas = this.cacheCanvas;\n\t\tif (ignoreCache || !cacheCanvas) { return false; }\n\t\tvar scale = this._cacheScale;\n\t\tctx.drawImage(cacheCanvas, this._cacheOffsetX+this._filterOffsetX, this._cacheOffsetY+this._filterOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);\n\t\treturn true;\n\t};\n\t\n\t/**\n\t * Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow\n\t * to the specified context. This is typically called prior to {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}.\n\t * @method updateContext\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D to update.\n\t **/\n\tp.updateContext = function(ctx) {\n\t\tvar o=this, mask=o.mask, mtx= o._props.matrix;\n\t\t\n\t\tif (mask && mask.graphics && !mask.graphics.isEmpty()) {\n\t\t\tmask.getMatrix(mtx);\n\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n\t\t\t\n\t\t\tmask.graphics.drawAsPath(ctx);\n\t\t\tctx.clip();\n\t\t\t\n\t\t\tmtx.invert();\n\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n\t\t}\n\t\t\n\t\tthis.getMatrix(mtx);\n\t\tvar tx = mtx.tx, ty = mtx.ty;\n\t\tif (DisplayObject._snapToPixelEnabled && o.snapToPixel) {\n\t\t\ttx = tx + (tx < 0 ? -0.5 : 0.5) | 0;\n\t\t\tty = ty + (ty < 0 ? -0.5 : 0.5) | 0;\n\t\t}\n\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, tx, ty);\n\t\tctx.globalAlpha *= o.alpha;\n\t\tif (o.compositeOperation) { ctx.globalCompositeOperation = o.compositeOperation; }\n\t\tif (o.shadow) { this._applyShadow(ctx, o.shadow); }\n\t};\n\n\t/**\n\t * Draws the display object into a new canvas, which is then used for subsequent draws. For complex content\n\t * that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),\n\t * this can provide for much faster rendering because the content does not need to be re-rendered each tick. The\n\t * cached display object can be moved, rotated, faded, etc freely, however if its content changes, you must\n\t * manually update the cache by calling <code>updateCache()</code> or <code>cache()</code> again. You must specify\n\t * the cache area via the x, y, w, and h parameters. This defines the rectangle that will be rendered and cached\n\t * using this display object's coordinates.\n\t *\n\t * <h4>Example</h4>\n\t * For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25:\n\t *\n\t *      var shape = new createjs.Shape();\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n\t *      myShape.cache(-25, -25, 50, 50);\n\t *\n\t * Note that filters need to be defined <em>before</em> the cache is applied. Check out the {{#crossLink \"Filter\"}}{{/crossLink}}\n\t * class for more information. Some filters (ex. BlurFilter) will not work as expected in conjunction with the scale param.\n\t * \n\t * Usually, the resulting cacheCanvas will have the dimensions width*scale by height*scale, however some filters (ex. BlurFilter)\n\t * will add padding to the canvas dimensions.\n\t *\n\t * @method cache\n\t * @param {Number} x The x coordinate origin for the cache region.\n\t * @param {Number} y The y coordinate origin for the cache region.\n\t * @param {Number} width The width of the cache region.\n\t * @param {Number} height The height of the cache region.\n\t * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using\n\t * \tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\n\t * \tcached elements with greater fidelity. Default is 1.\n\t **/\n\tp.cache = function(x, y, width, height, scale) {\n\t\t// draw to canvas.\n\t\tscale = scale||1;\n\t\tif (!this.cacheCanvas) { this.cacheCanvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); }\n\t\tthis._cacheWidth = width;\n\t\tthis._cacheHeight = height;\n\t\tthis._cacheOffsetX = x;\n\t\tthis._cacheOffsetY = y;\n\t\tthis._cacheScale = scale;\n\t\tthis.updateCache();\n\t};\n\n\t/**\n\t * Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\n\t * If compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\n\t * will be drawn over the existing cache using the specified compositeOperation.\n\t *\n\t * <h4>Example</h4>\n\t * Clear the current graphics of a cached shape, draw some new instructions, and then update the cache. The new line\n\t * will be drawn on top of the old one.\n\t *\n\t *      // Not shown: Creating the shape, and caching it.\n\t *      shapeInstance.clear();\n\t *      shapeInstance.setStrokeStyle(3).beginStroke(\"#ff0000\").moveTo(100, 100).lineTo(200,200);\n\t *      shapeInstance.updateCache();\n\t *\n\t * @method updateCache\n\t * @param {String} compositeOperation The compositeOperation to use, or null to clear the cache and redraw it.\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n\t * whatwg spec on compositing</a>.\n\t **/\n\tp.updateCache = function(compositeOperation) {\n\t\tvar cacheCanvas = this.cacheCanvas;\n\t\tif (!cacheCanvas) { throw \"cache() must be called before updateCache()\"; }\n\t\tvar scale = this._cacheScale, offX = this._cacheOffsetX*scale, offY = this._cacheOffsetY*scale;\n\t\tvar w = this._cacheWidth, h = this._cacheHeight, ctx = cacheCanvas.getContext(\"2d\");\n\t\t\n\t\tvar fBounds = this._getFilterBounds();\n\t\toffX += (this._filterOffsetX = fBounds.x);\n\t\toffY += (this._filterOffsetY = fBounds.y);\n\t\t\n\t\tw = Math.ceil(w*scale) + fBounds.width;\n\t\th = Math.ceil(h*scale) + fBounds.height;\n\t\tif (w != cacheCanvas.width || h != cacheCanvas.height) {\n\t\t\t// TODO: it would be nice to preserve the content if there is a compositeOperation.\n\t\t\tcacheCanvas.width = w;\n\t\t\tcacheCanvas.height = h;\n\t\t} else if (!compositeOperation) {\n\t\t\tctx.clearRect(0, 0, w+1, h+1);\n\t\t}\n\t\t\n\t\tctx.save();\n\t\tctx.globalCompositeOperation = compositeOperation;\n\t\tctx.setTransform(scale, 0, 0, scale, -offX, -offY);\n\t\tthis.draw(ctx, true);\n\t\t// TODO: filters and cache scale don't play well together at present.\n\t\tthis._applyFilters();\n\t\tctx.restore();\n\t\tthis.cacheID = DisplayObject._nextCacheID++;\n\t};\n\n\t/**\n\t * Clears the current cache. See {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} for more information.\n\t * @method uncache\n\t **/\n\tp.uncache = function() {\n\t\tthis._cacheDataURL = this.cacheCanvas = null;\n\t\tthis.cacheID = this._cacheOffsetX = this._cacheOffsetY = this._filterOffsetX = this._filterOffsetY = 0;\n\t\tthis._cacheScale = 1;\n\t};\n\t\n\t/**\n\t * Returns a data URL for the cache, or null if this display object is not cached.\n\t * Uses cacheID to ensure a new data URL is not generated if the cache has not changed.\n\t * @method getCacheDataURL\n\t * @return {String} The image data url for the cache.\n\t **/\n\tp.getCacheDataURL = function() {\n\t\tif (!this.cacheCanvas) { return null; }\n\t\tif (this.cacheID != this._cacheDataURLID) { this._cacheDataURL = this.cacheCanvas.toDataURL(); }\n\t\treturn this._cacheDataURL;\n\t};\n\n\t/**\n\t * Transforms the specified x and y position from the coordinate space of the display object\n\t * to the global (stage) coordinate space. For example, this could be used to position an HTML label\n\t * over a specific point on a nested display object. Returns a Point instance with x and y properties\n\t * correlating to the transformed coordinates on the stage.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.x = 300;\n\t *      displayObject.y = 200;\n\t *      stage.addChild(displayObject);\n\t *      var point = displayObject.localToGlobal(100, 100);\n\t *      // Results in x=400, y=300\n\t *\n\t * @method localToGlobal\n\t * @param {Number} x The x position in the source display object to transform.\n\t * @param {Number} y The y position in the source display object to transform.\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n\t * @return {Point} A Point instance with x and y properties correlating to the transformed coordinates\n\t * on the stage.\n\t **/\n\tp.localToGlobal = function(x, y, pt) {\n\t\treturn this.getConcatenatedMatrix(this._props.matrix).transformPoint(x,y, pt||new createjs.Point());\n\t};\n\n\t/**\n\t * Transforms the specified x and y position from the global (stage) coordinate space to the\n\t * coordinate space of the display object. For example, this could be used to determine\n\t * the current mouse position within the display object. Returns a Point instance with x and y properties\n\t * correlating to the transformed position in the display object's coordinate space.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.x = 300;\n\t *      displayObject.y = 200;\n\t *      stage.addChild(displayObject);\n\t *      var point = displayObject.globalToLocal(100, 100);\n\t *      // Results in x=-200, y=-100\n\t *\n\t * @method globalToLocal\n\t * @param {Number} x The x position on the stage to transform.\n\t * @param {Number} y The y position on the stage to transform.\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n\t * @return {Point} A Point instance with x and y properties correlating to the transformed position in the\n\t * display object's coordinate space.\n\t **/\n\tp.globalToLocal = function(x, y, pt) {\n\t\treturn this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x,y, pt||new createjs.Point());\n\t};\n\n\t/**\n\t * Transforms the specified x and y position from the coordinate space of this display object to the coordinate\n\t * space of the target display object. Returns a Point instance with x and y properties correlating to the\n\t * transformed position in the target's coordinate space. Effectively the same as using the following code with\n\t * {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\t *\n\t *      var pt = this.localToGlobal(x, y);\n\t *      pt = target.globalToLocal(pt.x, pt.y);\n\t *\n\t * @method localToLocal\n\t * @param {Number} x The x position in the source display object to transform.\n\t * @param {Number} y The y position on the source display object to transform.\n\t * @param {DisplayObject} target The target display object to which the coordinates will be transformed.\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \n\t * @return {Point} Returns a Point instance with x and y properties correlating to the transformed position\n\t * in the target's coordinate space.\n\t **/\n\tp.localToLocal = function(x, y, target, pt) {\n\t\tpt = this.localToGlobal(x, y, pt);\n\t\treturn target.globalToLocal(pt.x, pt.y, pt);\n\t};\n\n\t/**\n\t * Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\n\t * Omitted parameters will have the default value set.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.setTransform(100, 100, 2, 2);\n\t *\n\t * @method setTransform\n\t * @param {Number} [x=0] The horizontal translation (x position) in pixels\n\t * @param {Number} [y=0] The vertical translation (y position) in pixels\n\t * @param {Number} [scaleX=1] The horizontal scale, as a percentage of 1\n\t * @param {Number} [scaleY=1] the vertical scale, as a percentage of 1\n\t * @param {Number} [rotation=0] The rotation, in degrees\n\t * @param {Number} [skewX=0] The horizontal skew factor\n\t * @param {Number} [skewY=0] The vertical skew factor\n\t * @param {Number} [regX=0] The horizontal registration point in pixels\n\t * @param {Number} [regY=0] The vertical registration point in pixels\n\t * @return {DisplayObject} Returns this instance. Useful for chaining commands.\n\t * @chainable\n\t*/\n\tp.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.scaleX = scaleX == null ? 1 : scaleX;\n\t\tthis.scaleY = scaleY == null ? 1 : scaleY;\n\t\tthis.rotation = rotation || 0;\n\t\tthis.skewX = skewX || 0;\n\t\tthis.skewY = skewY || 0;\n\t\tthis.regX = regX || 0;\n\t\tthis.regY = regY || 0;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a matrix based on this object's current transform.\n\t * @method getMatrix\n\t * @param {Matrix2D} matrix Optional. A Matrix2D object to populate with the calculated values. If null, a new\n\t * Matrix object is returned.\n\t * @return {Matrix2D} A matrix representing this display object's transform.\n\t **/\n\tp.getMatrix = function(matrix) {\n\t\tvar o = this, mtx = matrix&&matrix.identity() || new createjs.Matrix2D();\n\t\treturn o.transformMatrix ?  mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t};\n\t\n\t/**\n\t * Generates a Matrix2D object representing the combined transform of the display object and all of its\n\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}). This can\n\t * be used to transform positions between coordinate spaces, such as with {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\t * @method getConcatenatedMatrix\n\t * @param {Matrix2D} [matrix] A {{#crossLink \"Matrix2D\"}}{{/crossLink}} object to populate with the calculated values.\n\t * If null, a new Matrix2D object is returned.\n\t * @return {Matrix2D} The combined matrix.\n\t **/\n\tp.getConcatenatedMatrix = function(matrix) {\n\t\tvar o = this, mtx = this.getMatrix(matrix);\n\t\twhile (o = o.parent) {\n\t\t\tmtx.prependMatrix(o.getMatrix(o._props.matrix));\n\t\t}\n\t\treturn mtx;\n\t};\n\t\n\t/**\n\t * Generates a DisplayProps object representing the combined display properties of the  object and all of its\n\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}).\n\t * @method getConcatenatedDisplayProps\n\t * @param {DisplayProps} [props] A {{#crossLink \"DisplayProps\"}}{{/crossLink}} object to populate with the calculated values.\n\t * If null, a new DisplayProps object is returned.\n\t * @return {DisplayProps} The combined display properties.\n\t **/\n\tp.getConcatenatedDisplayProps = function(props) {\n\t\tprops = props ? props.identity() : new createjs.DisplayProps();\n\t\tvar o = this, mtx = o.getMatrix(props.matrix); \n\t\tdo {\n\t\t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation);\n\t\t\t\n\t\t\t// we do this to avoid problems with the matrix being used for both operations when o._props.matrix is passed in as the props param.\n\t\t\t// this could be simplified (ie. just done as part of the prepend above) if we switched to using a pool.\n\t\t\tif (o != this) { mtx.prependMatrix(o.getMatrix(o._props.matrix)); }\n\t\t} while (o = o.parent);\n\t\treturn props;\n\t};\n\n\t/**\n\t * Tests whether the display object intersects the specified point in <em>local</em> coordinates (ie. draws a pixel\n\t * with alpha > 0 at the specified position). This ignores the alpha, shadow, hitArea, mask, and compositeOperation\n\t * of the display object.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \t\tvar myShape = new createjs.Shape();\n\t * \t\tmyShape.graphics.beginFill(\"red\").drawRect(100, 100, 20, 50);\n\t *\n\t * \t\tconsole.log(myShape.hitTest(10,10); // false\n\t * \t\tconsole.log(myShape.hitTest(110, 25); // true\n\t *\n\t * Note that to use Stage coordinates (such as {{#crossLink \"Stage/mouseX:property\"}}{{/crossLink}}), they must\n\t * first be converted to local coordinates:\n\t *\n\t *      stage.addEventListener(\"stagemousedown\", handleMouseDown);\n\t *      function handleMouseDown(event) {\n\t *      \tvar p = myShape.globalToLocal(stage.mouseX, stage.mouseY);\n\t *          var hit = myShape.hitTest(p.x, p.y);\n\t *      }\n\t *\n\t * Shape-to-shape collision is not currently supported by EaselJS.\n\t *\n\t * @method hitTest\n\t * @param {Number} x The x position to check in the display object's local coordinates.\n\t * @param {Number} y The y position to check in the display object's local coordinates.\n\t * @return {Boolean} A Boolean indicating whether a visible portion of the DisplayObject intersect the specified\n\t * local Point.\n\t*/\n\tp.hitTest = function(x, y) {\n\t\tvar ctx = DisplayObject._hitTestContext;\n\t\tctx.setTransform(1, 0, 0, 1, -x, -y);\n\t\tthis.draw(ctx);\n\n\t\tvar hit = this._testHit(ctx);\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tctx.clearRect(0, 0, 2, 2);\n\t\treturn hit;\n\t};\n\t\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var myGraphics = new createjs.Graphics().beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n\t *      var shape = stage.addChild(new createjs.Shape()).set({graphics:myGraphics, x:100, y:100, alpha:0.5});\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the DisplayObject instance.\n\t * @return {DisplayObject} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a rectangle representing this object's bounds in its local coordinate system (ie. with no transformation).\n\t * Objects that have been cached will return the bounds of the cache.\n\t * \n\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n\t * bounds.\n\t * \n\t * <table>\n\t * \t<tr><td><b>All</b></td><td>\n\t * \t\tAll display objects support setting bounds manually using setBounds(). Likewise, display objects that\n\t * \t\thave been cached using cache() will return the bounds of their cache. Manual and cache bounds will override\n\t * \t\tthe automatic calculations listed below.\n\t * \t</td></tr>\n\t * \t<tr><td><b>Bitmap</b></td><td>\n\t * \t\tReturns the width and height of the sourceRect (if specified) or image, extending from (x=0,y=0).\n\t * \t</td></tr>\n\t * \t<tr><td><b>Sprite</b></td><td>\n\t * \t\tReturns the bounds of the current frame. May have non-zero x/y if a frame registration point was specified\n\t * \t\tin the spritesheet data. See also {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}}\n\t * \t</td></tr>\n\t * \t<tr><td><b>Container</b></td><td>\n\t * \t\tReturns the aggregate (combined) bounds of all children that return a non-null value from getBounds().\n\t * \t</td></tr>\n\t * \t<tr><td><b>Shape</b></td><td>\n\t * \t\tDoes not currently support automatic bounds calculations. Use setBounds() to manually define bounds.\n\t * \t</td></tr>\n\t * \t<tr><td><b>Text</b></td><td>\n\t * \t\tReturns approximate bounds. Horizontal values (x/width) are quite accurate, but vertical values (y/height) are\n\t * \t\tnot, especially when using textBaseline values other than \"top\".\n\t * \t</td></tr>\n\t * \t<tr><td><b>BitmapText</b></td><td>\n\t * \t\tReturns approximate bounds. Values will be more accurate if spritesheet frame registration points are close\n\t * \t\tto (x=0,y=0).\n\t * \t</td></tr>\n\t* </table>\n\t * \n\t * Bounds can be expensive to calculate for some objects (ex. text, or containers with many children), and\n\t * are recalculated each time you call getBounds(). You can prevent recalculation on static objects by setting the\n\t * bounds explicitly:\n\t * \n\t * \tvar bounds = obj.getBounds();\n\t * \tobj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);\n\t * \t// getBounds will now use the set values, instead of recalculating\n\t * \n\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n\t * values if you need to retain it.\n\t * \n\t * \tvar myBounds = obj.getBounds().clone();\n\t * \t// OR:\n\t * \tmyRect.copy(obj.getBounds());\n\t * \n\t * @method getBounds\n\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this\n\t * object.\n\t **/\n\tp.getBounds = function() {\n\t\tif (this._bounds) { return this._rectangle.copy(this._bounds); }\n\t\tvar cacheCanvas = this.cacheCanvas;\n\t\tif (cacheCanvas) {\n\t\t\tvar scale = this._cacheScale;\n\t\t\treturn this._rectangle.setValues(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);\n\t\t}\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Returns a rectangle representing this object's bounds in its parent's coordinate system (ie. with transformations applied).\n\t * Objects that have been cached will return the transformed bounds of the cache.\n\t * \n\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n\t * bounds.\n\t * \n\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n\t * values if you need to retain it.\n\t * \n\t * Container instances calculate aggregate bounds for all children that return bounds via getBounds.\n\t * @method getTransformedBounds\n\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.\n\t **/\n\tp.getTransformedBounds = function() {\n\t\treturn this._getBounds();\n\t};\n\t\n\t/**\n\t * Allows you to manually specify the bounds of an object that either cannot calculate their own bounds (ex. Shape &\n\t * Text) for future reference, or so the object can be included in Container bounds. Manually set bounds will always\n\t * override calculated bounds.\n\t * \n\t * The bounds should be specified in the object's local (untransformed) coordinates. For example, a Shape instance\n\t * with a 25px radius circle centered at 0,0 would have bounds of (-25, -25, 50, 50).\n\t * @method setBounds\n\t * @param {Number} x The x origin of the bounds. Pass null to remove the manual bounds.\n\t * @param {Number} y The y origin of the bounds.\n\t * @param {Number} width The width of the bounds.\n\t * @param {Number} height The height of the bounds.\n\t **/\n\tp.setBounds = function(x, y, width, height) {\n\t\tif (x == null) { this._bounds = x; }\n\t\tthis._bounds = (this._bounds || new createjs.Rectangle()).setValues(x, y, width, height);\n\t};\n\n\t/**\n\t * Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\n\t * reverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements\n\t * are copied by reference (masks, individual filter instances, hit area)\n\t * @method clone\n\t * @return {DisplayObject} A clone of the current DisplayObject instance.\n\t **/\n\tp.clone = function() {\n\t\treturn this._cloneProps(new DisplayObject());\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[DisplayObject (name=\"+  this.name +\")]\";\n\t};\n\n\n// private methods:\n\t// separated so it can be used more easily in subclasses:\n\t/**\n\t * @method _cloneProps\n\t * @param {DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject\n\t * instance copied into.\n\t * @return {DisplayObject} o\n\t * @protected\n\t **/\n\tp._cloneProps = function(o) {\n\t\to.alpha = this.alpha;\n\t\to.mouseEnabled = this.mouseEnabled;\n\t\to.tickEnabled = this.tickEnabled;\n\t\to.name = this.name;\n\t\to.regX = this.regX;\n\t\to.regY = this.regY;\n\t\to.rotation = this.rotation;\n\t\to.scaleX = this.scaleX;\n\t\to.scaleY = this.scaleY;\n\t\to.shadow = this.shadow;\n\t\to.skewX = this.skewX;\n\t\to.skewY = this.skewY;\n\t\to.visible = this.visible;\n\t\to.x  = this.x;\n\t\to.y = this.y;\n\t\to.compositeOperation = this.compositeOperation;\n\t\to.snapToPixel = this.snapToPixel;\n\t\to.filters = this.filters==null?null:this.filters.slice(0);\n\t\to.mask = this.mask;\n\t\to.hitArea = this.hitArea;\n\t\to.cursor = this.cursor;\n\t\to._bounds = this._bounds;\n\t\treturn o;\n\t};\n\n\t/**\n\t * @method _applyShadow\n\t * @protected\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {Shadow} shadow\n\t **/\n\tp._applyShadow = function(ctx, shadow) {\n\t\tshadow = shadow || Shadow.identity;\n\t\tctx.shadowColor = shadow.color;\n\t\tctx.shadowOffsetX = shadow.offsetX;\n\t\tctx.shadowOffsetY = shadow.offsetY;\n\t\tctx.shadowBlur = shadow.blur;\n\t};\n\t\n\t\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * @protected\n\t **/\n\tp._tick = function(evtObj) {\n\t\t// because tick can be really performance sensitive, check for listeners before calling dispatchEvent.\n\t\tvar ls = this._listeners;\n\t\tif (ls && ls[\"tick\"]) {\n\t\t\t// reset & reuse the event object to avoid construction / GC costs:\n\t\t\tevtObj.target = null;\n\t\t\tevtObj.propagationStopped = evtObj.immediatePropagationStopped = false;\n\t\t\tthis.dispatchEvent(evtObj);\n\t\t}\n\t};\n\n\t/**\n\t * @method _testHit\n\t * @protected\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @return {Boolean}\n\t **/\n\tp._testHit = function(ctx) {\n\t\ttry {\n\t\t\tvar hit = ctx.getImageData(0, 0, 1, 1).data[3] > 1;\n\t\t} catch (e) {\n\t\t\tif (!DisplayObject.suppressCrossDomainErrors) {\n\t\t\t\tthrow \"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.\";\n\t\t\t}\n\t\t}\n\t\treturn hit;\n\t};\n\n\t/**\n\t * @method _applyFilters\n\t * @protected\n\t **/\n\tp._applyFilters = function() {\n\t\tif (!this.filters || this.filters.length == 0 || !this.cacheCanvas) { return; }\n\t\tvar l = this.filters.length;\n\t\tvar ctx = this.cacheCanvas.getContext(\"2d\");\n\t\tvar w = this.cacheCanvas.width;\n\t\tvar h = this.cacheCanvas.height;\n\t\tfor (var i=0; i<l; i++) {\n\t\t\tthis.filters[i].applyFilter(ctx, 0, 0, w, h);\n\t\t}\n\t};\n\t\n\t/**\n\t * @method _getFilterBounds\n\t * @return {Rectangle}\n\t * @protected\n\t **/\n\tp._getFilterBounds = function(rect) {\n\t\tvar l, filters = this.filters, bounds = this._rectangle.setValues(0,0,0,0);\n\t\tif (!filters || !(l=filters.length)) { return bounds; }\n\t\t\n\t\tfor (var i=0; i<l; i++) {\n\t\t\tvar f = this.filters[i];\n\t\t\tf.getBounds&&f.getBounds(bounds);\n\t\t}\n\t\treturn bounds;\n\t};\n\t\n\t/**\n\t * @method _getBounds\n\t * @param {Matrix2D} matrix\n\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n\t * @return {Rectangle}\n\t * @protected\n\t **/\n\tp._getBounds = function(matrix, ignoreTransform){\n\t\treturn this._transformBounds(this.getBounds(), matrix, ignoreTransform);\n\t};\n\t\n\t/**\n\t * @method _transformBounds\n\t * @param {Rectangle} bounds\n\t * @param {Matrix2D} matrix\n\t * @param {Boolean} ignoreTransform\n\t * @return {Rectangle}\n\t * @protected\n\t **/\n\tp._transformBounds = function(bounds, matrix, ignoreTransform) {\n\t\tif (!bounds) { return bounds; }\n\t\tvar x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height, mtx = this._props.matrix;\n\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\t\t\n\t\tif (x || y) { mtx.appendTransform(0,0,1,1,0,0,0,-x,-y); } // TODO: simplify this.\n\t\tif (matrix) { mtx.prependMatrix(matrix); }\n\t\t\n\t\tvar x_a = width*mtx.a, x_b = width*mtx.b;\n\t\tvar y_c = height*mtx.c, y_d = height*mtx.d;\n\t\tvar tx = mtx.tx, ty = mtx.ty;\n\t\t\n\t\tvar minX = tx, maxX = tx, minY = ty, maxY = ty;\n\n\t\tif ((x = x_a + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\tif ((x = x_a + y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\tif ((x = y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\t\n\t\tif ((y = x_b + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\tif ((y = x_b + y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\tif ((y = y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\t\n\t\treturn bounds.setValues(minX, minY, maxX-minX, maxY-minY);\n\t};\n\t\n\t/**\n\t * Indicates whether the display object has any mouse event listeners or a cursor.\n\t * @method _isMouseOpaque\n\t * @return {Boolean}\n\t * @protected\n\t **/\n\tp._hasMouseEventListener = function() {\n\t\tvar evts = DisplayObject._MOUSE_EVENTS;\n\t\tfor (var i= 0, l=evts.length; i<l; i++) {\n\t\t\tif (this.hasEventListener(evts[i])) { return true; }\n\t\t}\n\t\treturn !!this.cursor;\n\t};\n\n\tcreatejs.DisplayObject = createjs.promote(DisplayObject, \"EventDispatcher\");\n}());\n\n//##############################################################################\n// Container.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\t\n\n// constructor:\n/**\n * A Container is a nestable display list that allows you to work with compound display elements. For  example you could\n * group arm, leg, torso and head {{#crossLink \"Bitmap\"}}{{/crossLink}} instances together into a Person Container, and\n * transform them as a group, while still being able to move the individual parts relative to each other. Children of\n * containers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent\n * Container.\n *\n * For example, a {{#crossLink \"Shape\"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>\n * and <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.\n * Containers have some overhead, so you generally shouldn't create a Container to hold a single child.\n *\n * <h4>Example</h4>\n *\n *      var container = new createjs.Container();\n *      container.addChild(bitmapInstance, shapeInstance);\n *      container.x = 100;\n *\n * @class Container\n * @extends DisplayObject\n * @constructor\n **/\n\tfunction Container() {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The array of children in the display list. You should usually use the child management methods such as\n\t\t * {{#crossLink \"Container/addChild\"}}{{/crossLink}}, {{#crossLink \"Container/removeChild\"}}{{/crossLink}},\n\t\t * {{#crossLink \"Container/swapChildren\"}}{{/crossLink}}, etc, rather than accessing this directly, but it is\n\t\t * included for advanced uses.\n\t\t * @property children\n\t\t * @type Array\n\t\t * @default null\n\t\t **/\n\t\tthis.children = [];\n\t\t\n\t\t/**\n\t\t * Indicates whether the children of this container are independently enabled for mouse/pointer interaction.\n\t\t * If false, the children will be aggregated under the container - for example, a click on a child shape would\n\t\t * trigger a click event on the container.\n\t\t * @property mouseChildren\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.mouseChildren = true;\n\t\t\n\t\t/**\n\t\t * If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.\n\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n\t\t * @property tickChildren\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.tickChildren = true;\n\t}\n\tvar p = createjs.extend(Container, createjs.DisplayObject);\n\t\n\t\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"Container/numChildren:property\"}}{{/crossLink}} property instead.\n\t * @method getNumChildren\n\t * @return {Number}\n\t * @deprecated\n\t **/\n\tp.getNumChildren = function() {\n\t\treturn this.children.length;\n\t};\n\n\t/**\n\t * Returns the number of children in the container.\n\t * @property numChildren\n\t * @type {Number}\n\t * @readonly\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tnumChildren: { get: p.getNumChildren }\n\t\t});\n\t} catch (e) {}\n\t\n\n// public methods:\n\t/**\n\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t * @method initialize\n\t * @deprecated in favour of `createjs.promote()`\n\t **/\n\tp.initialize = Container; // TODO: deprecated.\n\t\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || this.children.length;\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\t\n\t\t// this ensures we don't have issues with display list changes that occur during a draw:\n\t\tvar list = this.children.slice();\n\t\tfor (var i=0,l=list.length; i<l; i++) {\n\t\t\tvar child = list[i];\n\t\t\tif (!child.isVisible()) { continue; }\n\t\t\t\n\t\t\t// draw the child:\n\t\t\tctx.save();\n\t\t\tchild.updateContext(ctx);\n\t\t\tchild.draw(ctx);\n\t\t\tctx.restore();\n\t\t}\n\t\treturn true;\n\t};\n\t\n\t/**\n\t * Adds a child to the top of the display list.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \t\tcontainer.addChild(bitmapInstance);\n\t *\n\t * You can also add multiple children at once:\n\t *\n\t * \t\tcontainer.addChild(bitmapInstance, shapeInstance, textInstance);\n\t *\n\t * @method addChild\n\t * @param {DisplayObject} child The display object to add.\n\t * @return {DisplayObject} The child that was added, or the last child if multiple children were added.\n\t **/\n\tp.addChild = function(child) {\n\t\tif (child == null) { return child; }\n\t\tvar l = arguments.length;\n\t\tif (l > 1) {\n\t\t\tfor (var i=0; i<l; i++) { this.addChild(arguments[i]); }\n\t\t\treturn arguments[l-1];\n\t\t}\n\t\tif (child.parent) { child.parent.removeChild(child); }\n\t\tchild.parent = this;\n\t\tthis.children.push(child);\n\t\tchild.dispatchEvent(\"added\");\n\t\treturn child;\n\t};\n\n\t/**\n\t * Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\n\t * setting its parent to this Container.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      addChildAt(child1, index);\n\t *\n\t * You can also add multiple children, such as:\n\t *\n\t *      addChildAt(child1, child2, ..., index);\n\t *\n\t * The index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\n\t * you could use:\n\t *\n\t *      container.addChildAt(myShape, container.getChildIndex(otherShape));\n\t *\n\t * This would also bump otherShape's index up by one. Fails silently if the index is out of range.\n\t *\n\t * @method addChildAt\n\t * @param {DisplayObject} child The display object to add.\n\t * @param {Number} index The index to add the child at.\n\t * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.\n\t **/\n\tp.addChildAt = function(child, index) {\n\t\tvar l = arguments.length;\n\t\tvar indx = arguments[l-1]; // can't use the same name as the index param or it replaces arguments[1]\n\t\tif (indx < 0 || indx > this.children.length) { return arguments[l-2]; }\n\t\tif (l > 2) {\n\t\t\tfor (var i=0; i<l-1; i++) { this.addChildAt(arguments[i], indx+i); }\n\t\t\treturn arguments[l-2];\n\t\t}\n\t\tif (child.parent) { child.parent.removeChild(child); }\n\t\tchild.parent = this;\n\t\tthis.children.splice(index, 0, child);\n\t\tchild.dispatchEvent(\"added\");\n\t\treturn child;\n\t};\n\n\t/**\n\t * Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is\n\t * already known.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      container.removeChild(child);\n\t *\n\t * You can also remove multiple children:\n\t *\n\t *      removeChild(child1, child2, ...);\n\t *\n\t * Returns true if the child (or children) was removed, or false if it was not in the display list.\n\t * @method removeChild\n\t * @param {DisplayObject} child The child to remove.\n\t * @return {Boolean} true if the child (or children) was removed, or false if it was not in the display list.\n\t **/\n\tp.removeChild = function(child) {\n\t\tvar l = arguments.length;\n\t\tif (l > 1) {\n\t\t\tvar good = true;\n\t\t\tfor (var i=0; i<l; i++) { good = good && this.removeChild(arguments[i]); }\n\t\t\treturn good;\n\t\t}\n\t\treturn this.removeChildAt(createjs.indexOf(this.children, child));\n\t};\n\n\t/**\n\t * Removes the child at the specified index from the display list, and sets its parent to null.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      container.removeChildAt(2);\n\t *\n\t * You can also remove multiple children:\n\t *\n\t *      container.removeChild(2, 7, ...)\n\t *\n\t * Returns true if the child (or children) was removed, or false if any index was out of range.\n\t * @method removeChildAt\n\t * @param {Number} index The index of the child to remove.\n\t * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.\n\t **/\n\tp.removeChildAt = function(index) {\n\t\tvar l = arguments.length;\n\t\tif (l > 1) {\n\t\t\tvar a = [];\n\t\t\tfor (var i=0; i<l; i++) { a[i] = arguments[i]; }\n\t\t\ta.sort(function(a, b) { return b-a; });\n\t\t\tvar good = true;\n\t\t\tfor (var i=0; i<l; i++) { good = good && this.removeChildAt(a[i]); }\n\t\t\treturn good;\n\t\t}\n\t\tif (index < 0 || index > this.children.length-1) { return false; }\n\t\tvar child = this.children[index];\n\t\tif (child) { child.parent = null; }\n\t\tthis.children.splice(index, 1);\n\t\tchild.dispatchEvent(\"removed\");\n\t\treturn true;\n\t};\n\n\t/**\n\t * Removes all children from the display list.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \tcontainer.removeAllChildren();\n\t *\n\t * @method removeAllChildren\n\t **/\n\tp.removeAllChildren = function() {\n\t\tvar kids = this.children;\n\t\twhile (kids.length) { this.removeChildAt(0); }\n\t};\n\n\t/**\n\t * Returns the child at the specified index.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      container.getChildAt(2);\n\t *\n\t * @method getChildAt\n\t * @param {Number} index The index of the child to return.\n\t * @return {DisplayObject} The child at the specified index. Returns null if there is no child at the index.\n\t **/\n\tp.getChildAt = function(index) {\n\t\treturn this.children[index];\n\t};\n\t\n\t/**\n\t * Returns the child with the specified name.\n\t * @method getChildByName\n\t * @param {String} name The name of the child to return.\n\t * @return {DisplayObject} The child with the specified name.\n\t **/\n\tp.getChildByName = function(name) {\n\t\tvar kids = this.children;\n\t\tfor (var i=0,l=kids.length;i<l;i++) {\n\t\t\tif(kids[i].name == name) { return kids[i]; }\n\t\t}\n\t\treturn null;\n\t};\n\n\t/**\n\t * Performs an array sort operation on the child list.\n\t *\n\t * <h4>Example: Display children with a higher y in front.</h4>\n\t * \n\t *      var sortFunction = function(obj1, obj2, options) {\n\t *          if (obj1.y > obj2.y) { return 1; }\n\t *          if (obj1.y < obj2.y) { return -1; }\n\t *          return 0;\n\t *      }\n\t *      container.sortChildren(sortFunction);\n\t *\n\t * @method sortChildren\n\t * @param {Function} sortFunction the function to use to sort the child list. See JavaScript's <code>Array.sort</code>\n\t * documentation for details.\n\t **/\n\tp.sortChildren = function(sortFunction) {\n\t\tthis.children.sort(sortFunction);\n\t};\n\n\t/**\n\t * Returns the index of the specified child in the display list, or -1 if it is not in the display list.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var index = container.getChildIndex(child);\n\t *\n\t * @method getChildIndex\n\t * @param {DisplayObject} child The child to return the index of.\n\t * @return {Number} The index of the specified child. -1 if the child is not found.\n\t **/\n\tp.getChildIndex = function(child) {\n\t\treturn createjs.indexOf(this.children, child);\n\t};\n\t\n\t/**\n\t * Swaps the children at the specified indexes. Fails silently if either index is out of range.\n\t * @method swapChildrenAt\n\t * @param {Number} index1\n\t * @param {Number} index2\n\t **/\n\tp.swapChildrenAt = function(index1, index2) {\n\t\tvar kids = this.children;\n\t\tvar o1 = kids[index1];\n\t\tvar o2 = kids[index2];\n\t\tif (!o1 || !o2) { return; }\n\t\tkids[index1] = o2;\n\t\tkids[index2] = o1;\n\t};\n\t\n\t/**\n\t * Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this\n\t * Container.\n\t * @method swapChildren\n\t * @param {DisplayObject} child1\n\t * @param {DisplayObject} child2\n\t **/\n\tp.swapChildren = function(child1, child2) {\n\t\tvar kids = this.children;\n\t\tvar index1,index2;\n\t\tfor (var i=0,l=kids.length;i<l;i++) {\n\t\t\tif (kids[i] == child1) { index1 = i; }\n\t\t\tif (kids[i] == child2) { index2 = i; }\n\t\t\tif (index1 != null && index2 != null) { break; }\n\t\t}\n\t\tif (i==l) { return; } // TODO: throw error?\n\t\tkids[index1] = child2;\n\t\tkids[index2] = child1;\n\t};\n\t\n\t/**\n\t * Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.\n\t * @param {DisplayObject} child\n\t * @param {Number} index  \n\t * @method setChildIndex\n\t **/\n\tp.setChildIndex = function(child, index) {\n\t\tvar kids = this.children, l=kids.length;\n\t\tif (child.parent != this || index < 0 || index >= l) { return; }\n\t\tfor (var i=0;i<l;i++) {\n\t\t\tif (kids[i] == child) { break; }\n\t\t}\n\t\tif (i==l || i == index) { return; }\n\t\tkids.splice(i,1);\n\t\tkids.splice(index,0,child);\n\t};\n\n\t/**\n\t * Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)\n\t * of this container.\n\t * @method contains\n\t * @param {DisplayObject} child The DisplayObject to be checked.\n\t * @return {Boolean} true if the specified display object either is this container or is a descendent.\n\t **/\n\tp.contains = function(child) {\n\t\twhile (child) {\n\t\t\tif (child == this) { return true; }\n\t\t\tchild = child.parent;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the\n\t * specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\n\t * transform properties including regX/Y.\n\t * @method hitTest\n\t * @param {Number} x The x position to check in the display object's local coordinates.\n\t * @param {Number} y The y position to check in the display object's local coordinates.\n\t * @return {Boolean} A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\n\t * coordinates.\n\t **/\n\tp.hitTest = function(x, y) {\n\t\t// TODO: optimize to use the fast cache check where possible.\n\t\treturn (this.getObjectUnderPoint(x, y) != null);\n\t};\n\n\t/**\n\t * Returns an array of all display objects under the specified coordinates that are in this container's display\n\t * list. This routine ignores any display objects with {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n\t * set to `false`. The array will be sorted in order of visual depth, with the top-most display object at index 0.\n\t * This uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.\n\t * For example, if testing for objects under the mouse, test on tick (instead of on {{#crossLink \"DisplayObject/mousemove:event\"}}{{/crossLink}}),\n\t * and only if the mouse's position has changed.\n\t * \n\t * <ul>\n\t *     <li>By default (mode=0) this method evaluates all display objects.</li>\n\t *     <li>By setting the `mode` parameter to `1`, the {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n\t * \t\tand {{#crossLink \"mouseChildren:property\"}}{{/crossLink}} properties will be respected.</li>\n\t * \t   <li>Setting the `mode` to `2` additionally excludes display objects that do not have active mouse event\n\t * \t   \tlisteners or a {{#crossLink \"DisplayObject:cursor:property\"}}{{/crossLink}} property. That is, only objects\n\t * \t   \tthat would normally intercept mouse interaction will be included. This can significantly improve performance\n\t * \t   \tin some cases by reducing the number of display objects that need to be tested.</li>\n\t * </li>\n\t * \n\t * This method accounts for both {{#crossLink \"DisplayObject/hitArea:property\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/mask:property\"}}{{/crossLink}}.\n\t * @method getObjectsUnderPoint\n\t * @param {Number} x The x position in the container to test.\n\t * @param {Number} y The y position in the container to test.\n\t * @param {Number} [mode=0] The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n\t * @return {Array} An Array of DisplayObjects under the specified coordinates.\n\t **/\n\tp.getObjectsUnderPoint = function(x, y, mode) {\n\t\tvar arr = [];\n\t\tvar pt = this.localToGlobal(x, y);\n\t\tthis._getObjectsUnderPoint(pt.x, pt.y, arr, mode>0, mode==1);\n\t\treturn arr;\n\t};\n\n\t/**\n\t * Similar to {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}, but returns only the top-most display\n\t * object. This runs significantly faster than <code>getObjectsUnderPoint()</code>, but is still potentially an expensive\n\t * operation. See {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}} for more information.\n\t * @method getObjectUnderPoint\n\t * @param {Number} x The x position in the container to test.\n\t * @param {Number} y The y position in the container to test.\n\t * @param {Number} mode The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n\t * @return {DisplayObject} The top-most display object under the specified coordinates.\n\t **/\n\tp.getObjectUnderPoint = function(x, y, mode) {\n\t\tvar pt = this.localToGlobal(x, y);\n\t\treturn this._getObjectsUnderPoint(pt.x, pt.y, null, mode>0, mode==1);\n\t};\n\t\n\t/**\n\t * Docced in superclass.\n\t */\n\tp.getBounds = function() {\n\t\treturn this._getBounds(null, true);\n\t};\n\t\n\t\n\t/**\n\t * Docced in superclass.\n\t */\n\tp.getTransformedBounds = function() {\n\t\treturn this._getBounds();\n\t};\n\n\t/**\n\t * Returns a clone of this Container. Some properties that are specific to this instance's current context are\n\t * reverted to their defaults (for example .parent).\n\t * @method clone\n\t * @param {Boolean} [recursive=false] If true, all of the descendants of this container will be cloned recursively. If false, the\n\t * properties of the container will be cloned, but the new instance will not have any children.\n\t * @return {Container} A clone of the current Container instance.\n\t **/\n\tp.clone = function(recursive) {\n\t\tvar o = this._cloneProps(new Container());\n\t\tif (recursive) { this._cloneChildren(o); }\n\t\treturn o;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Container (name=\"+  this.name +\")]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * @protected\n\t **/\n\tp._tick = function(evtObj) {\n\t\tif (this.tickChildren) {\n\t\t\tfor (var i=this.children.length-1; i>=0; i--) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tif (child.tickEnabled && child._tick) { child._tick(evtObj); }\n\t\t\t}\n\t\t}\n\t\tthis.DisplayObject__tick(evtObj);\n\t};\n\t\n\t/**\n\t * Recursively clones all children of this container, and adds them to the target container.\n\t * @method cloneChildren\n\t * @protected\n\t * @param {Container} o The target container.\n\t **/\n\tp._cloneChildren = function(o) {\n\t\tif (o.children.length) { o.removeAllChildren(); }\n\t\tvar arr = o.children;\n\t\tfor (var i=0, l=this.children.length; i<l; i++) {\n\t\t\tvar clone = this.children[i].clone(true);\n\t\t\tclone.parent = o;\n\t\t\tarr.push(clone);\n\t\t}\n\t};\n\n\t/**\n\t * @method _getObjectsUnderPoint\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Array} arr\n\t * @param {Boolean} mouse If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.\n\t * @param {Boolean} activeListener If true, there is an active mouse event listener on a parent object.\n\t * @param {Number} currentDepth Indicates the current depth of the search.\n\t * @return {DisplayObject}\n\t * @protected\n\t **/\n\tp._getObjectsUnderPoint = function(x, y, arr, mouse, activeListener, currentDepth) {\n\t\tcurrentDepth = currentDepth || 0;\n\t\tif (!currentDepth && !this._testMask(this, x, y)) { return null; }\n\t\tvar mtx, ctx = createjs.DisplayObject._hitTestContext;\n\t\tactiveListener = activeListener || (mouse&&this._hasMouseEventListener());\n\n\t\t// draw children one at a time, and check if we get a hit:\n\t\tvar children = this.children, l = children.length;\n\t\tfor (var i=l-1; i>=0; i--) {\n\t\t\tvar child = children[i];\n\t\t\tvar hitArea = child.hitArea;\n\t\t\tif (!child.visible || (!hitArea && !child.isVisible()) || (mouse && !child.mouseEnabled)) { continue; }\n\t\t\tif (!hitArea && !this._testMask(child, x, y)) { continue; }\n\t\t\t\n\t\t\t// if a child container has a hitArea then we only need to check its hitArea, so we can treat it as a normal DO:\n\t\t\tif (!hitArea && child instanceof Container) {\n\t\t\t\tvar result = child._getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth+1);\n\t\t\t\tif (!arr && result) { return (mouse && !this.mouseChildren) ? this : result; }\n\t\t\t} else {\n\t\t\t\tif (mouse && !activeListener && !child._hasMouseEventListener()) { continue; }\n\t\t\t\t\n\t\t\t\t// TODO: can we pass displayProps forward, to avoid having to calculate this backwards every time? It's kind of a mixed bag. When we're only hunting for DOs with event listeners, it may not make sense.\n\t\t\t\tvar props = child.getConcatenatedDisplayProps(child._props);\n\t\t\t\tmtx = props.matrix;\n\t\t\t\t\n\t\t\t\tif (hitArea) {\n\t\t\t\t\tmtx.appendMatrix(hitArea.getMatrix(hitArea._props.matrix));\n\t\t\t\t\tprops.alpha = hitArea.alpha;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.globalAlpha = props.alpha;\n\t\t\t\tctx.setTransform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\n\t\t\t\t(hitArea||child).draw(ctx);\n\t\t\t\tif (!this._testHit(ctx)) { continue; }\n\t\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\t\tctx.clearRect(0, 0, 2, 2);\n\t\t\t\tif (arr) { arr.push(child); }\n\t\t\t\telse { return (mouse && !this.mouseChildren) ? this : child; }\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * @method _testMask\n\t * @param {DisplayObject} target\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Boolean} Indicates whether the x/y is within the masked region.\n\t * @protected\n\t **/\n\tp._testMask = function(target, x, y) {\n\t\tvar mask = target.mask;\n\t\tif (!mask || !mask.graphics || mask.graphics.isEmpty()) { return true; }\n\t\t\n\t\tvar mtx = this._props.matrix, parent = target.parent;\n\t\tmtx = parent ? parent.getConcatenatedMatrix(mtx) : mtx.identity();\n\t\tmtx = mask.getMatrix(mask._props.matrix).prependMatrix(mtx);\n\t\t\n\t\tvar ctx = createjs.DisplayObject._hitTestContext;\n\t\tctx.setTransform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\n\t\t\n\t\t// draw the mask as a solid fill:\n\t\tmask.graphics.drawAsPath(ctx);\n\t\tctx.fillStyle = \"#000\";\n\t\tctx.fill();\n\t\t\n\t\tif (!this._testHit(ctx)) { return false; }\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tctx.clearRect(0, 0, 2, 2);\n\t\t\n\t\treturn true;\n\t};\n\t\n\t/**\n\t * @method _getBounds\n\t * @param {Matrix2D} matrix\n\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n\t * @return {Rectangle}\n\t * @protected\n\t **/\n\tp._getBounds = function(matrix, ignoreTransform) {\n\t\tvar bounds = this.DisplayObject_getBounds();\n\t\tif (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }\n\t\t\n\t\tvar mtx = this._props.matrix;\n\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\t\tif (matrix) { mtx.prependMatrix(matrix); }\n\t\t\n\t\tvar l = this.children.length, rect=null;\n\t\tfor (var i=0; i<l; i++) {\n\t\t\tvar child = this.children[i];\n\t\t\tif (!child.visible || !(bounds = child._getBounds(mtx))) { continue; }\n\t\t\tif (rect) { rect.extend(bounds.x, bounds.y, bounds.width, bounds.height); }\n\t\t\telse { rect = bounds.clone(); }\n\t\t}\n\t\treturn rect;\n\t};\n\n\n\tcreatejs.Container = createjs.promote(Container, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Stage.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * A stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for a display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n\t * method is called, it will render its display list to its target canvas.\n\t *\n\t * <h4>Example</h4>\n\t * This example creates a stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\n\t * and redraw the stage using {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t *\n\t *      var stage = new createjs.Stage(\"canvasElementId\");\n\t *      var image = new createjs.Bitmap(\"imagePath.png\");\n\t *      stage.addChild(image);\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          image.x += 10;\n\t *          stage.update();\n\t *      }\n\t *\n\t * @class Stage\n\t * @extends Container\n\t * @constructor\n\t * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the Stage will render to, or the string id\n\t * of a canvas object in the current document.\n\t **/\n\tfunction Stage(canvas) {\n\t\tthis.Container_constructor();\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * Indicates whether the stage should automatically clear the canvas before each render. You can set this to <code>false</code>\n\t\t * to manually control clearing (for generative art, or when pointing multiple stages at the same canvas for\n\t\t * example).\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var stage = new createjs.Stage(\"canvasId\");\n\t\t *      stage.autoClear = false;\n\t\t *\n\t\t * @property autoClear\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.autoClear = true;\n\t\n\t\t/**\n\t\t * The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\n\t\t * first stage that will be ticked (or they will clear each other's render).\n\t\t *\n\t\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t\t * new canvas or mouse events will not work as expected. For example:\n\t\t *\n\t\t *      myStage.enableDOMEvents(false);\n\t\t *      myStage.canvas = anotherCanvas;\n\t\t *      myStage.enableDOMEvents(true);\n\t\t *\n\t\t * @property canvas\n\t\t * @type HTMLCanvasElement | Object\n\t\t **/\n\t\tthis.canvas = (typeof canvas == \"string\") ? document.getElementById(canvas) : canvas;\n\t\n\t\t/**\n\t\t * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t * @property mouseX\n\t\t * @type Number\n\t\t * @readonly\n\t\t **/\n\t\tthis.mouseX = 0;\n\t\n\t\t/**\n\t\t * The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t * @property mouseY\n\t\t * @type Number\n\t\t * @readonly\n\t\t **/\n\t\tthis.mouseY = 0;\n\t\n\t\t/**\n\t\t * Specifies the area of the stage to affect when calling update. This can be use to selectively\n\t\t * re-draw specific regions of the canvas. If null, the whole canvas area is drawn.\n\t\t * @property drawRect\n\t\t * @type {Rectangle}\n\t\t */\n\t\tthis.drawRect = null;\n\t\n\t\t/**\n\t\t * Indicates whether display objects should be rendered on whole pixels. You can set the\n\t\t * {{#crossLink \"DisplayObject/snapToPixel\"}}{{/crossLink}} property of\n\t\t * display objects to false to enable/disable this behaviour on a per instance basis.\n\t\t * @property snapToPixelEnabled\n\t\t * @type Boolean\n\t\t * @default false\n\t\t **/\n\t\tthis.snapToPixelEnabled = false;\n\t\n\t\t/**\n\t\t * Indicates whether the mouse is currently within the bounds of the canvas.\n\t\t * @property mouseInBounds\n\t\t * @type Boolean\n\t\t * @default false\n\t\t **/\n\t\tthis.mouseInBounds = false;\n\t\n\t\t/**\n\t\t * If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.\n\t\t * @property tickOnUpdate\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.tickOnUpdate = true;\n\t\n\t\t/**\n\t\t * If true, mouse move events will continue to be called when the mouse leaves the target canvas. See\n\t\t * {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}}, and {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t\t * x/y/rawX/rawY.\n\t\t * @property mouseMoveOutside\n\t\t * @type Boolean\n\t\t * @default false\n\t\t **/\n\t\tthis.mouseMoveOutside = false;\n\t\t\n\t\t\n\t\t/**\n\t\t * Prevents selection of other elements in the html page if the user clicks and drags, or double clicks on the canvas.\n\t\t * This works by calling `preventDefault()` on any mousedown events (or touch equivalent) originating on the canvas.\n\t\t * @property preventSelection\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.preventSelection = true;\n\t\n\t\t/**\n\t\t * The hitArea property is not supported for Stage.\n\t\t * @property hitArea\n\t\t * @type {DisplayObject}\n\t\t * @default null\n\t\t */\n\t\t \n\t\t \n\t// private properties:\n\t\t/**\n\t\t * Holds objects with data for each active pointer id. Each object has the following properties:\n\t\t * x, y, event, target, overTarget, overX, overY, inBounds, posEvtObj (native event that last updated position)\n\t\t * @property _pointerData\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._pointerData = {};\n\t\n\t\t/**\n\t\t * Number of active pointers.\n\t\t * @property _pointerCount\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._pointerCount = 0;\n\t\n\t\t/**\n\t\t * The ID of the primary pointer.\n\t\t * @property _primaryPointerID\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._primaryPointerID = null;\n\t\n\t\t/**\n\t\t * @property _mouseOverIntervalID\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._mouseOverIntervalID = null;\n\t\t\n\t\t/**\n\t\t * @property _nextStage\n\t\t * @protected\n\t\t * @type Stage\n\t\t **/\n\t\tthis._nextStage = null;\n\t\t\n\t\t/**\n\t\t * @property _prevStage\n\t\t * @protected\n\t\t * @type Stage\n\t\t **/\n\t\tthis._prevStage = null;\n\t\t\n\t\t\n\t// initialize:\n\t\tthis.enableDOMEvents(true);\n\t}\n\tvar p = createjs.extend(Stage, createjs.Container);\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// events:\n\t/**\n\t * Dispatched when the user moves the mouse over the canvas.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event stagemousemove\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user presses their left mouse button on the canvas. See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t * class for a listing of event properties.\n\t * @event stagemousedown\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user the user presses somewhere on the stage, then releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).\n\t * You can use {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}} to check whether the mouse is currently within the stage bounds.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event stagemouseup\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the mouse moves from within the canvas area (mouseInBounds == true) to outside it (mouseInBounds == false).\n\t * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t * class for a listing of event properties.\n\t * @event mouseleave\n\t * @since 0.7.0\n\t */\n\n\t/**\n\t * Dispatched when the mouse moves into the canvas area (mouseInBounds == false) from outside it (mouseInBounds == true).\n\t * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t * class for a listing of event properties.\n\t * @event mouseenter\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately before the tick event is propagated through the display list.\n\t * You can call preventDefault on the event object to cancel propagating the tick event.\n\t * @event tickstart\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately after the tick event is propagated through the display list. Does not fire if\n\t * tickOnUpdate is false. Precedes the \"drawstart\" event.\n\t * @event tickend\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.\n\t * You can call preventDefault on the event object to cancel the draw.\n\t * @event drawstart\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is restored.\n\t * @event drawend\n\t * @since 0.7.0\n\t */\n\n\t \n// getter / setters:\n\t/**\n\t * Specifies a target stage that will have mouse / touch interactions relayed to it after this stage handles them.\n\t * This can be useful in cases where you have multiple layered canvases and want user interactions\n\t * events to pass through. For example, this would relay mouse events from topStage to bottomStage:\n\t *\n\t *      topStage.nextStage = bottomStage;\n\t *\n\t * To disable relaying, set nextStage to null.\n\t * \n\t * MouseOver, MouseOut, RollOver, and RollOut interactions are also passed through using the mouse over settings\n\t * of the top-most stage, but are only processed if the target stage has mouse over interactions enabled.\n\t * Considerations when using roll over in relay targets:<OL>\n\t * <LI> The top-most (first) stage must have mouse over interactions enabled (via enableMouseOver)</LI>\n\t * <LI> All stages that wish to participate in mouse over interaction must enable them via enableMouseOver</LI>\n\t * <LI> All relay targets will share the frequency value of the top-most stage</LI>\n\t * </OL>\n\t * To illustrate, in this example the targetStage would process mouse over interactions at 10hz (despite passing\n\t * 30 as it's desired frequency):\n\t * \ttopStage.nextStage = targetStage;\n\t * \ttopStage.enableMouseOver(10);\n\t * \ttargetStage.enableMouseOver(30);\n\t * \n\t * If the target stage's canvas is completely covered by this stage's canvas, you may also want to disable its\n\t * DOM events using:\n\t * \n\t *\ttargetStage.enableDOMEvents(false);\n\t * \n\t * @property nextStage\n\t * @type {Stage}\n\t **/\n\tp._get_nextStage = function() {\n\t\treturn this._nextStage;\n\t};\n\tp._set_nextStage = function(value) {\n\t\tif (this._nextStage) { this._nextStage._prevStage = null; }\n\t\tif (value) { value._prevStage = this; }\n\t\tthis._nextStage = value;\n\t};\n\t\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tnextStage: { get: p._get_nextStage, set: p._set_nextStage }\n\t\t});\n\t} catch (e) {} // TODO: use Log\n\n\n// public methods:\n\t/**\n\t * Each time the update method is called, the stage will call {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false,\n\t * and then render the display list to the canvas.\n\t *\n\t * @method update\n\t * @param {Object} [props] Props object to pass to `tick()`. Should usually be a {{#crossLink \"Ticker\"}}{{/crossLink}} event object, or similar object with a delta property.\n\t **/\n\tp.update = function(props) {\n\t\tif (!this.canvas) { return; }\n\t\tif (this.tickOnUpdate) { this.tick(props); }\n\t\tif (this.dispatchEvent(\"drawstart\", false, true) === false) { return; }\n\t\tcreatejs.DisplayObject._snapToPixelEnabled = this.snapToPixelEnabled;\n\t\tvar r = this.drawRect, ctx = this.canvas.getContext(\"2d\");\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tif (this.autoClear) {\n\t\t\tif (r) { ctx.clearRect(r.x, r.y, r.width, r.height); }\n\t\t\telse { ctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1); }\n\t\t}\n\t\tctx.save();\n\t\tif (this.drawRect) {\n\t\t\tctx.beginPath();\n\t\t\tctx.rect(r.x, r.y, r.width, r.height);\n\t\t\tctx.clip();\n\t\t}\n\t\tthis.updateContext(ctx);\n\t\tthis.draw(ctx, false);\n\t\tctx.restore();\n\t\tthis.dispatchEvent(\"drawend\");\n\t};\n\t\n\t/**\n\t * Propagates a tick event through the display list. This is automatically called by {{#crossLink \"Stage/update\"}}{{/crossLink}}\n\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false.\n\t *\n\t * If a props object is passed to `tick()`, then all of its properties will be copied to the event object that is\n\t * propagated to listeners.\n\t *\n\t * Some time-based features in EaselJS (for example {{#crossLink \"Sprite/framerate\"}}{{/crossLink}} require that\n\t * a {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} event object (or equivalent object with a delta property) be\n\t * passed as the `props` parameter to `tick()`. For example:\n\t *\n\t * \tTicker.on(\"tick\", handleTick);\n\t * \tfunction handleTick(evtObj) {\n\t * \t\t// clone the event object from Ticker, and add some custom data to it:\n\t * \t\tvar evt = evtObj.clone().set({greeting:\"hello\", name:\"world\"});\n\t * \t\t\n\t * \t\t// pass it to stage.update():\n\t * \t\tmyStage.update(evt); // subsequently calls tick() with the same param\n\t * \t}\n\t * \t\n\t * \t// ...\n\t * \tmyDisplayObject.on(\"tick\", handleDisplayObjectTick);\n\t * \tfunction handleDisplayObjectTick(evt) {\n\t * \t\tconsole.log(evt.delta); // the delta property from the Ticker tick event object\n\t * \t\tconsole.log(evt.greeting, evt.name); // custom data: \"hello world\"\n\t * \t}\n\t * \n\t * @method tick\n\t * @param {Object} [props] An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.\n\t **/\n\tp.tick = function(props) {\n\t\tif (!this.tickEnabled || this.dispatchEvent(\"tickstart\", false, true) === false) { return; }\n\t\tvar evtObj = new createjs.Event(\"tick\");\n\t\tif (props) {\n\t\t\tfor (var n in props) {\n\t\t\t\tif (props.hasOwnProperty(n)) { evtObj[n] = props[n]; }\n\t\t\t}\n\t\t}\n\t\tthis._tick(evtObj);\n\t\tthis.dispatchEvent(\"tickend\");\n\t};\n\n\t/**\n\t * Default event handler that calls the Stage {{#crossLink \"Stage/update\"}}{{/crossLink}} method when a {{#crossLink \"DisplayObject/tick:event\"}}{{/crossLink}}\n\t * event is received. This allows you to register a Stage instance as a event listener on {{#crossLink \"Ticker\"}}{{/crossLink}}\n\t * directly, using:\n\t *\n\t *      Ticker.addEventListener(\"tick\", myStage\");\n\t *\n\t * Note that if you subscribe to ticks using this pattern, then the tick event object will be passed through to\n\t * display object tick handlers, instead of <code>delta</code> and <code>paused</code> parameters.\n\t * @property handleEvent\n\t * @type Function\n\t **/\n\tp.handleEvent = function(evt) {\n\t\tif (evt.type == \"tick\") { this.update(evt); }\n\t};\n\n\t/**\n\t * Clears the target canvas. Useful if {{#crossLink \"Stage/autoClear:property\"}}{{/crossLink}} is set to `false`.\n\t * @method clear\n\t **/\n\tp.clear = function() {\n\t\tif (!this.canvas) { return; }\n\t\tvar ctx = this.canvas.getContext(\"2d\");\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1);\n\t};\n\n\t/**\n\t * Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can\n\t * be specified as the src value of an image element.\n\t * @method toDataURL\n\t * @param {String} [backgroundColor] The background color to be used for the generated image. Any valid CSS color\n\t * value is allowed. The default value is a transparent background.\n\t * @param {String} [mimeType=\"image/png\"] The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\n\t * is passed in, or if the browser does not support the specified MIME type, the default value will be used.\n\t * @return {String} a Base64 encoded image.\n\t **/\n\tp.toDataURL = function(backgroundColor, mimeType) {\n\t\tvar data, ctx = this.canvas.getContext('2d'), w = this.canvas.width, h = this.canvas.height;\n\n\t\tif (backgroundColor) {\n\t\t\tdata = ctx.getImageData(0, 0, w, h);\n\t\t\tvar compositeOperation = ctx.globalCompositeOperation;\n\t\t\tctx.globalCompositeOperation = \"destination-over\";\n\t\t\t\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tctx.fillRect(0, 0, w, h);\n\t\t}\n\n\t\tvar dataURL = this.canvas.toDataURL(mimeType||\"image/png\");\n\n\t\tif(backgroundColor) {\n\t\t\tctx.putImageData(data, 0, 0);\n\t\t\tctx.globalCompositeOperation = compositeOperation;\n\t\t}\n\n\t\treturn dataURL;\n\t};\n\n\t/**\n\t * Enables or disables (by passing a frequency of 0) mouse over ({{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}) and roll over events ({{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}) for this stage's display list. These events can\n\t * be expensive to generate, so they are disabled by default. The frequency of the events can be controlled\n\t * independently of mouse move events via the optional `frequency` parameter.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var stage = new createjs.Stage(\"canvasId\");\n\t *      stage.enableMouseOver(10); // 10 updates per second\n\t *\n\t * @method enableMouseOver\n\t * @param {Number} [frequency=20] Optional param specifying the maximum number of times per second to broadcast\n\t * mouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less\n\t * responsive, but uses less CPU.\n\t **/\n\tp.enableMouseOver = function(frequency) {\n\t\tif (this._mouseOverIntervalID) {\n\t\t\tclearInterval(this._mouseOverIntervalID);\n\t\t\tthis._mouseOverIntervalID = null;\n\t\t\tif (frequency == 0) {\n\t\t\t\tthis._testMouseOver(true);\n\t\t\t}\n\t\t}\n\t\tif (frequency == null) { frequency = 20; }\n\t\telse if (frequency <= 0) { return; }\n\t\tvar o = this;\n\t\tthis._mouseOverIntervalID = setInterval(function(){ o._testMouseOver(); }, 1000/Math.min(50,frequency));\n\t};\n\n\t/**\n\t * Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas). It is good\n\t * practice to disable events when disposing of a Stage instance, otherwise the stage will continue to receive\n\t * events from the page.\n\t *\n\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t * new canvas or mouse events will not work as expected. For example:\n\t *\n\t *      myStage.enableDOMEvents(false);\n\t *      myStage.canvas = anotherCanvas;\n\t *      myStage.enableDOMEvents(true);\n\t *\n\t * @method enableDOMEvents\n\t * @param {Boolean} [enable=true] Indicates whether to enable or disable the events. Default is true.\n\t **/\n\tp.enableDOMEvents = function(enable) {\n\t\tif (enable == null) { enable = true; }\n\t\tvar n, o, ls = this._eventListeners;\n\t\tif (!enable && ls) {\n\t\t\tfor (n in ls) {\n\t\t\t\to = ls[n];\n\t\t\t\to.t.removeEventListener(n, o.f, false);\n\t\t\t}\n\t\t\tthis._eventListeners = null;\n\t\t} else if (enable && !ls && this.canvas) {\n\t\t\tvar t = window.addEventListener ? window : document;\n\t\t\tvar _this = this;\n\t\t\tls = this._eventListeners = {};\n\t\t\tls[\"mouseup\"] = {t:t, f:function(e) { _this._handleMouseUp(e)} };\n\t\t\tls[\"mousemove\"] = {t:t, f:function(e) { _this._handleMouseMove(e)} };\n\t\t\tls[\"dblclick\"] = {t:this.canvas, f:function(e) { _this._handleDoubleClick(e)} };\n\t\t\tls[\"mousedown\"] = {t:this.canvas, f:function(e) { _this._handleMouseDown(e)} };\n\n\t\t\tfor (n in ls) {\n\t\t\t\to = ls[n];\n\t\t\t\to.t.addEventListener(n, o.f, false);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Stage instances cannot be cloned.\n\t * @method clone\n\t **/\n\tp.clone = function() {\n\t\tthrow(\"Stage cannot be cloned.\");\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Stage (name=\"+  this.name +\")]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _getElementRect\n\t * @protected\n\t * @param {HTMLElement} e\n\t **/\n\tp._getElementRect = function(e) {\n\t\tvar bounds;\n\t\ttry { bounds = e.getBoundingClientRect(); } // this can fail on disconnected DOM elements in IE9\n\t\tcatch (err) { bounds = {top: e.offsetTop, left: e.offsetLeft, width:e.offsetWidth, height:e.offsetHeight}; }\n\n\t\tvar offX = (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || document.body.clientLeft || 0);\n\t\tvar offY = (window.pageYOffset || document.scrollTop || 0) - (document.clientTop  || document.body.clientTop  || 0);\n\n\t\tvar styles = window.getComputedStyle ? getComputedStyle(e,null) : e.currentStyle; // IE <9 compatibility.\n\t\tvar padL = parseInt(styles.paddingLeft)+parseInt(styles.borderLeftWidth);\n\t\tvar padT = parseInt(styles.paddingTop)+parseInt(styles.borderTopWidth);\n\t\tvar padR = parseInt(styles.paddingRight)+parseInt(styles.borderRightWidth);\n\t\tvar padB = parseInt(styles.paddingBottom)+parseInt(styles.borderBottomWidth);\n\n\t\t// note: in some browsers bounds properties are read only.\n\t\treturn {\n\t\t\tleft: bounds.left+offX+padL,\n\t\t\tright: bounds.right+offX-padR,\n\t\t\ttop: bounds.top+offY+padT,\n\t\t\tbottom: bounds.bottom+offY-padB\n\t\t}\n\t};\n\n\t/**\n\t * @method _getPointerData\n\t * @protected\n\t * @param {Number} id\n\t **/\n\tp._getPointerData = function(id) {\n\t\tvar data = this._pointerData[id];\n\t\tif (!data) { data = this._pointerData[id] = {x:0,y:0}; }\n\t\treturn data;\n\t};\n\n\t/**\n\t * @method _handleMouseMove\n\t * @protected\n\t * @param {MouseEvent} e\n\t **/\n\tp._handleMouseMove = function(e) {\n\t\tif(!e){ e = window.event; }\n\t\tthis._handlePointerMove(-1, e, e.pageX, e.pageY);\n\t};\n\n\t/**\n\t * @method _handlePointerMove\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handlePointerMove = function(id, e, pageX, pageY, owner) {\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\tif (!this.canvas) { return; }\n\t\tvar nextStage=this._nextStage, o=this._getPointerData(id);\n\n\t\tvar inBounds = o.inBounds;\n\t\tthis._updatePointerPosition(id, e, pageX, pageY);\n\t\tif (inBounds || o.inBounds || this.mouseMoveOutside) {\n\t\t\tif (id === -1 && o.inBounds == !inBounds) {\n\t\t\t\tthis._dispatchMouseEvent(this, (inBounds ? \"mouseleave\" : \"mouseenter\"), false, id, o, e);\n\t\t\t}\n\t\t\t\n\t\t\tthis._dispatchMouseEvent(this, \"stagemousemove\", false, id, o, e);\n\t\t\tthis._dispatchMouseEvent(o.target, \"pressmove\", true, id, o, e);\n\t\t}\n\t\t\n\t\tnextStage&&nextStage._handlePointerMove(id, e, pageX, pageY, null);\n\t};\n\n\t/**\n\t * @method _updatePointerPosition\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t **/\n\tp._updatePointerPosition = function(id, e, pageX, pageY) {\n\t\tvar rect = this._getElementRect(this.canvas);\n\t\tpageX -= rect.left;\n\t\tpageY -= rect.top;\n\n\t\tvar w = this.canvas.width;\n\t\tvar h = this.canvas.height;\n\t\tpageX /= (rect.right-rect.left)/w;\n\t\tpageY /= (rect.bottom-rect.top)/h;\n\t\tvar o = this._getPointerData(id);\n\t\tif (o.inBounds = (pageX >= 0 && pageY >= 0 && pageX <= w-1 && pageY <= h-1)) {\n\t\t\to.x = pageX;\n\t\t\to.y = pageY;\n\t\t} else if (this.mouseMoveOutside) {\n\t\t\to.x = pageX < 0 ? 0 : (pageX > w-1 ? w-1 : pageX);\n\t\t\to.y = pageY < 0 ? 0 : (pageY > h-1 ? h-1 : pageY);\n\t\t}\n\n\t\to.posEvtObj = e;\n\t\to.rawX = pageX;\n\t\to.rawY = pageY;\n\n\t\tif (id === this._primaryPointerID || id === -1) {\n\t\t\tthis.mouseX = o.x;\n\t\t\tthis.mouseY = o.y;\n\t\t\tthis.mouseInBounds = o.inBounds;\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleMouseUp\n\t * @protected\n\t * @param {MouseEvent} e\n\t **/\n\tp._handleMouseUp = function(e) {\n\t\tthis._handlePointerUp(-1, e, false);\n\t};\n\n\t/**\n\t * @method _handlePointerUp\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Boolean} clear\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handlePointerUp = function(id, e, clear, owner) {\n\t\tvar nextStage = this._nextStage, o = this._getPointerData(id);\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\t\n\t\tvar target=null, oTarget = o.target;\n\t\tif (!owner && (oTarget || nextStage)) { target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\t\t\n\t\tif (o.down) { this._dispatchMouseEvent(this, \"stagemouseup\", false, id, o, e, target); o.down = false; }\n\t\t\n\t\tif (target == oTarget) { this._dispatchMouseEvent(oTarget, \"click\", true, id, o, e); }\n\t\tthis._dispatchMouseEvent(oTarget, \"pressup\", true, id, o, e);\n\t\t\n\t\tif (clear) {\n\t\t\tif (id==this._primaryPointerID) { this._primaryPointerID = null; }\n\t\t\tdelete(this._pointerData[id]);\n\t\t} else { o.target = null; }\n\t\t\n\t\tnextStage&&nextStage._handlePointerUp(id, e, clear, owner || target && this);\n\t};\n\n\t/**\n\t * @method _handleMouseDown\n\t * @protected\n\t * @param {MouseEvent} e\n\t **/\n\tp._handleMouseDown = function(e) {\n\t\tthis._handlePointerDown(-1, e, e.pageX, e.pageY);\n\t};\n\n\t/**\n\t * @method _handlePointerDown\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handlePointerDown = function(id, e, pageX, pageY, owner) {\n\t\tif (this.preventSelection) { e.preventDefault(); }\n\t\tif (this._primaryPointerID == null || id === -1) { this._primaryPointerID = id; } // mouse always takes over.\n\t\t\n\t\tif (pageY != null) { this._updatePointerPosition(id, e, pageX, pageY); }\n\t\tvar target = null, nextStage = this._nextStage, o = this._getPointerData(id);\n\t\tif (!owner) { target = o.target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\n\t\tif (o.inBounds) { this._dispatchMouseEvent(this, \"stagemousedown\", false, id, o, e, target); o.down = true; }\n\t\tthis._dispatchMouseEvent(target, \"mousedown\", true, id, o, e);\n\t\t\n\t\tnextStage&&nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);\n\t};\n\n\t/**\n\t * @method _testMouseOver\n\t * @param {Boolean} clear If true, clears the mouseover / rollover (ie. no target)\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t * @param {Stage} eventTarget The stage that the cursor is actively over.\n\t * @protected\n\t **/\n\tp._testMouseOver = function(clear, owner, eventTarget) {\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\t\n\t\tvar nextStage = this._nextStage;\n\t\tif (!this._mouseOverIntervalID) {\n\t\t\t// not enabled for mouseover, but should still relay the event.\n\t\t\tnextStage&&nextStage._testMouseOver(clear, owner, eventTarget);\n\t\t\treturn;\n\t\t}\n\t\tvar o = this._getPointerData(-1);\n\t\t// only update if the mouse position has changed. This provides a lot of optimization, but has some trade-offs.\n\t\tif (!o || (!clear && this.mouseX == this._mouseOverX && this.mouseY == this._mouseOverY && this.mouseInBounds)) { return; }\n\t\t\n\t\tvar e = o.posEvtObj;\n\t\tvar isEventTarget = eventTarget || e&&(e.target == this.canvas);\n\t\tvar target=null, common = -1, cursor=\"\", t, i, l;\n\t\t\n\t\tif (!owner && (clear || this.mouseInBounds && isEventTarget)) {\n\t\t\ttarget = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);\n\t\t\tthis._mouseOverX = this.mouseX;\n\t\t\tthis._mouseOverY = this.mouseY;\n\t\t}\n\n\t\tvar oldList = this._mouseOverTarget||[];\n\t\tvar oldTarget = oldList[oldList.length-1];\n\t\tvar list = this._mouseOverTarget = [];\n\n\t\t// generate ancestor list and check for cursor:\n\t\tt = target;\n\t\twhile (t) {\n\t\t\tlist.unshift(t);\n\t\t\tif (!cursor) { cursor = t.cursor; }\n\t\t\tt = t.parent;\n\t\t}\n\t\tthis.canvas.style.cursor = cursor;\n\t\tif (!owner && eventTarget) { eventTarget.canvas.style.cursor = cursor; }\n\n\t\t// find common ancestor:\n\t\tfor (i=0,l=list.length; i<l; i++) {\n\t\t\tif (list[i] != oldList[i]) { break; }\n\t\t\tcommon = i;\n\t\t}\n\n\t\tif (oldTarget != target) {\n\t\t\tthis._dispatchMouseEvent(oldTarget, \"mouseout\", true, -1, o, e, target);\n\t\t}\n\n\t\tfor (i=oldList.length-1; i>common; i--) {\n\t\t\tthis._dispatchMouseEvent(oldList[i], \"rollout\", false, -1, o, e, target);\n\t\t}\n\n\t\tfor (i=list.length-1; i>common; i--) {\n\t\t\tthis._dispatchMouseEvent(list[i], \"rollover\", false, -1, o, e, oldTarget);\n\t\t}\n\n\t\tif (oldTarget != target) {\n\t\t\tthis._dispatchMouseEvent(target, \"mouseover\", true, -1, o, e, oldTarget);\n\t\t}\n\t\t\n\t\tnextStage&&nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);\n\t};\n\n\t/**\n\t * @method _handleDoubleClick\n\t * @protected\n\t * @param {MouseEvent} e\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handleDoubleClick = function(e, owner) {\n\t\tvar target=null, nextStage=this._nextStage, o=this._getPointerData(-1);\n\t\tif (!owner) {\n\t\t\ttarget = this._getObjectsUnderPoint(o.x, o.y, null, true);\n\t\t\tthis._dispatchMouseEvent(target, \"dblclick\", true, -1, o, e);\n\t\t}\n\t\tnextStage&&nextStage._handleDoubleClick(e, owner || target && this);\n\t};\n\n\t/**\n\t * @method _dispatchMouseEvent\n\t * @protected\n\t * @param {DisplayObject} target\n\t * @param {String} type\n\t * @param {Boolean} bubbles\n\t * @param {Number} pointerId\n\t * @param {Object} o\n\t * @param {MouseEvent} [nativeEvent]\n\t * @param {DisplayObject} [relatedTarget]\n\t **/\n\tp._dispatchMouseEvent = function(target, type, bubbles, pointerId, o, nativeEvent, relatedTarget) {\n\t\t// TODO: might be worth either reusing MouseEvent instances, or adding a willTrigger method to avoid GC.\n\t\tif (!target || (!bubbles && !target.hasEventListener(type))) { return; }\n\t\t/*\n\t\t// TODO: account for stage transformations?\n\t\tthis._mtx = this.getConcatenatedMatrix(this._mtx).invert();\n\t\tvar pt = this._mtx.transformPoint(o.x, o.y);\n\t\tvar evt = new createjs.MouseEvent(type, bubbles, false, pt.x, pt.y, nativeEvent, pointerId, pointerId==this._primaryPointerID || pointerId==-1, o.rawX, o.rawY);\n\t\t*/\n\t\tvar evt = new createjs.MouseEvent(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId === this._primaryPointerID || pointerId === -1, o.rawX, o.rawY, relatedTarget);\n\t\ttarget.dispatchEvent(evt);\n\t};\n\n\n\tcreatejs.Stage = createjs.promote(Stage, \"Container\");\n}());\n\n//##############################################################################\n// Bitmap.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\n\t/**\n\t * A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\n\t * HTML element, or a string.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n\t *\n\t * <strong>Notes:</strong>\n\t * <ol>\n\t *     <li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\n\t *      will be displayed.</li>\n\t *     <li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,\n\t *     the Bitmap can be cached.</li>\n\t *     <li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This\n\t *     happens in all browsers except recent Firefox builds.</li>\n\t *     <li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using\n\t *     methods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting\n\t *     `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`</li>\n\t * </ol>\n\t *\n\t * @class Bitmap\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} imageOrUri The source object or URI to an image to\n\t * display. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.\n\t * If it is a URI, a new Image object will be constructed and assigned to the .image property.\n\t **/\n\tfunction Bitmap(imageOrUri) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The image to render. This can be an Image, a Canvas, or a Video. Not all browsers (especially\n\t\t * mobile browsers) support drawing video to a canvas.\n\t\t * @property image\n\t\t * @type HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n\t\t **/\n\t\tif (typeof imageOrUri == \"string\") {\n\t\t\tthis.image = document.createElement(\"img\");\n\t\t\tthis.image.src = imageOrUri;\n\t\t} else {\n\t\t\tthis.image = imageOrUri;\n\t\t}\n\t\n\t\t/**\n\t\t * Specifies an area of the source image to draw. If omitted, the whole image will be drawn.\n\t\t * Note that video sources must have a width / height set to work correctly with `sourceRect`.\n\t\t * @property sourceRect\n\t\t * @type Rectangle\n\t\t * @default null\n\t\t */\n\t\tthis.sourceRect = null;\n\t}\n\tvar p = createjs.extend(Bitmap, createjs.DisplayObject);\n\t\n\t\n// public methods:\n\t/**\n\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t * @method initialize\n\t * @deprecated in favour of `createjs.promote()`\n\t **/\n\tp.initialize = Bitmap; // TODO: deprecated.\n\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar image = this.image;\n\t\tvar hasContent = this.cacheCanvas || (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t * @return {Boolean}\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache) || !this.image) { return true; }\n\t\tvar img = this.image, rect = this.sourceRect;\n\t\tif (rect) {\n\t\t\t// some browsers choke on out of bound values, so we'll fix them:\n\t\t\tvar x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height, x = 0, y = 0, w = img.width, h = img.height;\n\t\t\tif (x1 < 0) { x -= x1; x1 = 0; }\n\t\t\tif (x2 > w) { x2 = w; }\n\t\t\tif (y1 < 0) { y -= y1; y1 = 0; }\n\t\t\tif (y2 > h) { y2 = h; }\n\t\t\tctx.drawImage(img, x1, y1, x2-x1, y2-y1, x, y, x2-x1, y2-y1);\n\t\t} else {\n\t\t\tctx.drawImage(img, 0, 0);\n\t\t}\n\t\treturn true;\n\t};\n\t\n\t//Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n\t//Bitmap. This is why they have no method implementations.\n\t\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method cache\n\t **/\n\t\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method updateCache\n\t **/\n\t\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method uncache\n\t **/\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tp.getBounds = function() {\n\t\tvar rect = this.DisplayObject_getBounds();\n\t\tif (rect) { return rect; }\n\t\tvar image = this.image, o = this.sourceRect || image;\n\t\tvar hasContent = (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\treturn hasContent ? this._rectangle.setValues(0, 0, o.width, o.height) : null;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Bitmap instance.\n\t * @method clone\n\t * @return {Bitmap} a clone of the Bitmap instance.\n\t **/\n\tp.clone = function() {\n\t\tvar o = new Bitmap(this.image);\n\t\tif (this.sourceRect) { o.sourceRect = this.sourceRect.clone(); }\n\t\tthis._cloneProps(o);\n\t\treturn o;\n\t};\n\t\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Bitmap (name=\"+  this.name +\")]\";\n\t};\n\n\t\n\tcreatejs.Bitmap = createjs.promote(Bitmap, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Sprite.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Displays a frame or sequence of frames (ie. an animation) from a SpriteSheet instance. A sprite sheet is a series of\n\t * images (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100\n\t * images could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,\n\t * play frames as an animation, and even sequence animations together.\n\t *\n\t * See the {{#crossLink \"SpriteSheet\"}}{{/crossLink}} class for more information on setting up frames and animations.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var instance = new createjs.Sprite(spriteSheet);\n\t *      instance.gotoAndStop(\"frameName\");\n\t *\n\t * Until {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} is called,\n\t * only the first defined frame defined in the sprite sheet will be displayed.\n\t *\n\t * @class Sprite\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame\n\t * dimensions, and frame data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t * @param {String|Number} [frameOrAnimation] The frame number or animation to play initially.\n\t **/\n\tfunction Sprite(spriteSheet, frameOrAnimation) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The frame index that will be drawn when draw is called. Note that with some {{#crossLink \"SpriteSheet\"}}{{/crossLink}}\n\t\t * definitions, this will advance non-sequentially. This will always be an integer value.\n\t\t * @property currentFrame\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t **/\n\t\tthis.currentFrame = 0;\n\t\n\t\t/**\n\t\t * Returns the name of the currently playing animation.\n\t\t * @property currentAnimation\n\t\t * @type {String}\n\t\t * @final\n\t\t * @readonly\n\t\t **/\n\t\tthis.currentAnimation = null;\n\t\n\t\t/**\n\t\t * Prevents the animation from advancing each tick automatically. For example, you could create a sprite\n\t\t * sheet of icons, set paused to true, and display the appropriate icon by setting <code>currentFrame</code>.\n\t\t * @property paused\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tthis.paused = true;\n\t\n\t\t/**\n\t\t * The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\n\t\t * data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t\t * @property spriteSheet\n\t\t * @type {SpriteSheet}\n\t\t * @readonly\n\t\t **/\n\t\tthis.spriteSheet = spriteSheet;\n\t\n\t\t/**\n\t\t * Specifies the current frame index within the currently playing animation. When playing normally, this will increase\n\t\t * from 0 to n-1, where n is the number of frames in the current animation.\n\t\t *\n\t\t * This could be a non-integer value if\n\t\t * using time-based playback (see {{#crossLink \"Sprite/framerate\"}}{{/crossLink}}, or if the animation's speed is\n\t\t * not an integer.\n\t\t * @property currentAnimationFrame\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.currentAnimationFrame = 0;\n\t\n\t\t/**\n\t\t * By default Sprite instances advance one frame per tick. Specifying a framerate for the Sprite (or its related\n\t\t * SpriteSheet) will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n\t\t * framerate.\n\t\t *\n\t\t * For example, if a Sprite with a framerate of 10 is placed on a Stage being updated at 40fps, then the Sprite will\n\t\t * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n\t\t * vary slightly between frames.\n\t\t *\n\t\t * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n\t\t * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t\t * @property framerate\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.framerate = 0;\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * Current animation object.\n\t\t * @property _animation\n\t\t * @protected\n\t\t * @type {Object}\n\t\t * @default null\n\t\t **/\n\t\tthis._animation = null;\n\t\n\t\t/**\n\t\t * Current frame index.\n\t\t * @property _currentFrame\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default null\n\t\t **/\n\t\tthis._currentFrame = null;\n\t\t\n\t\t/**\n\t\t * Skips the next auto advance. Used by gotoAndPlay to avoid immediately jumping to the next frame\n\t\t * @property _skipAdvance\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tthis._skipAdvance = false;\n\t\t\n\t\t\n\t\tif (frameOrAnimation != null) { this.gotoAndPlay(frameOrAnimation); }\n\t}\n\tvar p = createjs.extend(Sprite, createjs.DisplayObject);\n\n\t/**\n\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t * @method initialize\n\t * @deprecated in favour of `createjs.promote()`\n\t **/\n\tp.initialize = Sprite; // TODO: Deprecated. This is for backwards support of FlashCC spritesheet export.\n\n\n// events:\n\t/**\n\t * Dispatched when an animation reaches its ends.\n\t * @event animationend\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {String} name The name of the animation that just ended.\n\t * @param {String} next The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.\n\t * @since 0.6.0\n\t */\n\t \n\t/**\n\t * Dispatched any time the current frame changes. For example, this could be due to automatic advancement on a tick,\n\t * or calling gotoAndPlay() or gotoAndStop().\n\t * @event change\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t */\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || this.spriteSheet.complete;\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\tthis._normalizeFrame();\n\t\tvar o = this.spriteSheet.getFrame(this._currentFrame|0);\n\t\tif (!o) { return false; }\n\t\tvar rect = o.rect;\n\t\tif (rect.width && rect.height) { ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height); }\n\t\treturn true;\n\t};\n\n\t//Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n\t//Bitmap. This is why they have no method implementations.\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method cache\n\t **/\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method updateCache\n\t **/\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method uncache\n\t **/\n\n\t/**\n\t * Play (unpause) the current animation. The Sprite will be paused if either {{#crossLink \"Sprite/stop\"}}{{/crossLink}}\n\t * or {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} is called. Single frame animations will remain\n\t * unchanged.\n\t * @method play\n\t **/\n\tp.play = function() {\n\t\tthis.paused = false;\n\t};\n\n\t/**\n\t * Stop playing a running animation. The Sprite will be playing if {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}\n\t * is called. Note that calling {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} or {{#crossLink \"Sprite/play\"}}{{/crossLink}}\n\t * will resume playback.\n\t * @method stop\n\t **/\n\tp.stop = function() {\n\t\tthis.paused = true;\n\t};\n\n\t/**\n\t * Sets paused to false and plays the specified animation name, named frame, or frame number.\n\t * @method gotoAndPlay\n\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t * and begin playing.\n\t **/\n\tp.gotoAndPlay = function(frameOrAnimation) {\n\t\tthis.paused = false;\n\t\tthis._skipAdvance = true;\n\t\tthis._goto(frameOrAnimation);\n\t};\n\n\t/**\n\t * Sets paused to true and seeks to the specified animation name, named frame, or frame number.\n\t * @method gotoAndStop\n\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t * and stop.\n\t **/\n\tp.gotoAndStop = function(frameOrAnimation) {\n\t\tthis.paused = true;\n\t\tthis._goto(frameOrAnimation);\n\t};\n\n\t/**\n\t * Advances the playhead. This occurs automatically each tick by default.\n\t * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite\n\t * or its SpriteSheet.\n\t * @method advance\n\t*/\n\tp.advance = function(time) {\n\t\tvar fps = this.framerate || this.spriteSheet.framerate;\n\t\tvar t = (fps && time != null) ? time/(1000/fps) : 1;\n\t\tthis._normalizeFrame(t);\n\t};\n\t\n\t/**\n\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the current frame relative to\n\t * the origin. For example, a 90 x 70 frame with <code>regX=50</code> and <code>regY=40</code> would return a\n\t * rectangle with [x=-50, y=-40, width=90, height=70]. This ignores transformations on the display object.\n\t *\n\t * Also see the SpriteSheet {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}} method.\n\t * @method getBounds\n\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully\n\t * loaded.\n\t **/\n\tp.getBounds = function() {\n\t\t// TODO: should this normalizeFrame?\n\t\treturn this.DisplayObject_getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);\n\t};\n\n\t/**\n\t * Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned\n\t * instances.\n\t * @method clone\n\t * @return {Sprite} a clone of the Sprite instance.\n\t **/\n\tp.clone = function() {\n\t\treturn this._cloneProps(new Sprite(this.spriteSheet));\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Sprite (name=\"+  this.name +\")]\";\n\t};\n\n// private methods:\n\t/**\n\t * @method _cloneProps\n\t * @param {Sprite} o\n\t * @return {Sprite} o\n\t * @protected\n\t **/\n\tp._cloneProps = function(o) {\n\t\tthis.DisplayObject__cloneProps(o);\n\t\to.currentFrame = this.currentFrame;\n\t\to.currentAnimation = this.currentAnimation;\n\t\to.paused = this.paused;\n\t\to.currentAnimationFrame = this.currentAnimationFrame;\n\t\to.framerate = this.framerate;\n\t\t\n\t\to._animation = this._animation;\n\t\to._currentFrame = this._currentFrame;\n\t\to._skipAdvance = this._skipAdvance;\n\t\treturn o;\n\t};\n\t\n\t/**\n\t * Advances the <code>currentFrame</code> if paused is not true. This is called automatically when the {{#crossLink \"Stage\"}}{{/crossLink}}\n\t * ticks.\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * @protected\n\t * @method _tick\n\t **/\n\tp._tick = function(evtObj) {\n\t\tif (!this.paused) {\n\t\t\tif (!this._skipAdvance) { this.advance(evtObj&&evtObj.delta); }\n\t\t\tthis._skipAdvance = false;\n\t\t}\n\t\tthis.DisplayObject__tick(evtObj);\n\t};\n\n\n\t/**\n\t * Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.\n\t * @protected\n\t * @method _normalizeFrame\n\t **/\n\tp._normalizeFrame = function(frameDelta) {\n\t\tframeDelta = frameDelta || 0;\n\t\tvar animation = this._animation;\n\t\tvar paused = this.paused;\n\t\tvar frame = this._currentFrame;\n\t\tvar l;\n\t\t\n\t\tif (animation) {\n\t\t\tvar speed = animation.speed || 1;\n\t\t\tvar animFrame = this.currentAnimationFrame;\n\t\t\tl = animation.frames.length;\n\t\t\tif (animFrame + frameDelta * speed >= l) {\n\t\t\t\tvar next = animation.next;\n\t\t\t\tif (this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {\n\t\t\t\t\t// something changed in the event stack, so we shouldn't make any more changes here.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (next) {\n\t\t\t\t\t// sequence. Automatically calls _normalizeFrame again with the remaining frames.\n\t\t\t\t\treturn this._goto(next, frameDelta - (l - animFrame) / speed);\n\t\t\t\t} else {\n\t\t\t\t\t// end.\n\t\t\t\t\tthis.paused = true;\n\t\t\t\t\tanimFrame = animation.frames.length - 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanimFrame += frameDelta * speed;\n\t\t\t}\n\t\t\tthis.currentAnimationFrame = animFrame;\n\t\t\tthis._currentFrame = animation.frames[animFrame | 0]\n\t\t} else {\n\t\t\tframe = (this._currentFrame += frameDelta);\n\t\t\tl = this.spriteSheet.getNumFrames();\n\t\t\tif (frame >= l && l > 0) {\n\t\t\t\tif (!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {\n\t\t\t\t\t// looped.\n\t\t\t\t\tif ((this._currentFrame -= l) >= l) { return this._normalizeFrame(); }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tframe = this._currentFrame | 0;\n\t\tif (this.currentFrame != frame) {\n\t\t\tthis.currentFrame = frame;\n\t\t\tthis.dispatchEvent(\"change\");\n\t\t}\n\t};\n\n\t/**\n\t * Dispatches the \"animationend\" event. Returns true if a handler changed the animation (ex. calling {{#crossLink \"Sprite/stop\"}}{{/crossLink}},\n\t * {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}, etc.)\n\t * @property _dispatchAnimationEnd\n\t * @private\n\t * @type {Function}\n\t **/\n\tp._dispatchAnimationEnd = function(animation, frame, paused, next, end) {\n\t\tvar name = animation ? animation.name : null;\n\t\tif (this.hasEventListener(\"animationend\")) {\n\t\t\tvar evt = new createjs.Event(\"animationend\");\n\t\t\tevt.name = name;\n\t\t\tevt.next = next;\n\t\t\tthis.dispatchEvent(evt);\n\t\t}\n\t\t// did the animation get changed in the event stack?:\n\t\tvar changed = (this._animation != animation || this._currentFrame != frame);\n\t\t// if the animation hasn't changed, but the sprite was paused, then we want to stick to the last frame:\n\t\tif (!changed && !paused && this.paused) { this.currentAnimationFrame = end; changed = true; }\n\t\treturn changed;\n\t};\n\n\t/**\n\t * Moves the playhead to the specified frame number or animation.\n\t * @method _goto\n\t * @param {String|Number} frameOrAnimation The frame number or animation that the playhead should move to.\n\t * @param {Boolean} [frame] The frame of the animation to go to. Defaults to 0.\n\t * @protected\n\t **/\n\tp._goto = function(frameOrAnimation, frame) {\n\t\tthis.currentAnimationFrame = 0;\n\t\tif (isNaN(frameOrAnimation)) {\n\t\t\tvar data = this.spriteSheet.getAnimation(frameOrAnimation);\n\t\t\tif (data) {\n\t\t\t\tthis._animation = data;\n\t\t\t\tthis.currentAnimation = frameOrAnimation;\n\t\t\t\tthis._normalizeFrame(frame);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentAnimation = this._animation = null;\n\t\t\tthis._currentFrame = frameOrAnimation;\n\t\t\tthis._normalizeFrame();\n\t\t}\n\t};\n\n\n\tcreatejs.Sprite = createjs.promote(Sprite, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Shape.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * A Shape allows you to display vector art in the display list. It composites a {{#crossLink \"Graphics\"}}{{/crossLink}}\n\t * instance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape\n\t * instances to display the same vector graphics with different positions or transforms.\n\t *\n\t * If the vector art will not\n\t * change between draws, you may want to use the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method to reduce the\n\t * rendering cost.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var graphics = new createjs.Graphics().beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n\t *      var shape = new createjs.Shape(graphics);\n\t *\n\t *      //Alternatively use can also use the graphics property of the Shape class to renderer the same as above.\n\t *      var shape = new createjs.Shape();\n\t *      shape.graphics.beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n\t *\n\t * @class Shape\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {Graphics} graphics Optional. The graphics instance to display. If null, a new Graphics instance will be created.\n\t **/\n\tfunction Shape(graphics) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The graphics instance to display.\n\t\t * @property graphics\n\t\t * @type Graphics\n\t\t **/\n\t\tthis.graphics = graphics ? graphics : new createjs.Graphics();\n\t}\n\tvar p = createjs.extend(Shape, createjs.DisplayObject);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the Shape would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || (this.graphics && !this.graphics.isEmpty());\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the Shape into the specified context ignoring its visible, alpha, shadow, and transform. Returns true if\n\t * the draw was handled (useful for overriding functionality).\n\t *\n\t * <i>NOTE: This method is mainly for internal use, though it may be useful for advanced uses.</i>\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @return {Boolean}\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\tthis.graphics.draw(ctx, this);\n\t\treturn true;\n\t};\n\n\t/**\n\t * Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to\n\t * their defaults (for example .parent).\n\t * @method clone\n\t * @param {Boolean} recursive If true, this Shape's {{#crossLink \"Graphics\"}}{{/crossLink}} instance will also be\n\t * cloned. If false, the Graphics instance will be shared with the new Shape.\n\t **/\n\tp.clone = function(recursive) {\n\t\tvar g = (recursive && this.graphics) ? this.graphics.clone() : this.graphics;\n\t\treturn  this._cloneProps(new Shape(g));\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Shape (name=\"+  this.name +\")]\";\n\t};\n\n\n\tcreatejs.Shape = createjs.promote(Shape, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Text.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the\n\t * lineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML\n\t * text above or below the canvas relative to items in the display list using the {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n\t * method, or using {{#crossLink \"DOMElement\"}}{{/crossLink}}.\n\t *\n\t * <b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use\n\t * multiple font styles, you will need to create multiple text instances, and position them manually.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var text = new createjs.Text(\"Hello World\", \"20px Arial\", \"#ff7700\");\n\t *      text.x = 100;\n\t *      text.textBaseline = \"alphabetic\";\n\t *\n\t * CreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser\n\t * before it can be displayed.\n\t *\n\t * <strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all\n\t * browsers will render Text exactly the same.\n\t * @class Text\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {String} [text] The text to display.\n\t * @param {String} [font] The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold\n\t * 36px Arial\").\n\t * @param {String} [color] The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.\n\t * \"#F00\", \"red\", or \"#FF0000\").\n\t **/\n\tfunction Text(text, font, color) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The text to display.\n\t\t * @property text\n\t\t * @type String\n\t\t **/\n\t\tthis.text = text;\n\t\n\t\t/**\n\t\t * The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").\n\t\t * @property font\n\t\t * @type String\n\t\t **/\n\t\tthis.font = font;\n\t\n\t\t/**\n\t\t * The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\"). Default is \"#000\".\n\t\t * It will also accept valid canvas fillStyle values.\n\t\t * @property color\n\t\t * @type String\n\t\t **/\n\t\tthis.color = color;\n\t\n\t\t/**\n\t\t * The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed\n\t\t * information view the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>. Default is \"left\".\n\t\t * @property textAlign\n\t\t * @type String\n\t\t **/\n\t\tthis.textAlign = \"left\";\n\t\n\t\t/**\n\t\t * The vertical alignment point on the font. Any of \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", or\n\t\t * \"bottom\". For detailed information view the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>. Default is \"top\".\n\t\t * @property textBaseline\n\t\t * @type String\n\t\t*/\n\t\tthis.textBaseline = \"top\";\n\t\n\t\t/**\n\t\t * The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or\n\t\t * shrunk to make it fit in this width. For detailed information view the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>.\n\t\t * @property maxWidth\n\t\t * @type Number\n\t\t*/\n\t\tthis.maxWidth = null;\n\t\n\t\t/**\n\t\t * If greater than 0, the text will be drawn as a stroke (outline) of the specified width.\n\t\t * @property outline\n\t\t * @type Number\n\t\t **/\n\t\tthis.outline = 0;\n\t\n\t\t/**\n\t\t * Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0,\n\t\t * the value of getMeasuredLineHeight is used.\n\t\t * @property lineHeight\n\t\t * @type Number\n\t\t **/\n\t\tthis.lineHeight = 0;\n\t\n\t\t/**\n\t\t * Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null,\n\t\t * the text will not be wrapped.\n\t\t * @property lineWidth\n\t\t * @type Number\n\t\t **/\n\t\tthis.lineWidth = null;\n\t}\n\tvar p = createjs.extend(Text, createjs.DisplayObject);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\t\n// static properties:\n\t/**\n\t * @property _workingContext\n\t * @type CanvasRenderingContext2D\n\t * @private\n\t **/\n\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\tif (canvas.getContext) { Text._workingContext = canvas.getContext(\"2d\"); canvas.width = canvas.height = 1; }\n\t\n\t\n// constants:\n\t/**\n\t * Lookup table for the ratio to offset bounds x calculations based on the textAlign property.\n\t * @property H_OFFSETS\n\t * @type Object\n\t * @protected\n\t * @static\n\t **/\n\tText.H_OFFSETS = {start: 0, left: 0, center: -0.5, end: -1, right: -1};\n\t\n\t/**\n\t * Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.\n\t * @property H_OFFSETS\n\t * @type Object\n\t * @protected\n\t * @static\n\t **/\n\tText.V_OFFSETS = {top: 0, hanging: -0.01, middle: -0.4, alphabetic: -0.8, ideographic: -0.85, bottom: -1};\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || (this.text != null && this.text !== \"\");\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the Text into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\n\t\tvar col = this.color || \"#000\";\n\t\tif (this.outline) { ctx.strokeStyle = col; ctx.lineWidth = this.outline*1; }\n\t\telse { ctx.fillStyle = col; }\n\t\t\n\t\tthis._drawText(this._prepContext(ctx));\n\t\treturn true;\n\t};\n\n\t/**\n\t * Returns the measured, untransformed width of the text without wrapping. Use getBounds for a more robust value.\n\t * @method getMeasuredWidth\n\t * @return {Number} The measured, untransformed width of the text.\n\t **/\n\tp.getMeasuredWidth = function() {\n\t\treturn this._getMeasuredWidth(this.text);\n\t};\n\n\t/**\n\t * Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured\n\t * width of a \"M\" character multiplied by 1.2, which provides an approximate line height for most fonts.\n\t * @method getMeasuredLineHeight\n\t * @return {Number} an approximate line height of the text, ignoring the lineHeight property. This is\n\t * based on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.\n\t **/\n\tp.getMeasuredLineHeight = function() {\n\t\treturn this._getMeasuredWidth(\"M\")*1.2;\n\t};\n\n\t/**\n\t * Returns the approximate height of multi-line text by multiplying the number of lines against either the\n\t * <code>lineHeight</code> (if specified) or {{#crossLink \"Text/getMeasuredLineHeight\"}}{{/crossLink}}. Note that\n\t * this operation requires the text flowing logic to run, which has an associated CPU cost.\n\t * @method getMeasuredHeight\n\t * @return {Number} The approximate height of the untransformed multi-line text.\n\t **/\n\tp.getMeasuredHeight = function() {\n\t\treturn this._drawText(null,{}).height;\n\t};\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tp.getBounds = function() {\n\t\tvar rect = this.DisplayObject_getBounds();\n\t\tif (rect) { return rect; }\n\t\tif (this.text == null || this.text === \"\") { return null; }\n\t\tvar o = this._drawText(null, {});\n\t\tvar w = (this.maxWidth && this.maxWidth < o.width) ? this.maxWidth : o.width;\n\t\tvar x = w * Text.H_OFFSETS[this.textAlign||\"left\"];\n\t\tvar lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n\t\tvar y = lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n\t\treturn this._rectangle.setValues(x, y, w, o.height);\n\t};\n\t\n\t/**\n\t * Returns an object with width, height, and lines properties. The width and height are the visual width and height\n\t * of the drawn text. The lines property contains an array of strings, one for\n\t * each line of text that will be drawn, accounting for line breaks and wrapping. These strings have trailing\n\t * whitespace removed.\n\t * @method getMetrics\n\t * @return {Object} An object with width, height, and lines properties.\n\t **/\n\tp.getMetrics = function() {\n\t\tvar o = {lines:[]};\n\t\to.lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n\t\to.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n\t\treturn this._drawText(null, o, o.lines);\n\t};\n\n\t/**\n\t * Returns a clone of the Text instance.\n\t * @method clone\n\t * @return {Text} a clone of the Text instance.\n\t **/\n\tp.clone = function() {\n\t\treturn this._cloneProps(new Text(this.text, this.font, this.color));\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Text (text=\"+  (this.text.length > 20 ? this.text.substr(0, 17)+\"...\" : this.text) +\")]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _cloneProps\n\t * @param {Text} o\n\t * @protected\n\t * @return {Text} o\n\t **/\n\tp._cloneProps = function(o) {\n\t\tthis.DisplayObject__cloneProps(o);\n\t\to.textAlign = this.textAlign;\n\t\to.textBaseline = this.textBaseline;\n\t\to.maxWidth = this.maxWidth;\n\t\to.outline = this.outline;\n\t\to.lineHeight = this.lineHeight;\n\t\to.lineWidth = this.lineWidth;\n\t\treturn o;\n\t};\n\n\t/**\n\t * @method _getWorkingContext\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @return {CanvasRenderingContext2D}\n\t * @protected\n\t **/\n\tp._prepContext = function(ctx) {\n\t\tctx.font = this.font||\"10px sans-serif\";\n\t\tctx.textAlign = this.textAlign||\"left\";\n\t\tctx.textBaseline = this.textBaseline||\"top\";\n\t\treturn ctx;\n\t};\n\n\t/**\n\t * Draws multiline text.\n\t * @method _drawText\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {Object} o\n\t * @param {Array} lines\n\t * @return {Object}\n\t * @protected\n\t **/\n\tp._drawText = function(ctx, o, lines) {\n\t\tvar paint = !!ctx;\n\t\tif (!paint) {\n\t\t\tctx = Text._workingContext;\n\t\t\tctx.save();\n\t\t\tthis._prepContext(ctx);\n\t\t}\n\t\tvar lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n\t\t\n\t\tvar maxW = 0, count = 0;\n\t\tvar hardLines = String(this.text).split(/(?:\\r\\n|\\r|\\n)/);\n\t\tfor (var i=0, l=hardLines.length; i<l; i++) {\n\t\t\tvar str = hardLines[i];\n\t\t\tvar w = null;\n\t\t\t\n\t\t\tif (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {\n\t\t\t\t// text wrapping:\n\t\t\t\tvar words = str.split(/(\\s)/);\n\t\t\t\tstr = words[0];\n\t\t\t\tw = ctx.measureText(str).width;\n\t\t\t\t\n\t\t\t\tfor (var j=1, jl=words.length; j<jl; j+=2) {\n\t\t\t\t\t// Line needs to wrap:\n\t\t\t\t\tvar wordW = ctx.measureText(words[j] + words[j+1]).width;\n\t\t\t\t\tif (w + wordW > this.lineWidth) {\n\t\t\t\t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n\t\t\t\t\t\tif (lines) { lines.push(str); }\n\t\t\t\t\t\tif (w > maxW) { maxW = w; }\n\t\t\t\t\t\tstr = words[j+1];\n\t\t\t\t\t\tw = ctx.measureText(str).width;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstr += words[j] + words[j+1];\n\t\t\t\t\t\tw += wordW;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n\t\t\tif (lines) { lines.push(str); }\n\t\t\tif (o && w == null) { w = ctx.measureText(str).width; }\n\t\t\tif (w > maxW) { maxW = w; }\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif (o) {\n\t\t\to.width = maxW;\n\t\t\to.height = count*lineHeight;\n\t\t}\n\t\tif (!paint) { ctx.restore(); }\n\t\treturn o;\n\t};\n\n\t/**\n\t * @method _drawTextLine\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {String} text\n\t * @param {Number} y\n\t * @protected\n\t **/\n\tp._drawTextLine = function(ctx, text, y) {\n\t\t// Chrome 17 will fail to draw the text if the last param is included but null, so we feed it a large value instead:\n\t\tif (this.outline) { ctx.strokeText(text, 0, y, this.maxWidth||0xFFFF); }\n\t\telse { ctx.fillText(text, 0, y, this.maxWidth||0xFFFF); }\n\t};\n\t\n\t\n\t/**\n\t * @method _getMeasuredWidth\n\t * @param {String} text\n\t * @protected\n\t **/\n\tp._getMeasuredWidth = function(text) {\n\t\tvar ctx = Text._workingContext;\n\t\tctx.save();\n\t\tvar w = this._prepContext(ctx).measureText(text).width;\n\t\tctx.restore();\n\t\treturn w;\n\t};\n\n\n\tcreatejs.Text = createjs.promote(Text, \"DisplayObject\");\n}());\n\n//##############################################################################\n// BitmapText.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Displays text using bitmap glyphs defined in a sprite sheet. Multi-line text is supported\n\t * using new line characters, but automatic wrapping is not supported. See the \n\t * {{#crossLink \"BitmapText/spriteSheet:property\"}}{{/crossLink}}\n\t * property for more information on defining glyphs.\n\t * \n\t * <strong>Important:</strong> BitmapText extends Container, but is not designed to be used as one.\n\t * As such, methods like addChild and removeChild are disabled.\n\t * @class BitmapText\n\t * @extends DisplayObject\n\t * @param {String} [text=\"\"] The text to display.\n\t * @param {SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.\n\t * @constructor\n\t **/\n\tfunction BitmapText(text, spriteSheet) {\n\t\tthis.Container_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The text to display.\n\t\t * @property text\n\t\t * @type String\n\t\t * @default \"\"\n\t\t **/\n\t\tthis.text = text||\"\";\n\t\t\n\t\t/**\n\t\t * A SpriteSheet instance that defines the glyphs for this bitmap text. Each glyph/character\n\t\t * should have a single frame animation defined in the sprite sheet named the same as\n\t\t * corresponding character. For example, the following animation definition:\n\t\t *\n\t\t * \t\t\"A\": {frames: [0]}\n\t\t *\n\t\t * would indicate that the frame at index 0 of the spritesheet should be drawn for the \"A\" character. The short form\n\t\t * is also acceptable:\n\t\t * \n\t\t * \t\t\"A\": 0\n\t\t *\n\t\t * Note that if a character in the text is not found in the sprite sheet, it will also\n\t\t * try to use the alternate case (upper or lower).\n\t\t *\n\t\t * See SpriteSheet for more information on defining sprite sheet data.\n\t\t * @property spriteSheet\n\t\t * @type SpriteSheet\n\t\t * @default null\n\t\t **/\n\t\tthis.spriteSheet = spriteSheet;\n\t\n\t\t/**\n\t\t * The height of each line of text. If 0, then it will use a line height calculated\n\t\t * by checking for the height of the \"1\", \"T\", or \"L\" character (in that order). If\n\t\t * those characters are not defined, it will use the height of the first frame of the\n\t\t * sprite sheet.\n\t\t * @property lineHeight\n\t\t * @type Number\n\t\t * @default 0\n\t\t **/\n\t\tthis.lineHeight = 0;\n\t\n\t\t/**\n\t\t * This spacing (in pixels) will be added after each character in the output.\n\t\t * @property letterSpacing\n\t\t * @type Number\n\t\t * @default 0\n\t\t **/\n\t\tthis.letterSpacing = 0;\n\t\n\t\t/**\n\t\t * If a space character is not defined in the sprite sheet, then empty pixels equal to\n\t\t * spaceWidth will be inserted instead. If 0, then it will use a value calculated\n\t\t * by checking for the width of the \"1\", \"l\", \"E\", or \"A\" character (in that order). If\n\t\t * those characters are not defined, it will use the width of the first frame of the\n\t\t * sprite sheet.\n\t\t * @property spaceWidth\n\t\t * @type Number\n\t\t * @default 0\n\t\t **/\n\t\tthis.spaceWidth = 0;\n\t\t\n\t\t\n\t// private properties:\n\t \t/**\n\t\t * @property _oldProps\n\t\t * @type Object\n\t\t * @protected\n\t\t **/\n\t\tthis._oldProps = {text:0,spriteSheet:0,lineHeight:0,letterSpacing:0,spaceWidth:0};\n\t}\n\tvar p = createjs.extend(BitmapText, createjs.Container);\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n// static properties:\n\t/**\n\t * BitmapText uses Sprite instances to draw text. To reduce the creation and destruction of instances (and thus garbage collection), it maintains\n\t * an internal object pool of sprite instances to reuse. Increasing this value can cause more sprites to be\n\t * retained, slightly increasing memory use, but reducing instantiation.\n\t * @property maxPoolSize\n\t * @type Number\n\t * @static\n\t * @default 100\n\t **/\n\tBitmapText.maxPoolSize = 100;\n\t\n\t/**\n\t * Sprite object pool.\n\t * @type {Array}\n\t * @static\n\t * @private\n\t */\n\tBitmapText._spritePool = [];\n\n\t\n// public methods:\n\t/**\n\t * Docced in superclass.\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return; }\n\t\tthis._updateText();\n\t\tthis.Container_draw(ctx, ignoreCache);\n\t};\n\t\n\t/**\n\t * Docced in superclass.\n\t **/\n\tp.getBounds = function() {\n\t\tthis._updateText();\n\t\treturn this.Container_getBounds();\n\t};\n\t\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || (this.spriteSheet && this.spriteSheet.complete && this.text);\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);\n\t};\n\t\n\tp.clone = function() {\n\t\treturn this._cloneProps(new BitmapText(this.text, this.spriteSheet));\n\t};\n\t\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method addChild\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method addChildAt\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeChild\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeChildAt\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeAllChildren\n\t **/\n\tp.addChild = p.addChildAt = p.removeChild = p.removeChildAt = p.removeAllChildren = function() {};\n\n\n// private methods:\n \t/**\n\t * @method _cloneProps\n\t * @param {BitmapText} o\n\t * @return {BitmapText} o\n\t * @protected\n\t **/\n\tp._cloneProps = function(o) {\n\t\tthis.Container__cloneProps(o);\n\t\to.lineHeight = this.lineHeight;\n\t\to.letterSpacing = this.letterSpacing;\n\t\to.spaceWidth = this.spaceWidth;\n\t\treturn o;\n\t};\n\t\n\t/**\n\t * @method _getFrameIndex\n\t * @param {String} character\n\t * @param {SpriteSheet} spriteSheet\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp._getFrameIndex = function(character, spriteSheet) {\n\t\tvar c, o = spriteSheet.getAnimation(character);\n\t\tif (!o) {\n\t\t\t(character != (c = character.toUpperCase())) || (character != (c = character.toLowerCase())) || (c=null);\n\t\t\tif (c) { o = spriteSheet.getAnimation(c); }\n\t\t}\n\t\treturn o && o.frames[0];\n\t};\n\t\n\t/**\n\t * @method _getFrame\n\t * @param {String} character\n\t * @param {SpriteSheet} spriteSheet\n\t * @return {Object}\n\t * @protected\n\t **/\n\tp._getFrame = function(character, spriteSheet) {\n\t\tvar index = this._getFrameIndex(character, spriteSheet);\n\t\treturn index == null ? index : spriteSheet.getFrame(index);\n\t};\n\t\n\t/**\n\t * @method _getLineHeight\n\t * @param {SpriteSheet} ss\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp._getLineHeight = function(ss) {\n\t\tvar frame = this._getFrame(\"1\",ss) || this._getFrame(\"T\",ss) || this._getFrame(\"L\",ss) || ss.getFrame(0);\n\t\treturn frame ? frame.rect.height : 1;\n\t};\n\t/**\n\t * @method _getSpaceWidth\n\t * @param {SpriteSheet} ss\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp._getSpaceWidth = function(ss) {\n\t\tvar frame = this._getFrame(\"1\",ss) || this._getFrame(\"l\",ss) || this._getFrame(\"e\",ss) || this._getFrame(\"a\",ss) || ss.getFrame(0);\n\t\treturn frame ? frame.rect.width : 1;\n\t};\n\t\n\t/**\n\t * @method _drawText\n\t * @protected\n\t **/\n\tp._updateText = function() {\n\t\tvar x=0, y=0, o=this._oldProps, change=false, spaceW=this.spaceWidth, lineH=this.lineHeight, ss=this.spriteSheet;\n\t\tvar pool=BitmapText._spritePool, kids=this.children, childIndex=0, numKids=kids.length, sprite;\n\t\t\n\t\tfor (var n in o) {\n\t\t\tif (o[n] != this[n]) {\n\t\t\t\to[n] = this[n];\n\t\t\t\tchange = true;\n\t\t\t}\n\t\t}\n\t\tif (!change) { return; }\n\t\t\n\t\tvar hasSpace = !!this._getFrame(\" \", ss);\n\t\tif (!hasSpace && !spaceW) { spaceW = this._getSpaceWidth(ss); }\n\t\tif (!lineH) { lineH = this._getLineHeight(ss); }\n\t\t\n\t\tfor(var i=0, l=this.text.length; i<l; i++) {\n\t\t\tvar character = this.text.charAt(i);\n\t\t\tif (character == \" \" && !hasSpace) {\n\t\t\t\tx += spaceW;\n\t\t\t\tcontinue;\n\t\t\t} else if (character==\"\\n\" || character==\"\\r\") {\n\t\t\t\tif (character==\"\\r\" && this.text.charAt(i+1) == \"\\n\") { i++; } // crlf\n\t\t\t\tx = 0;\n\t\t\t\ty += lineH;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar index = this._getFrameIndex(character, ss);\n\t\t\tif (index == null) { continue; }\n\t\t\t\n\t\t\tif (childIndex < numKids) {\n\t\t\t\tsprite = kids[childIndex];\n\t\t\t} else {\n\t\t\t\tkids.push(sprite = pool.length ? pool.pop() : new createjs.Sprite());\n\t\t\t\tsprite.parent = this;\n\t\t\t\tnumKids++;\n\t\t\t}\n\t\t\tsprite.spriteSheet = ss;\n\t\t\tsprite.gotoAndStop(index);\n\t\t\tsprite.x = x;\n\t\t\tsprite.y = y;\n\t\t\tchildIndex++;\n\t\t\t\n\t\t\tx += sprite.getBounds().width + this.letterSpacing;\n\t\t}\n\t\twhile (numKids > childIndex) {\n\t\t\t // faster than removeChild.\n\t\t\tpool.push(sprite = kids.pop());\n\t\t\tsprite.parent = null;\n\t\t\tnumKids--;\n\t\t}\n\t\tif (pool.length > BitmapText.maxPoolSize) { pool.length = BitmapText.maxPoolSize; }\n\t};\n\n\n\tcreatejs.BitmapText = createjs.promote(BitmapText, \"Container\");\n}());\n\n//##############################################################################\n// MovieClip.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The MovieClip class associates a TweenJS Timeline with an EaselJS {{#crossLink \"Container\"}}{{/crossLink}}. It allows\n\t * you to create objects which encapsulate timeline animations, state changes, and synched actions. Due to the\n\t * complexities inherent in correctly setting up a MovieClip, it is largely intended for tool output and is not included\n\t * in the main EaselJS library.\n\t *\n\t * Currently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have\n\t * been made to support time-based timelines in the future.\n\t *\n\t * <h4>Example</h4>\n\t * This example animates two shapes back and forth. The grey shape starts on the left, but we jump to a mid-point in\n\t * the animation using {{#crossLink \"MovieClip/gotoAndPlay\"}}{{/crossLink}}.\n\t *\n\t *      var stage = new createjs.Stage(\"canvas\");\n\t *      createjs.Ticker.addEventListener(\"tick\", stage);\n\t *\n\t *      var mc = new createjs.MovieClip(null, 0, true, {start:20});\n\t *      stage.addChild(mc);\n\t *\n\t *      var child1 = new createjs.Shape(\n\t *          new createjs.Graphics().beginFill(\"#999999\")\n\t *              .drawCircle(30,30,30));\n\t *      var child2 = new createjs.Shape(\n\t *          new createjs.Graphics().beginFill(\"#5a9cfb\")\n\t *              .drawCircle(30,30,30));\n\t *\n\t *      mc.timeline.addTween(\n\t *          createjs.Tween.get(child1)\n\t *              .to({x:0}).to({x:60}, 50).to({x:0}, 50));\n\t *      mc.timeline.addTween(\n\t *          createjs.Tween.get(child2)\n\t *              .to({x:60}).to({x:0}, 50).to({x:60}, 50));\n\t *\n\t *      mc.gotoAndPlay(\"start\");\n\t *\n\t * It is recommended to use <code>tween.to()</code> to animate and set properties (use no duration to have it set\n\t * immediately), and the <code>tween.wait()</code> method to create delays between animations. Note that using the\n\t * <code>tween.set()</code> method to affect properties will likely not provide the desired result.\n\t *\n\t * @class MovieClip\n\t * @main MovieClip\n\t * @extends Container\n\t * @constructor\n\t * @param {String} [mode=independent] Initial value for the mode property. One of {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}},\n\t * {{#crossLink \"MovieClip/SINGLE_FRAME:property\"}}{{/crossLink}}, or {{#crossLink \"MovieClip/SYNCHED:property\"}}{{/crossLink}}.\n\t * The default is {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}}.\n\t * @param {Number} [startPosition=0] Initial value for the {{#crossLink \"MovieClip/startPosition:property\"}}{{/crossLink}}\n\t * property.\n\t * @param {Boolean} [loop=true] Initial value for the {{#crossLink \"MovieClip/loop:property\"}}{{/crossLink}}\n\t * property. The default is `true`.\n\t * @param {Object} [labels=null] A hash of labels to pass to the {{#crossLink \"MovieClip/timeline:property\"}}{{/crossLink}}\n\t * instance associated with this MovieClip. Labels only need to be passed if they need to be used.\n\t **/\n\tfunction MovieClip(mode, startPosition, loop, labels) {\n\t\tthis.Container_constructor();\n\t\t!MovieClip.inited&&MovieClip.init(); // static init\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED).\n\t\t * See each constant for a description of the behaviour.\n\t\t * @property mode\n\t\t * @type String\n\t\t * @default null\n\t\t **/\n\t\tthis.mode = mode||MovieClip.INDEPENDENT;\n\t\n\t\t/**\n\t\t * Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.\n\t\t * @property startPosition\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.startPosition = startPosition || 0;\n\t\n\t\t/**\n\t\t * Indicates whether this MovieClip should loop when it reaches the end of its timeline.\n\t\t * @property loop\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.loop = loop;\n\t\n\t\t/**\n\t\t * The current frame of the movieclip.\n\t\t * @property currentFrame\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.currentFrame = 0;\n\t\n\t\t/**\n\t\t * The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip\n\t\t * instance is initialized. Animations are created by adding <a href=\"http://tweenjs.com\">TweenJS</a> Tween\n\t\t * instances to the timeline.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var tween = createjs.Tween.get(target).to({x:0}).to({x:100}, 30);\n\t\t *      var mc = new createjs.MovieClip();\n\t\t *      mc.timeline.addTween(tween);\n\t\t *\n\t\t * Elements can be added and removed from the timeline by toggling an \"_off\" property\n\t\t * using the <code>tweenInstance.to()</code> method. Note that using <code>Tween.set</code> is not recommended to\n\t\t * create MovieClip animations. The following example will toggle the target off on frame 0, and then back on for\n\t\t * frame 1. You can use the \"visible\" property to achieve the same effect.\n\t\t *\n\t\t *      var tween = createjs.Tween.get(target).to({_off:false})\n\t\t *          .wait(1).to({_off:true})\n\t\t *          .wait(1).to({_off:false});\n\t\t *\n\t\t * @property timeline\n\t\t * @type Timeline\n\t\t * @default null\n\t\t */\n\t\tthis.timeline = new createjs.Timeline(null, labels, {paused:true, position:startPosition, useTicks:true});\n\t\n\t\t/**\n\t\t * If true, the MovieClip's position will not advance when ticked.\n\t\t * @property paused\n\t\t * @type Boolean\n\t\t * @default false\n\t\t */\n\t\tthis.paused = false;\n\t\n\t\t/**\n\t\t * If true, actions in this MovieClip's tweens will be run when the playhead advances.\n\t\t * @property actionsEnabled\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.actionsEnabled = true;\n\t\n\t\t/**\n\t\t * If true, the MovieClip will automatically be reset to its first frame whenever the timeline adds\n\t\t * it back onto the display list. This only applies to MovieClip instances with mode=INDEPENDENT.\n\t\t * <br><br>\n\t\t * For example, if you had a character animation with a \"body\" child MovieClip instance\n\t\t * with different costumes on each frame, you could set body.autoReset = false, so that\n\t\t * you can manually change the frame it is on, without worrying that it will be reset\n\t\t * automatically.\n\t\t * @property autoReset\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.autoReset = true;\n\t\t\n\t\t/**\n\t\t * An array of bounds for each frame in the MovieClip. This is mainly intended for tool output.\n\t\t * @property frameBounds\n\t\t * @type Array\n\t\t * @default null\n\t\t */\n\t\tthis.frameBounds = this.frameBounds||null; // TODO: Deprecated. This is for backwards support of FlashCC\n\t\t\n\t\t/**\n\t\t * By default MovieClip instances advance one frame per tick. Specifying a framerate for the MovieClip\n\t\t * will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n\t\t * framerate.\n\t\t *\n\t\t * For example, if a MovieClip with a framerate of 10 is placed on a Stage being updated at 40fps, then the MovieClip will\n\t\t * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n\t\t * vary slightly between frames.\n\t\t *\n\t\t * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n\t\t * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t\t * @property framerate\n\t\t * @type {Number}\n\t\t * @default null\n\t\t **/\n\t\tthis.framerate = null;\n\t\t\n\t\t\n\t// private properties:\n\t\t/**\n\t\t * @property _synchOffset\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @private\n\t\t */\n\t\tthis._synchOffset = 0;\n\t\n\t\t/**\n\t\t * @property _prevPos\n\t\t * @type Number\n\t\t * @default -1\n\t\t * @private\n\t\t */\n\t\tthis._prevPos = -1; // TODO: evaluate using a ._reset Boolean prop instead of -1.\n\t\n\t\t/**\n\t\t * @property _prevPosition\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @private\n\t\t */\n\t\tthis._prevPosition = 0;\n\t\n\t\t/**\n\t\t * The time remaining from the previous tick, only applicable when .framerate is set.\n\t\t * @property _t\n\t\t * @type Number\n\t\t * @private\n\t\t */\n\t\tthis._t = 0;\n\t\n\t\t/**\n\t\t * List of display objects that are actively being managed by the MovieClip.\n\t\t * @property _managed\n\t\t * @type Object\n\t\t * @private\n\t\t */\n\t\tthis._managed = {};\n\t}\n\tvar p = createjs.extend(MovieClip, createjs.Container);\n\n\n// constants:\n\t/**\n\t * The MovieClip will advance independently of its parent, even if its parent is paused.\n\t * This is the default mode.\n\t * @property INDEPENDENT\n\t * @static\n\t * @type String\n\t * @default \"independent\"\n\t * @readonly\n\t **/\n\tMovieClip.INDEPENDENT = \"independent\";\n\n\t/**\n\t * The MovieClip will only display a single frame (as determined by the startPosition property).\n\t * @property SINGLE_FRAME\n\t * @static\n\t * @type String\n\t * @default \"single\"\n\t * @readonly\n\t **/\n\tMovieClip.SINGLE_FRAME = \"single\";\n\n\t/**\n\t * The MovieClip will be advanced only when its parent advances and will be synched to the position of\n\t * the parent MovieClip.\n\t * @property SYNCHED\n\t * @static\n\t * @type String\n\t * @default \"synched\"\n\t * @readonly\n\t **/\n\tMovieClip.SYNCHED = \"synched\";\n\t\n\t\n// static properties:\n\tMovieClip.inited = false;\n\t\n\t\n// static methods:\n\tMovieClip.init = function() {\n\t\tif (MovieClip.inited) { return; }\n\t\t// plugins introduce some overhead to Tween, so we only install this if an MC is instantiated.\n\t\tMovieClipPlugin.install();\n\t\tMovieClip.inited = true;\n\t};\n\t\n\t\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"MovieClip/labels:property\"}}{{/crossLink}} property instead.\n\t * @method getLabels\n\t * @return {Array}\n\t * @deprecated\n\t **/\n\tp.getLabels = function() {\n\t\treturn this.timeline.getLabels();\n\t};\n\t\n\t/**\n\t * Use the {{#crossLink \"MovieClip/currentLabel:property\"}}{{/crossLink}} property instead.\n\t * @method getCurrentLabel\n\t * @return {String}\n\t * @deprecated\n\t **/\n\tp.getCurrentLabel = function() {\n\t\tthis._updateTimeline();\n\t\treturn this.timeline.getCurrentLabel();\n\t};\n\t\n\t/**\n\t * Use the {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}} property instead.\n\t * @method getDuration\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp.getDuration = function() {\n\t\treturn this.timeline.duration;\n\t};\n\n\t/**\n\t * Returns an array of objects with label and position (aka frame) properties, sorted by position.\n\t * Shortcut to TweenJS: Timeline.getLabels();\n\t * @property labels\n\t * @type {Array}\n\t * @readonly\n\t **/\n\t\n\t/**\n\t * Returns the name of the label on or immediately before the current frame. See TweenJS: Timeline.getCurrentLabel()\n\t * for more information.\n\t * @property currentLabel\n\t * @type {String}\n\t * @readonly\n\t **/\n\t\n\t/**\n\t * Returns the duration of this MovieClip in seconds or ticks. Identical to {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}}\n\t * and provided for Flash API compatibility.\n\t * @property totalFrames\n\t * @type {Number}\n\t * @readonly\n\t **/\n\t\n\t/**\n\t * Returns the duration of this MovieClip in seconds or ticks.\n\t * @property duration\n\t * @type {Number}\n\t * @readonly\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tlabels: { get: p.getLabels },\n\t\t\tcurrentLabel: { get: p.getCurrentLabel },\n\t\t\ttotalFrames: { get: p.getDuration },\n\t\t\tduration: { get: p.getDuration }\n\t\t});\n\t} catch (e) {}\n\n\n// public methods:\n\t/**\n\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t * @method initialize\n\t * @deprecated in favour of `createjs.promote()`\n\t **/\n\tp.initialize = MovieClip; // TODO: Deprecated. This is for backwards support of FlashCC\n\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\t// children are placed in draw, so we can't determine if we have content.\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\t// draw to cache first:\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\tthis._updateTimeline();\n\t\tthis.Container_draw(ctx, ignoreCache);\n\t\treturn true;\n\t};\n\t\n\t/**\n\t * Sets paused to false.\n\t * @method play\n\t **/\n\tp.play = function() {\n\t\tthis.paused = false;\n\t};\n\t\n\t/**\n\t * Sets paused to true.\n\t * @method stop\n\t **/\n\tp.stop = function() {\n\t\tthis.paused = true;\n\t};\n\t\n\t/**\n\t * Advances this movie clip to the specified position or label and sets paused to false.\n\t * @method gotoAndPlay\n\t * @param {String|Number} positionOrLabel The animation name or frame number to go to.\n\t **/\n\tp.gotoAndPlay = function(positionOrLabel) {\n\t\tthis.paused = false;\n\t\tthis._goto(positionOrLabel);\n\t};\n\t\n\t/**\n\t * Advances this movie clip to the specified position or label and sets paused to true.\n\t * @method gotoAndStop\n\t * @param {String|Number} positionOrLabel The animation or frame name to go to.\n\t **/\n\tp.gotoAndStop = function(positionOrLabel) {\n\t\tthis.paused = true;\n\t\tthis._goto(positionOrLabel);\n\t};\n\t\n\t/**\n\t * Advances the playhead. This occurs automatically each tick by default.\n\t * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set.\n\t * @method advance\n\t*/\n\tp.advance = function(time) {\n\t\t// TODO: should we worry at all about clips who change their own modes via frame scripts?\n\t\tvar independent = MovieClip.INDEPENDENT;\n\t\tif (this.mode != independent) { return; }\n\t\t\n\t\tvar o=this, fps = o.framerate;\n\t\twhile ((o = o.parent) && fps == null) {\n\t\t\tif (o.mode == independent) { fps = o._framerate; }\n\t\t}\n\t\tthis._framerate = fps;\n\t\t\n\t\tvar t = (fps != null && fps != -1 && time != null) ? time/(1000/fps) + this._t : 1;\n\t\tvar frames = t|0;\n\t\tthis._t = t-frames; // leftover time\n\t\t\n\t\twhile (!this.paused && frames--) {\n\t\t\tthis._prevPosition = (this._prevPos < 0) ? 0 : this._prevPosition+1;\n\t\t\tthis._updateTimeline();\n\t\t}\n\t};\n\t\n\t/**\n\t * MovieClip instances cannot be cloned.\n\t * @method clone\n\t **/\n\tp.clone = function() {\n\t\t// TODO: add support for this? Need to clone the Timeline & retarget tweens - pretty complex.\n\t\tthrow(\"MovieClip cannot be cloned.\")\n\t};\n\t\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[MovieClip (name=\"+  this.name +\")]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * function.\n\t * @protected\n\t **/\n\tp._tick = function(evtObj) {\n\t\tthis.advance(evtObj&&evtObj.delta);\n\t\tthis.Container__tick(evtObj);\n\t};\n\t\n\t/**\n\t * @method _goto\n\t * @param {String|Number} positionOrLabel The animation name or frame number to go to.\n\t * @protected\n\t **/\n\tp._goto = function(positionOrLabel) {\n\t\tvar pos = this.timeline.resolve(positionOrLabel);\n\t\tif (pos == null) { return; }\n\t\t// prevent _updateTimeline from overwriting the new position because of a reset:\n\t\tif (this._prevPos == -1) { this._prevPos = NaN; }\n\t\tthis._prevPosition = pos;\n\t\tthis._t = 0;\n\t\tthis._updateTimeline();\n\t};\n\t\n\t/**\n\t * @method _reset\n\t * @private\n\t **/\n\tp._reset = function() {\n\t\tthis._prevPos = -1;\n\t\tthis._t = this.currentFrame = 0;\n\t\tthis.paused = false;\n\t};\n\t\n\t/**\n\t * @method _updateTimeline\n\t * @protected\n\t **/\n\tp._updateTimeline = function() {\n\t\tvar tl = this.timeline;\n\t\tvar synched = this.mode != MovieClip.INDEPENDENT;\n\t\ttl.loop = (this.loop==null) ? true : this.loop;\n\t\t\n\t\tvar pos = synched ? this.startPosition + (this.mode==MovieClip.SINGLE_FRAME?0:this._synchOffset) : (this._prevPos < 0 ? 0 : this._prevPosition);\n\t\tvar mode = synched || !this.actionsEnabled ? createjs.Tween.NONE : null;\n\t\t\n\t\t// pre-assign currentFrame so it is available to frame scripts:\n\t\tthis.currentFrame = tl._calcPosition(pos);\n\t\t\n\t\t// update timeline position, ignoring actions if this is a graphic.\n\t\ttl.setPosition(pos, mode);\n\n\t\tthis._prevPosition = tl._prevPosition;\n\t\tif (this._prevPos == tl._prevPos) { return; }\n\t\tthis.currentFrame = this._prevPos = tl._prevPos;\n\n\t\tfor (var n in this._managed) { this._managed[n] = 1; }\n\n\t\tvar tweens = tl._tweens;\n\t\tfor (var i=0, l=tweens.length; i<l; i++) {\n\t\t\tvar tween = tweens[i];\n\t\t\tvar target = tween._target;\n\t\t\tif (target == this || tween.passive) { continue; } // TODO: this assumes actions tween has this as the target. Valid?\n\t\t\tvar offset = tween._stepPosition;\n\n\t\t\tif (target instanceof createjs.DisplayObject) {\n\t\t\t\t// motion tween.\n\t\t\t\tthis._addManagedChild(target, offset);\n\t\t\t} else {\n\t\t\t\t// state tween.\n\t\t\t\tthis._setState(target.state, offset);\n\t\t\t}\n\t\t}\n\n\t\tvar kids = this.children;\n\t\tfor (i=kids.length-1; i>=0; i--) {\n\t\t\tvar id = kids[i].id;\n\t\t\tif (this._managed[id] == 1) {\n\t\t\t\tthis.removeChildAt(i);\n\t\t\t\tdelete(this._managed[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _setState\n\t * @param {Array} state\n\t * @param {Number} offset\n\t * @protected\n\t **/\n\tp._setState = function(state, offset) {\n\t\tif (!state) { return; }\n\t\tfor (var i=state.length-1;i>=0;i--) {\n\t\t\tvar o = state[i];\n\t\t\tvar target = o.t;\n\t\t\tvar props = o.p;\n\t\t\tfor (var n in props) { target[n] = props[n]; }\n\t\t\tthis._addManagedChild(target, offset);\n\t\t}\n\t};\n\n\t/**\n\t * Adds a child to the timeline, and sets it up as a managed child.\n\t * @method _addManagedChild\n\t * @param {MovieClip} child The child MovieClip to manage\n\t * @param {Number} offset\n\t * @private\n\t **/\n\tp._addManagedChild = function(child, offset) {\n\t\tif (child._off) { return; }\n\t\tthis.addChildAt(child,0);\n\n\t\tif (child instanceof MovieClip) {\n\t\t\tchild._synchOffset = offset;\n\t\t\t// TODO: this does not precisely match Flash. Flash loses track of the clip if it is renamed or removed from the timeline, which causes it to reset.\n\t\t\tif (child.mode == MovieClip.INDEPENDENT && child.autoReset && !this._managed[child.id]) { child._reset(); }\n\t\t}\n\t\tthis._managed[child.id] = 2;\n\t};\n\t\n\t/**\n\t * @method _getBounds\n\t * @param {Matrix2D} matrix\n\t * @param {Boolean} ignoreTransform\n\t * @return {Rectangle}\n\t * @protected\n\t **/\n\tp._getBounds = function(matrix, ignoreTransform) {\n\t\tvar bounds = this.DisplayObject_getBounds();\n\t\tif (!bounds) {\n\t\t\tthis._updateTimeline();\n\t\t\tif (this.frameBounds) { bounds = this._rectangle.copy(this.frameBounds[this.currentFrame]); }\n\t\t}\n\t\tif (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }\n\t\treturn this.Container__getBounds(matrix, ignoreTransform);\n\t};\n\n\n\tcreatejs.MovieClip = createjs.promote(MovieClip, \"Container\");\n\n\n\n// MovieClipPlugin for TweenJS:\n\t/**\n\t * This plugin works with <a href=\"http://tweenjs.com\" target=\"_blank\">TweenJS</a> to prevent the startPosition\n\t * property from tweening.\n\t * @private\n\t * @class MovieClipPlugin\n\t * @constructor\n\t **/\n\tfunction MovieClipPlugin() {\n\t\tthrow(\"MovieClipPlugin cannot be instantiated.\")\n\t}\n\t\n\t/**\n\t * @method priority\n\t * @private\n\t **/\n\tMovieClipPlugin.priority = 100; // very high priority, should run first\n\n\t/**\n\t * @method install\n\t * @private\n\t **/\n\tMovieClipPlugin.install = function() {\n\t\tcreatejs.Tween.installPlugin(MovieClipPlugin, [\"startPosition\"]);\n\t};\n\t\n\t/**\n\t * @method init\n\t * @param {Tween} tween\n\t * @param {String} prop\n\t * @param {String|Number|Boolean} value\n\t * @private\n\t **/\n\tMovieClipPlugin.init = function(tween, prop, value) {\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * @method step\n\t * @private\n\t **/\n\tMovieClipPlugin.step = function() {\n\t\t// unused.\n\t};\n\n\t/**\n\t * @method tween\n\t * @param {Tween} tween\n\t * @param {String} prop\n\t * @param {String | Number | Boolean} value\n\t * @param {Array} startValues\n\t * @param {Array} endValues\n\t * @param {Number} ratio\n\t * @param {Object} wait\n\t * @param {Object} end\n\t * @return {*}\n\t */\n\tMovieClipPlugin.tween = function(tween, prop, value, startValues, endValues, ratio, wait, end) {\n\t\tif (!(tween.target instanceof MovieClip)) { return value; }\n\t\treturn (ratio == 1 ? endValues[prop] : startValues[prop]);\n\t};\n\n}());\n\n//##############################################################################\n// SpriteSheetUtils.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\t\n\t\n// constructor:\n\t/**\n\t * The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink \"SpriteSheet\"}}{{/crossLink}}s.\n\t * A sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For\n\t * example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across\n\t * by 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.\n\t * @class SpriteSheetUtils\n\t * @static\n\t **/\n\tfunction SpriteSheetUtils() {\n\t\tthrow \"SpriteSheetUtils cannot be instantiated\";\n\t}\n\n\n// private static properties:\n\t/**\n\t * @property _workingCanvas\n\t * @static\n\t * @type HTMLCanvasElement | Object\n\t * @protected\n\t*/\n\t/**\n\t * @property _workingContext\n\t * @static\n\t * @type CanvasRenderingContext2D\n\t * @protected\n\t*/\n\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\tif (canvas.getContext) {\n\t\tSpriteSheetUtils._workingCanvas = canvas;\n\t\tSpriteSheetUtils._workingContext = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n\n\n// public static methods:\n\t/**\n\t * <b>This is an experimental method, and may be buggy. Please report issues.</b><br/><br/>\n\t * Extends the existing sprite sheet by flipping the original frames horizontally, vertically, or both,\n\t * and adding appropriate animation & frame data. The flipped animations will have a suffix added to their names\n\t * (_h, _v, _hv as appropriate). Make sure the sprite sheet images are fully loaded before using this method.\n\t * <br/><br/>\n\t * For example:<br/>\n\t * SpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);\n\t * The above would add frames that are flipped horizontally AND frames that are flipped vertically.\n\t * <br/><br/>\n\t * Note that you can also flip any display object by setting its scaleX or scaleY to a negative value. On some\n\t * browsers (especially those without hardware accelerated canvas) this can result in slightly degraded performance,\n\t * which is why addFlippedFrames is available.\n\t * @method addFlippedFrames\n\t * @static\n\t * @param {SpriteSheet} spriteSheet\n\t * @param {Boolean} horizontal If true, horizontally flipped frames will be added.\n\t * @param {Boolean} vertical If true, vertically flipped frames will be added.\n\t * @param {Boolean} both If true, frames that are flipped both horizontally and vertically will be added.\n\t * @deprecated Modern browsers perform better when flipping via a transform (ex. scaleX=-1) rendering this obsolete.\n\t **/\n\tSpriteSheetUtils.addFlippedFrames = function(spriteSheet, horizontal, vertical, both) {\n\t\tif (!horizontal && !vertical && !both) { return; }\n\n\t\tvar count = 0;\n\t\tif (horizontal) { SpriteSheetUtils._flip(spriteSheet,++count,true,false); }\n\t\tif (vertical) { SpriteSheetUtils._flip(spriteSheet,++count,false,true); }\n\t\tif (both) { SpriteSheetUtils._flip(spriteSheet,++count,true,true); }\n\t};\n\n\t/**\n\t * Returns a single frame of the specified sprite sheet as a new PNG image. An example of when this may be useful is\n\t * to use a spritesheet frame as the source for a bitmap fill.\n\t *\n\t * <strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {{#crossLink \"Sprite\"}}{{/crossLink}}\n\t * with a {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} call than it is to slice out a frame using this\n\t * method and display it with a Bitmap instance. You can also crop an image using the {{#crossLink \"Bitmap/sourceRect\"}}{{/crossLink}}\n\t * property of {{#crossLink \"Bitmap\"}}{{/crossLink}}.\n\t *\n\t * The extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.\n\t * @method extractFrame\n\t * @static\n\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to extract a frame from.\n\t * @param {Number|String} frameOrAnimation The frame number or animation name to extract. If an animation\n\t * name is specified, only the first frame of the animation will be extracted.\n\t * @return {HTMLImageElement} a single frame of the specified sprite sheet as a new PNG image.\n\t*/\n\tSpriteSheetUtils.extractFrame = function(spriteSheet, frameOrAnimation) {\n\t\tif (isNaN(frameOrAnimation)) {\n\t\t\tframeOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];\n\t\t}\n\t\tvar data = spriteSheet.getFrame(frameOrAnimation);\n\t\tif (!data) { return null; }\n\t\tvar r = data.rect;\n\t\tvar canvas = SpriteSheetUtils._workingCanvas;\n\t\tcanvas.width = r.width;\n\t\tcanvas.height = r.height;\n\t\tSpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);\n\t\tvar img = document.createElement(\"img\");\n\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\treturn img;\n\t};\n\n\t/**\n\t * Merges the rgb channels of one image with the alpha channel of another. This can be used to combine a compressed\n\t * JPEG image containing color data with a PNG32 monochromatic image containing alpha data. With certain types of\n\t * images (those with detail that lend itself to JPEG compression) this can provide significant file size savings\n\t * versus a single RGBA PNG32. This method is very fast (generally on the order of 1-2 ms to run).\n\t * @method mergeAlpha\n\t * @static\n\t * @param {HTMLImageElement} rbgImage The image (or canvas) containing the RGB channels to use.\n\t * @param {HTMLImageElement} alphaImage The image (or canvas) containing the alpha channel to use.\n\t * @param {HTMLCanvasElement} canvas Optional. If specified, this canvas will be used and returned. If not, a new canvas will be created.\n\t * @return {HTMLCanvasElement} A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.\n\t * @deprecated Tools such as ImageAlpha generally provide better results. This will be moved to sandbox in the future.\n\t*/\n\tSpriteSheetUtils.mergeAlpha = function(rgbImage, alphaImage, canvas) {\n\t\tif (!canvas) { canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); }\n\t\tcanvas.width = Math.max(alphaImage.width, rgbImage.width);\n\t\tcanvas.height = Math.max(alphaImage.height, rgbImage.height);\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tctx.save();\n\t\tctx.drawImage(rgbImage,0,0);\n\t\tctx.globalCompositeOperation = \"destination-in\";\n\t\tctx.drawImage(alphaImage,0,0);\n\t\tctx.restore();\n\t\treturn canvas;\n\t};\n\n\n// private static methods:\n\tSpriteSheetUtils._flip = function(spriteSheet, count, h, v) {\n\t\tvar imgs = spriteSheet._images;\n\t\tvar canvas = SpriteSheetUtils._workingCanvas;\n\t\tvar ctx = SpriteSheetUtils._workingContext;\n\t\tvar il = imgs.length/count;\n\t\tfor (var i=0;i<il;i++) {\n\t\t\tvar src = imgs[i];\n\t\t\tsrc.__tmp = i; // a bit hacky, but faster than doing indexOf below.\n\t\t\tctx.setTransform(1,0,0,1,0,0);\n\t\t\tctx.clearRect(0,0,canvas.width+1,canvas.height+1);\n\t\t\tcanvas.width = src.width;\n\t\t\tcanvas.height = src.height;\n\t\t\tctx.setTransform(h?-1:1, 0, 0, v?-1:1, h?src.width:0, v?src.height:0);\n\t\t\tctx.drawImage(src,0,0);\n\t\t\tvar img = document.createElement(\"img\");\n\t\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\t\t// work around a strange bug in Safari:\n\t\t\timg.width = src.width;\n\t\t\timg.height = src.height;\n\t\t\timgs.push(img);\n\t\t}\n\n\t\tvar frames = spriteSheet._frames;\n\t\tvar fl = frames.length/count;\n\t\tfor (i=0;i<fl;i++) {\n\t\t\tsrc = frames[i];\n\t\t\tvar rect = src.rect.clone();\n\t\t\timg = imgs[src.image.__tmp+il*count];\n\n\t\t\tvar frame = {image:img,rect:rect,regX:src.regX,regY:src.regY};\n\t\t\tif (h) {\n\t\t\t\trect.x = img.width-rect.x-rect.width; // update rect\n\t\t\t\tframe.regX = rect.width-src.regX; // update registration point\n\t\t\t}\n\t\t\tif (v) {\n\t\t\t\trect.y = img.height-rect.y-rect.height;  // update rect\n\t\t\t\tframe.regY = rect.height-src.regY; // update registration point\n\t\t\t}\n\t\t\tframes.push(frame);\n\t\t}\n\n\t\tvar sfx = \"_\"+(h?\"h\":\"\")+(v?\"v\":\"\");\n\t\tvar names = spriteSheet._animations;\n\t\tvar data = spriteSheet._data;\n\t\tvar al = names.length/count;\n\t\tfor (i=0;i<al;i++) {\n\t\t\tvar name = names[i];\n\t\t\tsrc = data[name];\n\t\t\tvar anim = {name:name+sfx,speed:src.speed,next:src.next,frames:[]};\n\t\t\tif (src.next) { anim.next += sfx; }\n\t\t\tframes = src.frames;\n\t\t\tfor (var j=0,l=frames.length;j<l;j++) {\n\t\t\t\tanim.frames.push(frames[j]+fl*count);\n\t\t\t}\n\t\t\tdata[anim.name] = anim;\n\t\t\tnames.push(anim.name);\n\t\t}\n\t};\n\n\n\tcreatejs.SpriteSheetUtils = SpriteSheetUtils;\n}());\n\n//##############################################################################\n// SpriteSheetBuilder.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The SpriteSheetBuilder allows you to generate {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances at run time\n\t * from any display object. This can allow you to maintain your assets as vector graphics (for low file size), and\n\t * render them at run time as SpriteSheets for better performance.\n\t *\n\t * SpriteSheets can be built either synchronously, or asynchronously, so that large SpriteSheets can be generated\n\t * without locking the UI.\n\t *\n\t * Note that the \"images\" used in the generated SpriteSheet are actually canvas elements, and that they will be\n\t * sized to the nearest power of 2 up to the value of {{#crossLink \"SpriteSheetBuilder/maxWidth:property\"}}{{/crossLink}}\n\t * or {{#crossLink \"SpriteSheetBuilder/maxHeight:property\"}}{{/crossLink}}.\n\t * @class SpriteSheetBuilder\n\t * @param {Number} [framerate=0] The {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} of\n\t * {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are created.\n\t * @extends EventDispatcher\n\t * @constructor\n\t **/\n\tfunction SpriteSheetBuilder(framerate) {\n\t\tthis.EventDispatcher_constructor();\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The maximum width for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n\t\t * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n\t\t * dimensions, then additional images will be created as needed.\n\t\t * @property maxWidth\n\t\t * @type Number\n\t\t * @default 2048\n\t\t*/\n\t\tthis.maxWidth = 2048;\n\t\n\t\t/**\n\t\t * The maximum height for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n\t\t * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n\t\t * dimensions, then additional images will be created as needed.\n\t\t * @property maxHeight\n\t\t * @type Number\n\t\t * @default 2048\n\t\t **/\n\t\tthis.maxHeight = 2048;\n\t\n\t\t/**\n\t\t * The SpriteSheet that was generated. This will be null before a build is completed successfully.\n\t\t * @property spriteSheet\n\t\t * @type SpriteSheet\n\t\t **/\n\t\tthis.spriteSheet = null;\n\t\n\t\t/**\n\t\t * The scale to apply when drawing all frames to the SpriteSheet. This is multiplied against any scale specified\n\t\t * in the addFrame call. This can be used, for example, to generate a SpriteSheet at run time that is tailored\n\t\t * to the a specific device resolution (ex. tablet vs mobile).\n\t\t * @property scale\n\t\t * @type Number\n\t\t * @default 1\n\t\t **/\n\t\tthis.scale = 1;\n\t\n\t\t/**\n\t\t* The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.\n\t\t* @property padding\n\t\t* @type Number\n\t\t* @default 1\n\t\t**/\n\t\tthis.padding = 1;\n\t\n\t\t/**\n\t\t * A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be\n\t\t * thought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\n\t\t * the builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\n\t\t * Defaults to 0.3.\n\t\t * @property timeSlice\n\t\t * @type Number\n\t\t * @default 0.3\n\t\t **/\n\t\tthis.timeSlice = 0.3;\n\t\n\t\t/**\n\t\t * A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not\n\t\t * been initiated.\n\t\t * @property progress\n\t\t * @type Number\n\t\t * @default -1\n\t\t * @readonly\n\t\t */\n\t\tthis.progress = -1;\n\n\t\t/**\n\t\t * A {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} value that will be passed to new {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are\n\t\t * created. If no framerate is specified (or it is 0), then SpriteSheets will use the {{#crossLink \"Ticker\"}}{{/crossLink}}\n\t\t * framerate.\n\t\t * @property framerate\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.framerate = framerate || 0;\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * @property _frames\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._frames = [];\n\t\n\t\t/**\n\t\t * @property _animations\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._animations = {};\n\t\n\t\t/**\n\t\t * @property _data\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._data = null;\n\t\n\t\t/**\n\t\t * @property _nextFrameIndex\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._nextFrameIndex = 0;\n\t\n\t\t/**\n\t\t * @property _index\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._index = 0;\n\t\n\t\t/**\n\t\t * @property _timerID\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._timerID = null;\n\t\n\t\t/**\n\t\t * @property _scale\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._scale = 1;\n\t}\n\tvar p = createjs.extend(SpriteSheetBuilder, createjs.EventDispatcher);\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// constants:\n\tSpriteSheetBuilder.ERR_DIMENSIONS = \"frame dimensions exceed max spritesheet dimensions\";\n\tSpriteSheetBuilder.ERR_RUNNING = \"a build is already running\";\n\n// events:\n\t/**\n\t * Dispatched when a build completes.\n\t * @event complete\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when an asynchronous build has progress.\n\t * @event progress\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Number} progress The current progress value (0-1).\n\t * @since 0.6.0\n\t */\n\n\n// public methods:\n\t/**\n\t * Adds a frame to the {{#crossLink \"SpriteSheet\"}}{{/crossLink}}. Note that the frame will not be drawn until you\n\t * call {{#crossLink \"SpriteSheetBuilder/build\"}}{{/crossLink}} method. The optional setup params allow you to have\n\t * a function run immediately before the draw occurs. For example, this allows you to add a single source multiple\n\t * times, but manipulate it or its children to change it to generate different frames.\n\t *\n\t * Note that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply\n\t * transforms to a source object and have them captured in the SpriteSheet, simply place it into a {{#crossLink \"Container\"}}{{/crossLink}}\n\t * and pass in the Container as the source.\n\t * @method addFrame\n\t * @param {DisplayObject} source The source {{#crossLink \"DisplayObject\"}}{{/crossLink}}  to draw as the frame.\n\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the\n\t * source to draw to the frame. If not specified, it will look for a `getBounds` method, bounds property, or\n\t * `nominalBounds` property on the source to use. If one is not found, the frame will be skipped.\n\t * @param {Number} [scale=1] Optional. The scale to draw this frame at. Default is 1.\n\t * @param {Function} [setupFunction] A function to call immediately before drawing this frame. It will be called with two parameters: the source, and setupData.\n\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t * @return {Number} The index of the frame that was just added, or null if a sourceRect could not be determined.\n\t **/\n\tp.addFrame = function(source, sourceRect, scale, setupFunction, setupData) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tvar rect = sourceRect||source.bounds||source.nominalBounds;\n\t\tif (!rect&&source.getBounds) { rect = source.getBounds(); }\n\t\tif (!rect) { return null; }\n\t\tscale = scale||1;\n\t\treturn this._frames.push({source:source, sourceRect:rect, scale:scale, funct:setupFunction, data:setupData, index:this._frames.length, height:rect.height*scale})-1;\n\t};\n\n\t/**\n\t * Adds an animation that will be included in the created {{#crossLink \"SpriteSheet\"}}{{/crossLink}}.\n\t * @method addAnimation\n\t * @param {String} name The name for the animation.\n\t * @param {Array} frames An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\n\t * that played frame indexes 3, 6, and 5 in that order.\n\t * @param {String} [next] Specifies the name of the animation to continue to after this animation ends. You can\n\t * also pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.\n\t * @param {Number} [speed] Specifies a frame advance speed for this animation. For example, a value of 0.5 would\n\t * cause the animation to advance every second tick. Note that earlier versions used `frequency` instead, which had\n\t * the opposite effect.\n\t **/\n\tp.addAnimation = function(name, frames, next, speed) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis._animations[name] = {frames:frames, next:next, speed:speed};\n\t};\n\n\t/**\n\t * This will take a {{#crossLink \"MovieClip\"}}{{/crossLink}} instance, and add its frames and labels to this\n\t * builder. Labels will be added as an animation running from the label index to the next label. For example, if\n\t * there is a label named \"foo\" at frame 0 and a label named \"bar\" at frame 10, in a MovieClip with 15 frames, it\n\t * will add an animation named \"foo\" that runs from frame index 0 to 9, and an animation named \"bar\" that runs from\n\t * frame index 10 to 14.\n\t *\n\t * Note that this will iterate through the full MovieClip with {{#crossLink \"MovieClip/actionsEnabled:property\"}}{{/crossLink}}\n\t * set to `false`, ending on the last frame.\n\t * @method addMovieClip\n\t * @param {MovieClip} source The source MovieClip instance to add to the SpriteSheet.\n\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the source to\n\t * draw to the frame. If not specified, it will look for a {{#crossLink \"DisplayObject/getBounds\"}}{{/crossLink}}\n\t * method, `frameBounds` Array, `bounds` property, or `nominalBounds` property on the source to use. If one is not\n\t * found, the MovieClip will be skipped.\n\t * @param {Number} [scale=1] The scale to draw the movie clip at.\n\t * @param {Function} [setupFunction] A function to call immediately before drawing each frame. It will be called\n\t * with three parameters: the source, setupData, and the frame index.\n\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t * @param {Function} [labelFunction] This method will be called for each MovieClip label that is added with four\n\t * parameters: the label name, the source MovieClip instance, the starting frame index (in the movieclip timeline)\n\t * and the end index. It must return a new name for the label/animation, or `false` to exclude the label.\n\t **/\n\tp.addMovieClip = function(source, sourceRect, scale, setupFunction, setupData, labelFunction) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tvar rects = source.frameBounds;\n\t\tvar rect = sourceRect||source.bounds||source.nominalBounds;\n\t\tif (!rect&&source.getBounds) { rect = source.getBounds(); }\n\t\tif (!rect && !rects) { return; }\n\n\t\tvar i, l, baseFrameIndex = this._frames.length;\n\t\tvar duration = source.timeline.duration;\n\t\tfor (i=0; i<duration; i++) {\n\t\t\tvar r = (rects&&rects[i]) ? rects[i] : rect;\n\t\t\tthis.addFrame(source, r, scale, this._setupMovieClipFrame, {i:i, f:setupFunction, d:setupData});\n\t\t}\n\t\tvar labels = source.timeline._labels;\n\t\tvar lbls = [];\n\t\tfor (var n in labels) {\n\t\t\tlbls.push({index:labels[n], label:n});\n\t\t}\n\t\tif (lbls.length) {\n\t\t\tlbls.sort(function(a,b){ return a.index-b.index; });\n\t\t\tfor (i=0,l=lbls.length; i<l; i++) {\n\t\t\t\tvar label = lbls[i].label;\n\t\t\t\tvar start = baseFrameIndex+lbls[i].index;\n\t\t\t\tvar end = baseFrameIndex+((i == l-1) ? duration : lbls[i+1].index);\n\t\t\t\tvar frames = [];\n\t\t\t\tfor (var j=start; j<end; j++) { frames.push(j); }\n\t\t\t\tif (labelFunction) {\n\t\t\t\t\tlabel = labelFunction(label, source, start, end);\n\t\t\t\t\tif (!label) { continue; }\n\t\t\t\t}\n\t\t\t\tthis.addAnimation(label, frames, true); // for now, this loops all animations.\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames.\n\t * @method build\n\t * @return {SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error\n\t * occurred.\n\t **/\n\tp.build = function() {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis._startBuild();\n\t\twhile (this._drawNext()) {}\n\t\tthis._endBuild();\n\t\treturn this.spriteSheet;\n\t};\n\n\t/**\n\t * Asynchronously builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames. It will\n\t * run 20 times per second, using an amount of time defined by `timeSlice`. When it is complete it will call the\n\t * specified callback.\n\t * @method buildAsync\n\t * @param {Number} [timeSlice] Sets the timeSlice property on this instance.\n\t **/\n\tp.buildAsync = function(timeSlice) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis.timeSlice = timeSlice;\n\t\tthis._startBuild();\n\t\tvar _this = this;\n\t\tthis._timerID = setTimeout(function() { _this._run(); }, 50-Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50);\n\t};\n\n\t/**\n\t * Stops the current asynchronous build.\n\t * @method stopAsync\n\t **/\n\tp.stopAsync = function() {\n\t\tclearTimeout(this._timerID);\n\t\tthis._data = null;\n\t};\n\n\t/**\n\t * SpriteSheetBuilder instances cannot be cloned.\n\t * @method clone\n\t **/\n\tp.clone = function() {\n\t\tthrow(\"SpriteSheetBuilder cannot be cloned.\");\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[SpriteSheetBuilder]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _startBuild\n\t * @protected\n\t **/\n\tp._startBuild = function() {\n\t\tvar pad = this.padding||0;\n\t\tthis.progress = 0;\n\t\tthis.spriteSheet = null;\n\t\tthis._index = 0;\n\t\tthis._scale = this.scale;\n\t\tvar dataFrames = [];\n\t\tthis._data = {\n\t\t\timages: [],\n\t\t\tframes: dataFrames,\n\t\t\tframerate: this.framerate,\n\t\t\tanimations: this._animations // TODO: should we \"clone\" _animations in case someone adds more animations after a build?\n\t\t};\n\n\t\tvar frames = this._frames.slice();\n\t\tframes.sort(function(a,b) { return (a.height<=b.height) ? -1 : 1; });\n\n\t\tif (frames[frames.length-1].height+pad*2 > this.maxHeight) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\tvar y=0, x=0;\n\t\tvar img = 0;\n\t\twhile (frames.length) {\n\t\t\tvar o = this._fillRow(frames, y, img, dataFrames, pad);\n\t\t\tif (o.w > x) { x = o.w; }\n\t\t\ty += o.h;\n\t\t\tif (!o.h || !frames.length) {\n\t\t\t\tvar canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\");\n\t\t\t\tcanvas.width = this._getSize(x,this.maxWidth);\n\t\t\t\tcanvas.height = this._getSize(y,this.maxHeight);\n\t\t\t\tthis._data.images[img] = canvas;\n\t\t\t\tif (!o.h) {\n\t\t\t\t\tx=y=0;\n\t\t\t\t\timg++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * @method _setupMovieClipFrame\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t **/\n\tp._setupMovieClipFrame = function(source, data) {\n\t\tvar ae = source.actionsEnabled;\n\t\tsource.actionsEnabled = false;\n\t\tsource.gotoAndStop(data.i);\n\t\tsource.actionsEnabled = ae;\n\t\tdata.f&&data.f(source, data.d, data.i);\n\t};\n\n\t/**\n\t * @method _getSize\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t **/\n\tp._getSize = function(size,max) {\n\t\tvar pow = 4;\n\t\twhile (Math.pow(2,++pow) < size){}\n\t\treturn Math.min(max,Math.pow(2,pow));\n\t};\n\n\t/**\n\t * @method _fillRow\n\t * @param {Array} frames\n\t * @param {Number} y\n\t * @param {HTMLImageElement} img\n\t * @param {Object} dataFrames\n\t * @param {Number} pad\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t **/\n\tp._fillRow = function(frames, y, img, dataFrames, pad) {\n\t\tvar w = this.maxWidth;\n\t\tvar maxH = this.maxHeight;\n\t\ty += pad;\n\t\tvar h = maxH-y;\n\t\tvar x = pad;\n\t\tvar height = 0;\n\t\tfor (var i=frames.length-1; i>=0; i--) {\n\t\t\tvar frame = frames[i];\n\t\t\tvar sc = this._scale*frame.scale;\n\t\t\tvar rect = frame.sourceRect;\n\t\t\tvar source = frame.source;\n\t\t\tvar rx = Math.floor(sc*rect.x-pad);\n\t\t\tvar ry = Math.floor(sc*rect.y-pad);\n\t\t\tvar rh = Math.ceil(sc*rect.height+pad*2);\n\t\t\tvar rw = Math.ceil(sc*rect.width+pad*2);\n\t\t\tif (rw > w) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\t\tif (rh > h || x+rw > w) { continue; }\n\t\t\tframe.img = img;\n\t\t\tframe.rect = new createjs.Rectangle(x,y,rw,rh);\n\t\t\theight = height || rh;\n\t\t\tframes.splice(i,1);\n\t\t\tdataFrames[frame.index] = [x,y,rw,rh,img,Math.round(-rx+sc*source.regX-pad),Math.round(-ry+sc*source.regY-pad)];\n\t\t\tx += rw;\n\t\t}\n\t\treturn {w:x, h:height};\n\t};\n\n\t/**\n\t * @method _endBuild\n\t * @protected\n\t **/\n\tp._endBuild = function() {\n\t\tthis.spriteSheet = new createjs.SpriteSheet(this._data);\n\t\tthis._data = null;\n\t\tthis.progress = 1;\n\t\tthis.dispatchEvent(\"complete\");\n\t};\n\n\t/**\n\t * @method _run\n\t * @protected\n\t **/\n\tp._run = function() {\n\t\tvar ts = Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50;\n\t\tvar t = (new Date()).getTime()+ts;\n\t\tvar complete = false;\n\t\twhile (t > (new Date()).getTime()) {\n\t\t\tif (!this._drawNext()) { complete = true; break; }\n\t\t}\n\t\tif (complete) {\n\t\t\tthis._endBuild();\n\t\t} else {\n\t\t\tvar _this = this;\n\t\t\tthis._timerID = setTimeout(function() { _this._run(); }, 50-ts);\n\t\t}\n\t\tvar p = this.progress = this._index/this._frames.length;\n\t\tif (this.hasEventListener(\"progress\")) {\n\t\t\tvar evt = new createjs.Event(\"progress\");\n\t\t\tevt.progress = p;\n\t\t\tthis.dispatchEvent(evt);\n\t\t}\n\t};\n\n\t/**\n\t * @method _drawNext\n\t * @protected\n\t * @return Boolean Returns false if this is the last draw.\n\t **/\n\tp._drawNext = function() {\n\t\tvar frame = this._frames[this._index];\n\t\tvar sc = frame.scale*this._scale;\n\t\tvar rect = frame.rect;\n\t\tvar sourceRect = frame.sourceRect;\n\t\tvar canvas = this._data.images[frame.img];\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tframe.funct&&frame.funct(frame.source, frame.data);\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(rect.x, rect.y, rect.width, rect.height);\n\t\tctx.clip();\n\t\tctx.translate(Math.ceil(rect.x-sourceRect.x*sc), Math.ceil(rect.y-sourceRect.y*sc));\n\t\tctx.scale(sc,sc);\n\t\tframe.source.draw(ctx); // display object will draw itself.\n\t\tctx.restore();\n\t\treturn (++this._index) < this._frames.length;\n\t};\n\n\n\tcreatejs.SpriteSheetBuilder = createjs.promote(SpriteSheetBuilder, \"EventDispatcher\");\n}());\n\n//##############################################################################\n// DOMElement.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * <b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>\n\t *\n\t * A DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\n\t * within the DOM as though it is child of the {{#crossLink \"Container\"}}{{/crossLink}} it is added to. However, it is\n\t * not rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\n\t * drawn in front of or behind the canvas).\n\t *\n\t * The position of a DOMElement is relative to their parent node in the DOM. It is recommended that\n\t * the DOM Object be added to a div that also contains the canvas so that they share the same position\n\t * on the page.\n\t *\n\t * DOMElement is useful for positioning HTML elements over top of canvas content, and for elements\n\t * that you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\n\t * content.\n\t *\n\t * <h4>Mouse Interaction</h4>\n\t *\n\t * DOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\n\t * events or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to\n\t * the htmlElement (note, this does not support EventDispatcher)\n\t *\n\t *      var domElement = new createjs.DOMElement(htmlElement);\n\t *      domElement.htmlElement.onclick = function() {\n\t *          console.log(\"clicked\");\n\t *      }\n\t *\n\t * @class DOMElement\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {HTMLElement} htmlElement A reference or id for the DOM element to manage.\n\t */\n\tfunction DOMElement(htmlElement) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\tif (typeof(htmlElement)==\"string\") { htmlElement = document.getElementById(htmlElement); }\n\t\tthis.mouseEnabled = false;\n\t\t\n\t\tvar style = htmlElement.style;\n\t\tstyle.position = \"absolute\";\n\t\tstyle.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = \"0% 0%\";\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The DOM object to manage.\n\t\t * @property htmlElement\n\t\t * @type HTMLElement\n\t\t */\n\t\tthis.htmlElement = htmlElement;\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * @property _oldMtx\n\t\t * @type Matrix2D\n\t\t * @protected\n\t\t */\n\t\tthis._oldProps = null;\n\t}\n\tvar p = createjs.extend(DOMElement, createjs.DisplayObject);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tp.isVisible = function() {\n\t\treturn this.htmlElement != null;\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t * @return {Boolean}\n\t */\n\tp.draw = function(ctx, ignoreCache) {\n\t\t// this relies on the _tick method because draw isn't called if the parent is not visible.\n\t\t// the actual update happens in _handleDrawEnd\n\t\treturn true;\n\t};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method cache\n\t */\n\tp.cache = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method uncache\n\t */\n\tp.uncache = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method updateCache\n\t */\n\tp.updateCache = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method hitTest\n\t */\n\tp.hitTest = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method localToGlobal\n\t */\n\tp.localToGlobal = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method globalToLocal\n\t */\n\tp.globalToLocal = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method localToLocal\n\t */\n\tp.localToLocal = function() {};\n\n\t/**\n\t * DOMElement cannot be cloned. Throws an error.\n\t * @method clone\n\t */\n\tp.clone = function() {\n\t\tthrow(\"DOMElement cannot be cloned.\")\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\tp.toString = function() {\n\t\treturn \"[DOMElement (name=\"+  this.name +\")]\";\n\t};\n\n\t/**\n     * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n\t * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t * @event click\n\t */\n\n     /**\n     * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n \t * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t * @event dblClick\n\t */\n\n     /**\n      * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n \t  * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t  * @event mousedown\n\t  */\n\n     /**\n      * The HTMLElement can listen for the mouseover event, not the DOMElement instance.\n      * Since DOMElement instances are not full EaselJS display objects and do not participate in EaselJS mouse events.\n      * @event mouseover\n\t  */\n\n     /**\n      * Not applicable to DOMElement.\n\t  * @event tick\n\t  */\n\n\n// private methods:\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * function.\n\t * @protected\n\t */\n\tp._tick = function(evtObj) {\n\t\tvar stage = this.getStage();\n\t\tstage&&stage.on(\"drawend\", this._handleDrawEnd, this, true);\n\t\tthis.DisplayObject__tick(evtObj);\n\t};\n\t\n\t/**\n\t * @method _handleDrawEnd\n\t * @param {Event} evt\n\t * @protected\n\t */\n\tp._handleDrawEnd = function(evt) {\n\t\tvar o = this.htmlElement;\n\t\tif (!o) { return; }\n\t\tvar style = o.style;\n\t\t\n\t\tvar props = this.getConcatenatedDisplayProps(this._props), mtx = props.matrix;\n\t\t\n\t\tvar visibility = props.visible ? \"visible\" : \"hidden\";\n\t\tif (visibility != style.visibility) { style.visibility = visibility; }\n\t\tif (!props.visible) { return; }\n\t\t\n\t\tvar oldProps = this._oldProps, oldMtx = oldProps&&oldProps.matrix;\n\t\tvar n = 10000; // precision\n\t\t\n\t\tif (!oldMtx || !oldMtx.equals(mtx)) {\n\t\t\tvar str = \"matrix(\" + (mtx.a*n|0)/n +\",\"+ (mtx.b*n|0)/n +\",\"+ (mtx.c*n|0)/n +\",\"+ (mtx.d*n|0)/n +\",\"+ (mtx.tx+0.5|0);\n\t\t\tstyle.transform = style.WebkitTransform = style.OTransform = style.msTransform = str +\",\"+ (mtx.ty+0.5|0) +\")\";\n\t\t\tstyle.MozTransform = str +\"px,\"+ (mtx.ty+0.5|0) +\"px)\";\n\t\t\tif (!oldProps) { oldProps = this._oldProps = new createjs.DisplayProps(true, NaN); }\n\t\t\toldProps.matrix.copy(mtx);\n\t\t}\n\t\t\n\t\tif (oldProps.alpha != props.alpha) {\n\t\t\tstyle.opacity = \"\"+(props.alpha*n|0)/n;\n\t\t\toldProps.alpha = props.alpha;\n\t\t}\n\t};\n\n\n\tcreatejs.DOMElement = createjs.promote(DOMElement, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Filter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using\n\t * the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method. If an object changes, please cache it again, or use\n\t * {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}}. Note that the filters must be applied before caching.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myInstance.filters = [\n\t *          new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),\n\t *          new createjs.BlurFilter(5, 5, 10)\n\t *      ];\n\t *      myInstance.cache(0,0, 100, 100);\n\t *\n\t * Note that each filter can implement a {{#crossLink \"Filter/getBounds\"}}{{/crossLink}} method, which returns the\n\t * margins that need to be applied in order to fully display the filter. For example, the {{#crossLink \"BlurFilter\"}}{{/crossLink}}\n\t * will cause an object to feather outwards, resulting in a margin around the shape.\n\t *\n\t * <h4>EaselJS Filters</h4>\n\t * EaselJS comes with a number of pre-built filters:\n\t * <ul><li>{{#crossLink \"AlphaMapFilter\"}}{{/crossLink}} : Map a greyscale image to the alpha channel of a display object</li>\n\t *      <li>{{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}: Map an image's alpha channel to the alpha channel of a display object</li>\n\t *      <li>{{#crossLink \"BlurFilter\"}}{{/crossLink}}: Apply vertical and horizontal blur to a display object</li>\n\t *      <li>{{#crossLink \"ColorFilter\"}}{{/crossLink}}: Color transform a display object</li>\n\t *      <li>{{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}: Transform an image using a {{#crossLink \"ColorMatrix\"}}{{/crossLink}}</li>\n\t * </ul>\n\t *\n\t * @class Filter\n\t * @constructor\n\t **/\n\tfunction Filter() {}\n\tvar p = Filter.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// public methods:\n\t/**\n\t * Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.\n\t * @method getBounds\n\t * @param {Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.\n\t * @return {Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.\n\t **/\n\tp.getBounds = function(rect) {\n\t\treturn rect;\n\t};\n\n\t/**\n\t * Applies the filter to the specified context.\n\t * @method applyFilter\n\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t * @param {Number} x The x position to use for the source rect.\n\t * @param {Number} y The y position to use for the source rect.\n\t * @param {Number} width The width to use for the source rect.\n\t * @param {Number} height The height to use for the source rect.\n\t * @param {CanvasRenderingContext2D} [targetCtx] The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t * @param {Number} [targetX] The x position to draw the result to. Defaults to the value passed to x.\n\t * @param {Number} [targetY] The y position to draw the result to. Defaults to the value passed to y.\n\t * @return {Boolean} If the filter was applied successfully.\n\t **/\n\tp.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\t// this is the default behaviour because most filters access pixel data. It is overridden when not needed.\n\t\ttargetCtx = targetCtx || ctx;\n\t\tif (targetX == null) { targetX = x; }\n\t\tif (targetY == null) { targetY = y; }\n\t\ttry {\n\t\t\tvar imageData = ctx.getImageData(x, y, width, height);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._applyFilter(imageData)) {\n\t\t\ttargetCtx.putImageData(imageData, targetX, targetY);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Filter]\";\n\t};\n\n\t/**\n\t * Returns a clone of this Filter instance.\n\t * @method clone\n\t * @return {Filter} A clone of the current Filter instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Filter();\n\t};\n\t\n// private methods:\n\t/**\n\t * @method _applyFilter\n\t * @param {ImageData} imageData Target ImageData instance.\n\t * @return {Boolean}\n\t **/\n\tp._applyFilter = function(imageData) { return true; };\n\n\n\tcreatejs.Filter = Filter;\n}());\n\n//##############################################################################\n// BlurFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is\n\t * set higher than 1.\n\t *\n\t * <h4>Example</h4>\n\t * This example creates a red circle, and then applies a 5 pixel blur to it. It uses the {{#crossLink \"Filter/getBounds\"}}{{/crossLink}}\n\t * method to account for the spread that the blur causes.\n\t *\n\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t *\n\t *      var blurFilter = new createjs.BlurFilter(5, 5, 1);\n\t *      shape.filters = [blurFilter];\n\t *      var bounds = blurFilter.getBounds();\n\t *\n\t *      shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t * @class BlurFilter\n\t * @extends Filter\n\t * @constructor\n\t * @param {Number} [blurX=0] The horizontal blur radius in pixels.\n\t * @param {Number} [blurY=0] The vertical blur radius in pixels.\n\t * @param {Number} [quality=1] The number of blur iterations.\n\t **/\n\tfunction BlurFilter( blurX, blurY, quality) {\n\t\tif ( isNaN(blurX) || blurX < 0 ) blurX = 0;\n\t\tif ( isNaN(blurY) || blurY < 0 ) blurY = 0;\n\t\tif ( isNaN(quality) || quality < 1  ) quality = 1;\n\n\n\t\t// public properties:\n\t\t/**\n\t\t * Horizontal blur radius in pixels\n\t\t * @property blurX\n\t\t * @default 0\n\t\t * @type Number\n\t\t **/\n\t\tthis.blurX = blurX | 0;\n\n\t\t/**\n\t\t * Vertical blur radius in pixels\n\t\t * @property blurY\n\t\t * @default 0\n\t\t * @type Number\n\t\t **/\n\t\tthis.blurY = blurY | 0;\n\n\t\t/**\n\t\t * Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a\n\t\t * smoother blur, but take twice as long to run.\n\t\t * @property quality\n\t\t * @default 1\n\t\t * @type Number\n\t\t **/\n\t\tthis.quality = quality | 0;\n\t}\n\tvar p = createjs.extend(BlurFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// constants:\n\t/**\n\t * Array of multiply values for blur calculations.\n\t * @property MUL_TABLE\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tBlurFilter.MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];\n\n\t/**\n\t * Array of shift values for blur calculations.\n\t * @property SHG_TABLE\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tBlurFilter.SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9];\n\n// public methods:\n\t/** docced in super class **/\n\tp.getBounds = function (rect) {\n\t\tvar x = this.blurX|0, y = this.blurY| 0;\n\t\tif (x <= 0 && y <= 0) { return rect; }\n\t\tvar q = Math.pow(this.quality, 0.2);\n\t\treturn (rect || new createjs.Rectangle()).pad(x*q+1,y*q+1,x*q+1,y*q+1);\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function() {\n\t\treturn new BlurFilter(this.blurX, this.blurY, this.quality);\n\t};\n\n\t/** docced in super class **/\n\tp.toString = function() {\n\t\treturn \"[BlurFilter]\";\n\t};\n\n\n// private methods:\n\n\t/** docced in super class **/\n\tp._applyFilter = function (imageData) {\n\n\t\tvar radiusX = this.blurX >> 1;\n\t\tif (isNaN(radiusX) || radiusX < 0) return false;\n\t\tvar radiusY = this.blurY >> 1;\n\t\tif (isNaN(radiusY) || radiusY < 0) return false;\n\t\tif (radiusX == 0 && radiusY == 0) return false;\n\n\t\tvar iterations = this.quality;\n\t\tif (isNaN(iterations) || iterations < 1) iterations = 1;\n\t\titerations |= 0;\n\t\tif (iterations > 3) iterations = 3;\n\t\tif (iterations < 1) iterations = 1;\n\n\t\tvar px = imageData.data;\n\t\tvar x=0, y=0, i=0, p=0, yp=0, yi=0, yw=0, r=0, g=0, b=0, a=0, pr=0, pg=0, pb=0, pa=0;\n\n\t\tvar divx = (radiusX + radiusX + 1) | 0;\n\t\tvar divy = (radiusY + radiusY + 1) | 0;\n\t\tvar w = imageData.width | 0;\n\t\tvar h = imageData.height | 0;\n\n\t\tvar w1 = (w - 1) | 0;\n\t\tvar h1 = (h - 1) | 0;\n\t\tvar rxp1 = (radiusX + 1) | 0;\n\t\tvar ryp1 = (radiusY + 1) | 0;\n\n\t\tvar ssx = {r:0,b:0,g:0,a:0};\n\t\tvar sx = ssx;\n\t\tfor ( i = 1; i < divx; i++ )\n\t\t{\n\t\t\tsx = sx.n = {r:0,b:0,g:0,a:0};\n\t\t}\n\t\tsx.n = ssx;\n\n\t\tvar ssy = {r:0,b:0,g:0,a:0};\n\t\tvar sy = ssy;\n\t\tfor ( i = 1; i < divy; i++ )\n\t\t{\n\t\t\tsy = sy.n = {r:0,b:0,g:0,a:0};\n\t\t}\n\t\tsy.n = ssy;\n\n\t\tvar si = null;\n\n\n\t\tvar mtx = BlurFilter.MUL_TABLE[radiusX] | 0;\n\t\tvar stx = BlurFilter.SHG_TABLE[radiusX] | 0;\n\t\tvar mty = BlurFilter.MUL_TABLE[radiusY] | 0;\n\t\tvar sty = BlurFilter.SHG_TABLE[radiusY] | 0;\n\n\t\twhile (iterations-- > 0) {\n\n\t\t\tyw = yi = 0;\n\t\t\tvar ms = mtx;\n\t\t\tvar ss = stx;\n\t\t\tfor (y = h; --y > -1;) {\n\t\t\t\tr = rxp1 * (pr = px[(yi) | 0]);\n\t\t\t\tg = rxp1 * (pg = px[(yi + 1) | 0]);\n\t\t\t\tb = rxp1 * (pb = px[(yi + 2) | 0]);\n\t\t\t\ta = rxp1 * (pa = px[(yi + 3) | 0]);\n\n\t\t\t\tsx = ssx;\n\n\t\t\t\tfor( i = rxp1; --i > -1; )\n\t\t\t\t{\n\t\t\t\t\tsx.r = pr;\n\t\t\t\t\tsx.g = pg;\n\t\t\t\t\tsx.b = pb;\n\t\t\t\t\tsx.a = pa;\n\t\t\t\t\tsx = sx.n;\n\t\t\t\t}\n\n\t\t\t\tfor( i = 1; i < rxp1; i++ )\n\t\t\t\t{\n\t\t\t\t\tp = (yi + ((w1 < i ? w1 : i) << 2)) | 0;\n\t\t\t\t\tr += ( sx.r = px[p]);\n\t\t\t\t\tg += ( sx.g = px[p+1]);\n\t\t\t\t\tb += ( sx.b = px[p+2]);\n\t\t\t\t\ta += ( sx.a = px[p+3]);\n\n\t\t\t\t\tsx = sx.n;\n\t\t\t\t}\n\n\t\t\t\tsi = ssx;\n\t\t\t\tfor ( x = 0; x < w; x++ )\n\t\t\t\t{\n\t\t\t\t\tpx[yi++] = (r * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (g * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (b * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (a * ms) >>> ss;\n\n\t\t\t\t\tp = ((yw + ((p = x + radiusX + 1) < w1 ? p : w1)) << 2);\n\n\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\tsi = si.n;\n\n\t\t\t\t}\n\t\t\t\tyw += w;\n\t\t\t}\n\n\t\t\tms = mty;\n\t\t\tss = sty;\n\t\t\tfor (x = 0; x < w; x++) {\n\t\t\t\tyi = (x << 2) | 0;\n\n\t\t\t\tr = (ryp1 * (pr = px[yi])) | 0;\n\t\t\t\tg = (ryp1 * (pg = px[(yi + 1) | 0])) | 0;\n\t\t\t\tb = (ryp1 * (pb = px[(yi + 2) | 0])) | 0;\n\t\t\t\ta = (ryp1 * (pa = px[(yi + 3) | 0])) | 0;\n\n\t\t\t\tsy = ssy;\n\t\t\t\tfor( i = 0; i < ryp1; i++ )\n\t\t\t\t{\n\t\t\t\t\tsy.r = pr;\n\t\t\t\t\tsy.g = pg;\n\t\t\t\t\tsy.b = pb;\n\t\t\t\t\tsy.a = pa;\n\t\t\t\t\tsy = sy.n;\n\t\t\t\t}\n\n\t\t\t\typ = w;\n\n\t\t\t\tfor( i = 1; i <= radiusY; i++ )\n\t\t\t\t{\n\t\t\t\t\tyi = ( yp + x ) << 2;\n\n\t\t\t\t\tr += ( sy.r = px[yi]);\n\t\t\t\t\tg += ( sy.g = px[yi+1]);\n\t\t\t\t\tb += ( sy.b = px[yi+2]);\n\t\t\t\t\ta += ( sy.a = px[yi+3]);\n\n\t\t\t\t\tsy = sy.n;\n\n\t\t\t\t\tif( i < h1 )\n\t\t\t\t\t{\n\t\t\t\t\t\typ += w;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tyi = x;\n\t\t\t\tsi = ssy;\n\t\t\t\tif ( iterations > 0 )\n\t\t\t\t{\n\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss );\n\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss );\n\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\n\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\t\tsi = si.n;\n\n\t\t\t\t\t\tyi += w;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpa = 255 / pa;\n\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss ) * pa;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\n\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\t\tsi = si.n;\n\n\t\t\t\t\t\tyi += w;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn true;\n\t};\n\n\tcreatejs.BlurFilter = createjs.promote(BlurFilter, \"Filter\");\n}());\n\n//##############################################################################\n// AlphaMapFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\t\n\t\n// constructor:\n\t/**\n\t * Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will\n\t * be copied from the red channel of the map, and the RGB channels will be copied from the target.\n\t *\n\t * Generally, it is recommended that you use {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}, because it has much\n\t * better performance.\n\t *\n\t * <h4>Example</h4>\n\t * This example draws a red->blue box, caches it, and then uses the cache canvas as an alpha map on a 100x100 image.\n\t *\n\t *       var box = new createjs.Shape();\n\t *       box.graphics.beginLinearGradientFill([\"#ff0000\", \"#0000ff\"], [0, 1], 0, 0, 0, 100)\n\t *       box.graphics.drawRect(0, 0, 100, 100);\n\t *       box.cache(0, 0, 100, 100);\n\t *\n\t *       var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n\t *       bmp.filters = [\n\t *           new createjs.AlphaMapFilter(box.cacheCanvas)\n\t *       ];\n\t *       bmp.cache(0, 0, 100, 100);\n\t *       stage.addChild(bmp);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n\t * @class AlphaMapFilter\n\t * @extends Filter\n\t * @constructor\n\t * @param {HTMLImageElement|HTMLCanvasElement} alphaMap The greyscale image (or canvas) to use as the alpha value for the\n\t * result. This should be exactly the same dimensions as the target.\n\t **/\n\tfunction AlphaMapFilter(alphaMap) {\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same\n\t\t * dimensions as the target.\n\t\t * @property alphaMap\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t **/\n\t\tthis.alphaMap = alphaMap;\n\t\t\n\t\t\n\t// private properties:\n\t\t/**\n\t\t * @property _alphaMap\n\t\t * @protected\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t **/\n\t\tthis._alphaMap = null;\n\t\t\n\t\t/**\n\t\t * @property _mapData\n\t\t * @protected\n\t\t * @type Uint8ClampedArray\n\t\t **/\n\t\tthis._mapData = null;\n\t}\n\tvar p = createjs.extend(AlphaMapFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/** docced in super class **/\n\tp.clone = function () {\n\t\tvar o = new AlphaMapFilter(this.alphaMap);\n\t\to._alphaMap = this._alphaMap;\n\t\to._mapData = this._mapData;\n\t\treturn o;\n\t};\n\n\t/** docced in super class **/\n\tp.toString = function () {\n\t\treturn \"[AlphaMapFilter]\";\n\t};\n\n\n// private methods:\n\t/** docced in super class **/\n\tp._applyFilter = function (imageData) {\n\t\tif (!this.alphaMap) { return true; }\n\t\tif (!this._prepAlphaMap()) { return false; }\n\t\t\n\t\t// TODO: update to support scenarios where the target has different dimensions.\n\t\tvar data = imageData.data;\n\t\tvar map = this._mapData;\n\t\tfor(var i=0, l=data.length; i<l; i += 4) { data[i + 3] = map[i] || 0; }\n\t\t\n\t\treturn true;\n\t};\n\n\t/**\n\t * @method _prepAlphaMap\n\t * @protected\n\t **/\n\tp._prepAlphaMap = function () {\n\t\tif (!this.alphaMap) { return false; }\n\t\tif (this.alphaMap == this._alphaMap && this._mapData) { return true; }\n\n\t\tthis._mapData = null;\n\t\tvar map = this._alphaMap = this.alphaMap;\n\t\tvar canvas = map;\n\t\tvar ctx;\n\t\tif (map instanceof HTMLCanvasElement) {\n\t\t\tctx = canvas.getContext(\"2d\");\n\t\t} else {\n\t\t\tcanvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n\t\t\tcanvas.width = map.width;\n\t\t\tcanvas.height = map.height;\n\t\t\tctx = canvas.getContext(\"2d\");\n\t\t\tctx.drawImage(map, 0, 0);\n\t\t}\n\n\t\ttry {\n\t\t\tvar imgData = ctx.getImageData(0, 0, map.width, map.height);\n\t\t} catch (e) {\n\t\t\t//if (!this.suppressCrossDomainErrors) throw new Error(\"unable to access local image data: \" + e);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tthis._mapData = imgData.data;\n\t\treturn true;\n\t};\n\n\n\tcreatejs.AlphaMapFilter = createjs.promote(AlphaMapFilter, \"Filter\");\n}());\n\n//##############################################################################\n// AlphaMaskFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will\n\t * be derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to\n\t * apply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32\n\t * alpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.\n\t *\n\t * <b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>\n\t *\n\t * <h4>Example</h4>\n\t * This example draws a gradient box, then caches it and uses the \"cacheCanvas\" as the alpha mask on a 100x100 image.\n\t *\n\t *      var box = new createjs.Shape();\n\t *      box.graphics.beginLinearGradientFill([\"#000000\", \"rgba(0, 0, 0, 0)\"], [0, 1], 0, 0, 100, 100)\n\t *      box.graphics.drawRect(0, 0, 100, 100);\n\t *      box.cache(0, 0, 100, 100);\n\t *\n\t *      var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n\t *      bmp.filters = [\n\t *          new createjs.AlphaMaskFilter(box.cacheCanvas)\n\t *      ];\n\t *      bmp.cache(0, 0, 100, 100);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n\t * @class AlphaMaskFilter\n\t * @extends Filter\n\t * @constructor\n\t * @param {HTMLImageElement|HTMLCanvasElement} mask\n\t **/\n\tfunction AlphaMaskFilter(mask) {\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The image (or canvas) to use as the mask.\n\t\t * @property mask\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t **/\n\t\tthis.mask = mask;\n\t}\n\tvar p = createjs.extend(AlphaMaskFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\n// public methods:\n\t/**\n\t * Applies the filter to the specified context.\n\t *\n\t * <strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters\n\t * correctly.</strong>\n\t * @method applyFilter\n\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t * @param {Number} x The x position to use for the source rect.\n\t * @param {Number} y The y position to use for the source rect.\n\t * @param {Number} width The width to use for the source rect.\n\t * @param {Number} height The height to use for the source rect.\n\t * @param {CanvasRenderingContext2D} [targetCtx] NOT SUPPORTED IN THIS FILTER. The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t * @param {Number} [targetX] NOT SUPPORTED IN THIS FILTER. The x position to draw the result to. Defaults to the value passed to x.\n\t * @param {Number} [targetY] NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.\n\t * @return {Boolean} If the filter was applied successfully.\n\t **/\n\tp.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\tif (!this.mask) { return true; }\n\t\ttargetCtx = targetCtx || ctx;\n\t\tif (targetX == null) { targetX = x; }\n\t\tif (targetY == null) { targetY = y; }\n\n\t\ttargetCtx.save();\n\t\tif (ctx != targetCtx) {\n\t\t\t// TODO: support targetCtx and targetX/Y\n\t\t\t// clearRect, then draw the ctx in?\n\t\t\treturn false;\n\t\t}\n\n\t\ttargetCtx.globalCompositeOperation = \"destination-in\";\n\t\ttargetCtx.drawImage(this.mask, targetX, targetY);\n\t\ttargetCtx.restore();\n\t\treturn true;\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function () {\n\t\treturn new AlphaMaskFilter(this.mask);\n\t};\n\n\t/** docced in super class **/\n\tp.toString = function () {\n\t\treturn \"[AlphaMaskFilter]\";\n\t};\n\n\n\tcreatejs.AlphaMaskFilter = createjs.promote(AlphaMaskFilter, \"Filter\");\n}());\n\n//##############################################################################\n// ColorFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Applies a color transform to DisplayObjects.\n\t *\n\t * <h4>Example</h4>\n\t * This example draws a red circle, and then transforms it to Blue. This is accomplished by multiplying all the channels\n\t * to 0 (except alpha, which is set to 1), and then adding 255 to the blue channel.\n\t *\n\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t *\n\t *      shape.filters = [\n\t *          new createjs.ColorFilter(0,0,0,1, 0,0,255,0)\n\t *      ];\n\t *      shape.cache(-50, -50, 100, 100);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t * @class ColorFilter\n\t * @param {Number} [redMultiplier=1] The amount to multiply against the red channel. This is a range between 0 and 1.\n\t * @param {Number} [greenMultiplier=1] The amount to multiply against the green channel. This is a range between 0 and 1.\n\t * @param {Number} [blueMultiplier=1] The amount to multiply against the blue channel. This is a range between 0 and 1.\n\t * @param {Number} [alphaMultiplier=1] The amount to multiply against the alpha channel. This is a range between 0 and 1.\n\t * @param {Number} [redOffset=0] The amount to add to the red channel after it has been multiplied. This is a range\n\t * between -255 and 255.\n\t * @param {Number} [greenOffset=0] The amount to add to the green channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @param {Number} [blueOffset=0] The amount to add to the blue channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @param {Number} [alphaOffset=0] The amount to add to the alpha channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @constructor\n\t * @extends Filter\n\t **/\n\tfunction ColorFilter(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {\n\t\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * Red channel multiplier.\n\t\t * @property redMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.redMultiplier = redMultiplier != null ? redMultiplier : 1;\n\t\n\t\t/**\n\t\t * Green channel multiplier.\n\t\t * @property greenMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.greenMultiplier = greenMultiplier != null ? greenMultiplier : 1;\n\t\n\t\t/**\n\t\t * Blue channel multiplier.\n\t\t * @property blueMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.blueMultiplier = blueMultiplier != null ? blueMultiplier : 1;\n\t\n\t\t/**\n\t\t * Alpha channel multiplier.\n\t\t * @property alphaMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.alphaMultiplier = alphaMultiplier != null ? alphaMultiplier : 1;\n\t\n\t\t/**\n\t\t * Red channel offset (added to value).\n\t\t * @property redOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.redOffset = redOffset || 0;\n\t\n\t\t/**\n\t\t * Green channel offset (added to value).\n\t\t * @property greenOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.greenOffset = greenOffset || 0;\n\t\n\t\t/**\n\t\t * Blue channel offset (added to value).\n\t\t * @property blueOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.blueOffset = blueOffset || 0;\n\t\n\t\t/**\n\t\t * Alpha channel offset (added to value).\n\t\t * @property alphaOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.alphaOffset = alphaOffset || 0;\n\t}\n\tvar p = createjs.extend(ColorFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/** docced in super class **/\n\tp.toString = function() {\n\t\treturn \"[ColorFilter]\";\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function() {\n\t\treturn new ColorFilter(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);\n\t};\n\t\n\n// private methods:\n\t/** docced in super class **/\n\tp._applyFilter = function(imageData) {\n\t\tvar data = imageData.data;\n\t\tvar l = data.length;\n\t\tfor (var i=0; i<l; i+=4) {\n\t\t\tdata[i] = data[i]*this.redMultiplier+this.redOffset;\n\t\t\tdata[i+1] = data[i+1]*this.greenMultiplier+this.greenOffset;\n\t\t\tdata[i+2] = data[i+2]*this.blueMultiplier+this.blueOffset;\n\t\t\tdata[i+3] = data[i+3]*this.alphaMultiplier+this.alphaOffset;\n\t\t}\n\t\treturn true;\n\t};\n\n\n\tcreatejs.ColorFilter = createjs.promote(ColorFilter, \"Filter\");\n}());\n\n//##############################################################################\n// ColorMatrix.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Provides helper functions for assembling a matrix for use with the {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}.\n\t * Most methods return the instance to facilitate chained calls.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myColorMatrix.adjustHue(20).adjustBrightness(50);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}\n\t * for an example of how to use ColorMatrix to change a DisplayObject's color.\n\t * @class ColorMatrix\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @constructor\n\t **/\n\tfunction ColorMatrix(brightness, contrast, saturation, hue) {\n\t\tthis.setColor(brightness, contrast, saturation, hue);\n\t}\n\tvar p = ColorMatrix.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// constants:\n\t/**\n\t * Array of delta values for contrast calculations.\n\t * @property DELTA_INDEX\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tColorMatrix.DELTA_INDEX = [\n\t\t0,    0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1,  0.11,\n\t\t0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24,\n\t\t0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42,\n\t\t0.44, 0.46, 0.48, 0.5,  0.53, 0.56, 0.59, 0.62, 0.65, 0.68,\n\t\t0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98,\n\t\t1.0,  1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54,\n\t\t1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0,  2.12, 2.25,\n\t\t2.37, 2.50, 2.62, 2.75, 2.87, 3.0,  3.2,  3.4,  3.6,  3.8,\n\t\t4.0,  4.3,  4.7,  4.9,  5.0,  5.5,  6.0,  6.5,  6.8,  7.0,\n\t\t7.3,  7.5,  7.8,  8.0,  8.4,  8.7,  9.0,  9.4,  9.6,  9.8,\n\t\t10.0\n\t];\n\n\t/**\n\t * Identity matrix values.\n\t * @property IDENTITY_MATRIX\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tColorMatrix.IDENTITY_MATRIX = [\n\t\t1,0,0,0,0,\n\t\t0,1,0,0,0,\n\t\t0,0,1,0,0,\n\t\t0,0,0,1,0,\n\t\t0,0,0,0,1\n\t];\n\n\t/**\n\t * The constant length of a color matrix.\n\t * @property LENGTH\n\t * @type Number\n\t * @protected\n\t * @static\n\t **/\n\tColorMatrix.LENGTH = ColorMatrix.IDENTITY_MATRIX.length;\n\n\n// public methods:\n\t/**\n\t * Resets the instance with the specified values.\n\t * @method setColor\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tp.setColor = function(brightness,contrast,saturation,hue) {\n\t\treturn this.reset().adjustColor(brightness,contrast,saturation,hue);\n\t};\n\n\t/**\n\t * Resets the matrix to identity values.\n\t * @method reset\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tp.reset = function() {\n\t\treturn this.copy(ColorMatrix.IDENTITY_MATRIX);\n\t};\n\n\t/**\n\t * Shortcut method to adjust brightness, contrast, saturation and hue.\n\t * Equivalent to calling adjustHue(hue), adjustContrast(contrast),\n\t * adjustBrightness(brightness), adjustSaturation(saturation), in that order.\n\t * @method adjustColor\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustColor = function(brightness,contrast,saturation,hue) {\n\t\tthis.adjustHue(hue);\n\t\tthis.adjustContrast(contrast);\n\t\tthis.adjustBrightness(brightness);\n\t\treturn this.adjustSaturation(saturation);\n\t};\n\n\t/**\n\t * Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\n\t * Positive values will make the image brighter, negative values will make it darker.\n\t * @method adjustBrightness\n\t * @param {Number} value A value between -255 & 255 that will be added to the RGB channels.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustBrightness = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,255);\n\t\tthis._multiplyMatrix([\n\t\t\t1,0,0,0,value,\n\t\t\t0,1,0,0,value,\n\t\t\t0,0,1,0,value,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Adjusts the contrast of pixel color.\n\t * Positive values will increase contrast, negative values will decrease contrast.\n\t * @method adjustContrast\n\t * @param {Number} value A value between -100 & 100.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustContrast = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,100);\n\t\tvar x;\n\t\tif (value<0) {\n\t\t\tx = 127+value/100*127;\n\t\t} else {\n\t\t\tx = value%1;\n\t\t\tif (x == 0) {\n\t\t\t\tx = ColorMatrix.DELTA_INDEX[value];\n\t\t\t} else {\n\t\t\t\tx = ColorMatrix.DELTA_INDEX[(value<<0)]*(1-x)+ColorMatrix.DELTA_INDEX[(value<<0)+1]*x; // use linear interpolation for more granularity.\n\t\t\t}\n\t\t\tx = x*127+127;\n\t\t}\n\t\tthis._multiplyMatrix([\n\t\t\tx/127,0,0,0,0.5*(127-x),\n\t\t\t0,x/127,0,0,0.5*(127-x),\n\t\t\t0,0,x/127,0,0.5*(127-x),\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Adjusts the color saturation of the pixel.\n\t * Positive values will increase saturation, negative values will decrease saturation (trend towards greyscale).\n\t * @method adjustSaturation\n\t * @param {Number} value A value between -100 & 100.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustSaturation = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,100);\n\t\tvar x = 1+((value > 0) ? 3*value/100 : value/100);\n\t\tvar lumR = 0.3086;\n\t\tvar lumG = 0.6094;\n\t\tvar lumB = 0.0820;\n\t\tthis._multiplyMatrix([\n\t\t\tlumR*(1-x)+x,lumG*(1-x),lumB*(1-x),0,0,\n\t\t\tlumR*(1-x),lumG*(1-x)+x,lumB*(1-x),0,0,\n\t\t\tlumR*(1-x),lumG*(1-x),lumB*(1-x)+x,0,0,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\n\t/**\n\t * Adjusts the hue of the pixel color.\n\t * @method adjustHue\n\t * @param {Number} value A value between -180 & 180.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustHue = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,180)/180*Math.PI;\n\t\tvar cosVal = Math.cos(value);\n\t\tvar sinVal = Math.sin(value);\n\t\tvar lumR = 0.213;\n\t\tvar lumG = 0.715;\n\t\tvar lumB = 0.072;\n\t\tthis._multiplyMatrix([\n\t\t\tlumR+cosVal*(1-lumR)+sinVal*(-lumR),lumG+cosVal*(-lumG)+sinVal*(-lumG),lumB+cosVal*(-lumB)+sinVal*(1-lumB),0,0,\n\t\t\tlumR+cosVal*(-lumR)+sinVal*(0.143),lumG+cosVal*(1-lumG)+sinVal*(0.140),lumB+cosVal*(-lumB)+sinVal*(-0.283),0,0,\n\t\t\tlumR+cosVal*(-lumR)+sinVal*(-(1-lumR)),lumG+cosVal*(-lumG)+sinVal*(lumG),lumB+cosVal*(1-lumB)+sinVal*(lumB),0,0,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Concatenates (multiplies) the specified matrix with this one.\n\t * @method concat\n\t * @param {Array} matrix An array or ColorMatrix instance.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.concat = function(matrix) {\n\t\tmatrix = this._fixMatrix(matrix);\n\t\tif (matrix.length != ColorMatrix.LENGTH) { return this; }\n\t\tthis._multiplyMatrix(matrix);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a clone of this ColorMatrix.\n\t * @method clone\n\t * @return {ColorMatrix} A clone of this ColorMatrix.\n\t **/\n\tp.clone = function() {\n\t\treturn (new ColorMatrix()).copy(this);\n\t};\n\n\t/**\n\t * Return a length 25 (5x5) array instance containing this matrix's values.\n\t * @method toArray\n\t * @return {Array} An array holding this matrix's values.\n\t **/\n\tp.toArray = function() {\n\t\tvar arr = [];\n\t\tfor (var i= 0, l=ColorMatrix.LENGTH; i<l; i++) {\n\t\t\tarr[i] = this[i];\n\t\t}\n\t\treturn arr;\n\t};\n\n\t/**\n\t * Copy the specified matrix's values to this matrix.\n\t * @method copy\n\t * @param {Array} matrix An array or ColorMatrix instance.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.copy = function(matrix) {\n\t\tvar l = ColorMatrix.LENGTH;\n\t\tfor (var i=0;i<l;i++) {\n\t\t\tthis[i] = matrix[i];\n\t\t}\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[ColorMatrix]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _multiplyMatrix\n\t * @param {Array} matrix\n\t * @protected\n\t **/\n\tp._multiplyMatrix = function(matrix) {\n\t\tvar i, j, k, col = [];\n\n\t\tfor (i=0;i<5;i++) {\n\t\t\tfor (j=0;j<5;j++) {\n\t\t\t\tcol[j] = this[j+i*5];\n\t\t\t}\n\t\t\tfor (j=0;j<5;j++) {\n\t\t\t\tvar val=0;\n\t\t\t\tfor (k=0;k<5;k++) {\n\t\t\t\t\tval += matrix[j+k*5]*col[k];\n\t\t\t\t}\n\t\t\t\tthis[j+i*5] = val;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.\n\t * @method _cleanValue\n\t * @param {Number} value The raw number\n\t * @param {Number} limit The maximum that the number can be. The minimum is the limit * -1.\n\t * @protected\n\t **/\n\tp._cleanValue = function(value, limit) {\n\t\treturn Math.min(limit,Math.max(-limit,value));\n\t};\n\n\t/**\n\t * Makes sure matrixes are 5x5 (25 long).\n\t * @method _fixMatrix\n\t * @param {Array} matrix\n\t * @protected\n\t **/\n\tp._fixMatrix = function(matrix) {\n\t\tif (matrix instanceof ColorMatrix) { matrix = matrix.toArray(); }\n\t\tif (matrix.length < ColorMatrix.LENGTH) {\n\t\t\tmatrix = matrix.slice(0,matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length,ColorMatrix.LENGTH));\n\t\t} else if (matrix.length > ColorMatrix.LENGTH) {\n\t\t\tmatrix = matrix.slice(0,ColorMatrix.LENGTH);\n\t\t}\n\t\treturn matrix;\n\t};\n\n\n\tcreatejs.ColorMatrix = ColorMatrix;\n}());\n\n//##############################################################################\n// ColorMatrixFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the\n\t * {{#crossLink \"ColorMatrix\"}}{{/crossLink}} for more information on changing colors. For an easier color transform,\n\t * consider the {{#crossLink \"ColorFilter\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t * This example creates a red circle, inverts its hue, and then saturates it to brighten it up.\n\t *\n\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t *\n\t *      var matrix = new createjs.ColorMatrix().adjustHue(180).adjustSaturation(100);\n\t *      shape.filters = [\n\t *          new createjs.ColorMatrixFilter(matrix)\n\t *      ];\n\t *\n\t *      shape.cache(-50, -50, 100, 100);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t * @class ColorMatrixFilter\n\t * @constructor\n\t * @extends Filter\n\t * @param {Array | ColorMatrix} matrix A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t * class.\n\t **/\n\tfunction ColorMatrixFilter(matrix) {\n\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t\t * @property matrix\n\t\t * @type Array | ColorMatrix\n\t\t **/\n\t\tthis.matrix = matrix;\n\t}\n\tvar p = createjs.extend(ColorMatrixFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\n// public methods:\n\t/** docced in super class **/\n\tp.toString = function() {\n\t\treturn \"[ColorMatrixFilter]\";\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function() {\n\t\treturn new ColorMatrixFilter(this.matrix);\n\t};\n\n// private methods:\n\t/** docced in super class **/\n\tp._applyFilter = function(imageData) { \n\t\tvar data = imageData.data;\n\t\tvar l = data.length;\n\t\tvar r,g,b,a;\n\t\tvar mtx = this.matrix;\n\t\tvar m0 =  mtx[0],  m1 =  mtx[1],  m2 =  mtx[2],  m3 =  mtx[3],  m4 =  mtx[4];\n\t\tvar m5 =  mtx[5],  m6 =  mtx[6],  m7 =  mtx[7],  m8 =  mtx[8],  m9 =  mtx[9];\n\t\tvar m10 = mtx[10], m11 = mtx[11], m12 = mtx[12], m13 = mtx[13], m14 = mtx[14];\n\t\tvar m15 = mtx[15], m16 = mtx[16], m17 = mtx[17], m18 = mtx[18], m19 = mtx[19];\n\n\t\tfor (var i=0; i<l; i+=4) {\n\t\t\tr = data[i];\n\t\t\tg = data[i+1];\n\t\t\tb = data[i+2];\n\t\t\ta = data[i+3];\n\t\t\tdata[i] = r*m0+g*m1+b*m2+a*m3+m4; // red\n\t\t\tdata[i+1] = r*m5+g*m6+b*m7+a*m8+m9; // green\n\t\t\tdata[i+2] = r*m10+g*m11+b*m12+a*m13+m14; // blue\n\t\t\tdata[i+3] = r*m15+g*m16+b*m17+a*m18+m19; // alpha\n\t\t}\n\t\treturn true;\n\t};\n\n\n\tcreatejs.ColorMatrixFilter = createjs.promote(ColorMatrixFilter, \"Filter\");\n}());\n\n//##############################################################################\n// Touch.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n * Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and\n * modern Android browser) and the Pointer API (IE), including ms-prefixed events in IE10, and unprefixed in IE11.\n *\n * Ensure that you {{#crossLink \"Touch/disable\"}}{{/crossLink}} touch when cleaning up your application. You do not have\n * to check if touch is supported to enable it, as it will fail gracefully if it is not supported.\n *\n * <h4>Example</h4>\n *\n *      var stage = new createjs.Stage(\"canvasId\");\n *      createjs.Touch.enable(stage);\n *\n * <strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:\n *\n *      createjs.Touch.disable(stage);\n *\n * @class Touch\n * @static\n **/\n\tfunction Touch() {\n\t\tthrow \"Touch cannot be instantiated\";\n\t}\n\n\n// public static methods:\n\t/**\n\t * Returns `true` if touch is supported in the current browser.\n\t * @method isSupported\n\t * @return {Boolean} Indicates whether touch is supported in the current browser.\n\t * @static\n\t **/\n\tTouch.isSupported = function() {\n\t\treturn\t!!(('ontouchstart' in window) // iOS & Android\n\t\t\t|| (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) // IE10\n\t\t\t|| (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0)); // IE11+\n\t};\n\n\t/**\n\t * Enables touch interaction for the specified EaselJS {{#crossLink \"Stage\"}}{{/crossLink}}. Currently supports iOS\n\t * (and compatible browsers, such as modern Android browsers), and IE10/11. Supports both single touch and\n\t * multi-touch modes. Extends the EaselJS {{#crossLink \"MouseEvent\"}}{{/crossLink}} model, but without support for\n\t * double click or over/out events. See the MouseEvent {{#crossLink \"MouseEvent/pointerId:property\"}}{{/crossLink}}\n\t * for more information.\n\t * @method enable\n\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to enable touch on.\n\t * @param {Boolean} [singleTouch=false] If `true`, only a single touch will be active at a time.\n\t * @param {Boolean} [allowDefault=false] If `true`, then default gesture actions (ex. scrolling, zooming) will be\n\t * allowed when the user is interacting with the target canvas.\n\t * @return {Boolean} Returns `true` if touch was successfully enabled on the target stage.\n\t * @static\n\t **/\n\tTouch.enable = function(stage, singleTouch, allowDefault) {\n\t\tif (!stage || !stage.canvas || !Touch.isSupported()) { return false; }\n\t\tif (stage.__touch) { return true; }\n\n\t\t// inject required properties on stage:\n\t\tstage.__touch = {pointers:{}, multitouch:!singleTouch, preventDefault:!allowDefault, count:0};\n\n\t\t// note that in the future we may need to disable the standard mouse event model before adding\n\t\t// these to prevent duplicate calls. It doesn't seem to be an issue with iOS devices though.\n\t\tif ('ontouchstart' in window) { Touch._IOS_enable(stage); }\n\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_enable(stage); }\n\t\treturn true;\n\t};\n\n\t/**\n\t * Removes all listeners that were set up when calling `Touch.enable()` on a stage.\n\t * @method disable\n\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to disable touch on.\n\t * @static\n\t **/\n\tTouch.disable = function(stage) {\n\t\tif (!stage) { return; }\n\t\tif ('ontouchstart' in window) { Touch._IOS_disable(stage); }\n\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_disable(stage); }\n\t\t\n\t\tdelete stage.__touch;\n\t};\n\n\n// Private static methods:\n\t/**\n\t * @method _IOS_enable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IOS_enable = function(stage) {\n\t\tvar canvas = stage.canvas;\n\t\tvar f = stage.__touch.f = function(e) { Touch._IOS_handleEvent(stage,e); };\n\t\tcanvas.addEventListener(\"touchstart\", f, false);\n\t\tcanvas.addEventListener(\"touchmove\", f, false);\n\t\tcanvas.addEventListener(\"touchend\", f, false);\n\t\tcanvas.addEventListener(\"touchcancel\", f, false);\n\t};\n\n\t/**\n\t * @method _IOS_disable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IOS_disable = function(stage) {\n\t\tvar canvas = stage.canvas;\n\t\tif (!canvas) { return; }\n\t\tvar f = stage.__touch.f;\n\t\tcanvas.removeEventListener(\"touchstart\", f, false);\n\t\tcanvas.removeEventListener(\"touchmove\", f, false);\n\t\tcanvas.removeEventListener(\"touchend\", f, false);\n\t\tcanvas.removeEventListener(\"touchcancel\", f, false);\n\t};\n\n\t/**\n\t * @method _IOS_handleEvent\n\t * @param {Stage} stage\n\t * @param {Object} e The event to handle\n\t * @protected\n\t * @static\n\t **/\n\tTouch._IOS_handleEvent = function(stage, e) {\n\t\tif (!stage) { return; }\n\t\tif (stage.__touch.preventDefault) { e.preventDefault&&e.preventDefault(); }\n\t\tvar touches = e.changedTouches;\n\t\tvar type = e.type;\n\t\tfor (var i= 0,l=touches.length; i<l; i++) {\n\t\t\tvar touch = touches[i];\n\t\t\tvar id = touch.identifier;\n\t\t\tif (touch.target != stage.canvas) { continue; }\n\n\t\t\tif (type == \"touchstart\") {\n\t\t\t\tthis._handleStart(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t} else if (type == \"touchmove\") {\n\t\t\t\tthis._handleMove(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t} else if (type == \"touchend\" || type == \"touchcancel\") {\n\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _IE_enable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IE_enable = function(stage) {\n\t\tvar canvas = stage.canvas;\n\t\tvar f = stage.__touch.f = function(e) { Touch._IE_handleEvent(stage,e); };\n\n\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\tcanvas.addEventListener(\"MSPointerDown\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerMove\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerUp\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerCancel\", f, false);\n\t\t\tif (stage.__touch.preventDefault) { canvas.style.msTouchAction = \"none\"; }\n\t\t} else {\n\t\t\tcanvas.addEventListener(\"pointerdown\", f, false);\n\t\t\twindow.addEventListener(\"pointermove\", f, false);\n\t\t\twindow.addEventListener(\"pointerup\", f, false);\n\t\t\twindow.addEventListener(\"pointercancel\", f, false);\n\t\t\tif (stage.__touch.preventDefault) { canvas.style.touchAction = \"none\"; }\n\n\t\t}\n\t\tstage.__touch.activeIDs = {};\n\t};\n\n\t/**\n\t * @method _IE_disable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IE_disable = function(stage) {\n\t\tvar f = stage.__touch.f;\n\n\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\twindow.removeEventListener(\"MSPointerMove\", f, false);\n\t\t\twindow.removeEventListener(\"MSPointerUp\", f, false);\n\t\t\twindow.removeEventListener(\"MSPointerCancel\", f, false);\n\t\t\tif (stage.canvas) {\n\t\t\t\tstage.canvas.removeEventListener(\"MSPointerDown\", f, false);\n\t\t\t}\n\t\t} else {\n\t\t\twindow.removeEventListener(\"pointermove\", f, false);\n\t\t\twindow.removeEventListener(\"pointerup\", f, false);\n\t\t\twindow.removeEventListener(\"pointercancel\", f, false);\n\t\t\tif (stage.canvas) {\n\t\t\t\tstage.canvas.removeEventListener(\"pointerdown\", f, false);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _IE_handleEvent\n\t * @param {Stage} stage\n\t * @param {Object} e The event to handle.\n\t * @protected\n\t * @static\n\t **/\n\tTouch._IE_handleEvent = function(stage, e) {\n\t\tif (!stage) { return; }\n\t\tif (stage.__touch.preventDefault) { e.preventDefault && e.preventDefault(); }\n\t\tvar type = e.type;\n\t\tvar id = e.pointerId;\n\t\tvar ids = stage.__touch.activeIDs;\n\n\t\tif (type == \"MSPointerDown\" || type == \"pointerdown\") {\n\t\t\tif (e.srcElement != stage.canvas) { return; }\n\t\t\tids[id] = true;\n\t\t\tthis._handleStart(stage, id, e, e.pageX, e.pageY);\n\t\t} else if (ids[id]) { // it's an id we're watching\n\t\t\tif (type == \"MSPointerMove\" || type == \"pointermove\") {\n\t\t\t\tthis._handleMove(stage, id, e, e.pageX, e.pageY);\n\t\t\t} else if (type == \"MSPointerUp\" || type == \"MSPointerCancel\"\n\t\t\t\t\t|| type == \"pointerup\" || type == \"pointercancel\") {\n\t\t\t\tdelete(ids[id]);\n\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleStart\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t **/\n\tTouch._handleStart = function(stage, id, e, x, y) {\n\t\tvar props = stage.__touch;\n\t\tif (!props.multitouch && props.count) { return; }\n\t\tvar ids = props.pointers;\n\t\tif (ids[id]) { return; }\n\t\tids[id] = true;\n\t\tprops.count++;\n\t\tstage._handlePointerDown(id, e, x, y);\n\t};\n\n\t/**\n\t * @method _handleMove\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t **/\n\tTouch._handleMove = function(stage, id, e, x, y) {\n\t\tif (!stage.__touch.pointers[id]) { return; }\n\t\tstage._handlePointerMove(id, e, x, y);\n\t};\n\n\t/**\n\t * @method _handleEnd\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @protected\n\t **/\n\tTouch._handleEnd = function(stage, id, e) {\n\t\t// TODO: cancel should be handled differently for proper UI (ex. an up would trigger a click, a cancel would more closely resemble an out).\n\t\tvar props = stage.__touch;\n\t\tvar ids = props.pointers;\n\t\tif (!ids[id]) { return; }\n\t\tprops.count--;\n\t\tstage._handlePointerUp(id, e, true);\n\t\tdelete(ids[id]);\n\t};\n\n\n\tcreatejs.Touch = Touch;\n}());\n\n//##############################################################################\n// version.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * Static class holding library specific information such as the version and buildDate of\n\t * the library.\n\t * @class EaselJS\n\t **/\n\tvar s = createjs.EaselJS = createjs.EaselJS || {};\n\n\t/**\n\t * The version string for this release.\n\t * @property version\n\t * @type String\n\t * @static\n\t **/\n\ts.version = /*=version*/\"0.8.2\"; // injected by build process\n\n\t/**\n\t * The build date for this release in UTC format.\n\t * @property buildDate\n\t * @type String\n\t * @static\n\t **/\n\ts.buildDate = /*=date*/\"Thu, 26 Nov 2015 20:44:34 GMT\"; // injected by build process\n\n})();\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = window.createjs;\n}.call(window));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./bower_components/EaselJS/lib/easeljs-0.8.2.combined.js\n// module id = 26\n// module chunks = 1","\n/* styles */\nrequire(\"!!../../extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../../vue-loader/lib/style-rewriter?id=data-v-0cf58e46!../../vue-loader/lib/selector?type=styles&index=0!./PulseLoader.vue\")\n\nvar Component = require(\"!../../vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../vue-loader/lib/selector?type=script&index=0!./PulseLoader.vue\"),\n  /* template */\n  require(\"!!../../vue-loader/lib/template-compiler?id=data-v-0cf58e46!../../vue-loader/lib/selector?type=template&index=0!./PulseLoader.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-spinner/src/PulseLoader.vue\n// module id = 30\n// module chunks = 1","\n/* styles */\nrequire(\"!!../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../node_modules/vue-loader/lib/style-rewriter?id=data-v-0c903428!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n\nvar Component = require(\"!../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"),\n  /* template */\n  require(\"!!../node_modules/vue-loader/lib/template-compiler?id=data-v-0c903428!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = 31\n// module chunks = 1","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../../node_modules/vue-loader/lib/style-rewriter?id=data-v-6b05765f!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./ButtonStore.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./ButtonStore.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?id=data-v-6b05765f!../../node_modules/vue-loader/lib/selector?type=template&index=0!./ButtonStore.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/ButtonStore.vue\n// module id = 32\n// module chunks = 1","var Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./CanvasModel.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?id=data-v-5c1a5141!../../node_modules/vue-loader/lib/selector?type=template&index=0!./CanvasModel.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/CanvasModel.vue\n// module id = 33\n// module chunks = 1","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../../node_modules/vue-loader/lib/style-rewriter?id=data-v-a7b0ddc6!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./SuperButton.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./SuperButton.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?id=data-v-a7b0ddc6!../../node_modules/vue-loader/lib/selector?type=template&index=0!./SuperButton.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/SuperButton.vue\n// module id = 34\n// module chunks = 1","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../../node_modules/vue-loader/lib/style-rewriter?id=data-v-23ff477a!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./SuperCanvas.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./SuperCanvas.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?id=data-v-23ff477a!../../node_modules/vue-loader/lib/selector?type=template&index=0!./SuperCanvas.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/SuperCanvas.vue\n// module id = 35\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"container\"\n  }, [_c('button-store'), _vm._v(\" \"), _c('div', {\n    staticClass: \"flex-box\"\n  }, [_c('super-button'), _vm._v(\" \"), _c('super-canvas')], 1)], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-0c903428!./~/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = 36\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.loading),\n      expression: \"loading\"\n    }],\n    staticClass: \"v-spinner\"\n  }, [_c('div', {\n    staticClass: \"v-pulse v-pulse1\",\n    style: ([_vm.spinnerStyle, _vm.spinnerDelay1])\n  }), _c('div', {\n    staticClass: \"v-pulse v-pulse2\",\n    style: ([_vm.spinnerStyle, _vm.spinnerDelay2])\n  }), _c('div', {\n    staticClass: \"v-pulse v-pulse3\",\n    style: ([_vm.spinnerStyle, _vm.spinnerDelay3])\n  })])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-0cf58e46!./~/vue-loader/lib/selector.js?type=template&index=0!./~/vue-spinner/src/PulseLoader.vue\n// module id = 37\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"canvaswrap\",\n    on: {\n      \"mousedown\": _vm.mousedown,\n      \"mousemove\": _vm.mousemove,\n      \"mouseup\": _vm.mouseup\n    }\n  }, [_c('canvas', {\n    attrs: {\n      \"width\": \"1050\",\n      \"height\": \"1000\",\n      \"id\": \"canvas\"\n    }\n  }), _vm._v(\" \"), _vm._l((_vm.models), function(model) {\n    return _c('canvas-model', {\n      attrs: {\n        \"iscurrent\": model.iscurrent,\n        \"x\": model.x,\n        \"y\": model.y,\n        \"uniqueId\": model.uniqueId,\n        \"ctrlline\": model.ctrlline\n      }\n    })\n  })], 2)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-23ff477a!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/SuperCanvas.vue\n// module id = 38\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c(\"div\")\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-5c1a5141!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/CanvasModel.vue\n// module id = 39\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('button', {\n    staticClass: \"btn btn-outline-primary crud\",\n    attrs: {\n      \"type\": \"button\",\n      \"id\": \"fetch\",\n      \"blur\": !_vm.fetchable,\n      \"disabled\": !_vm.fetchable || !_vm.savable\n    },\n    on: {\n      \"click\": _vm.fetch\n    }\n  }, [_vm._v(\"\\n    Fetch\\n  \"), _c('pulse-loader', {\n    attrs: {\n      \"loading\": !_vm.fetchable,\n      \"color\": \"#0275d8\",\n      \"size\": \"5px\"\n    }\n  })], 1), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-outline-warning crud\",\n    attrs: {\n      \"type\": \"button\",\n      \"id\": \"save\",\n      \"blur\": !_vm.savable,\n      \"disabled\": !_vm.fetchable || !_vm.savable\n    },\n    on: {\n      \"click\": _vm.save\n    }\n  }, [_vm._v(\"\\n    Save\\n  \"), _c('pulse-loader', {\n    attrs: {\n      \"loading\": !_vm.savable,\n      \"color\": \"#f0ad4e\",\n      \"size\": \"5px\"\n    }\n  })], 1)])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-6b05765f!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/ButtonStore.vue\n// module id = 40\n// module chunks = 1","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"draw\"\n  }, _vm._l((_vm.buttons), function(button) {\n    return _c('button', {\n      class: button.class,\n      attrs: {\n        \"type\": \"button\",\n        \"id\": button.id\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.changeStatus(button.id)\n        }\n      }\n    }, [_vm._v(\"\\n    \" + _vm._s(button.text) + \"\\n  \")])\n  }))\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-a7b0ddc6!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/SuperButton.vue\n// module id = 41\n// module chunks = 1"],"sourceRoot":""}